
PacMan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010a18  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002238  08010bc8  08010bc8  00020bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012e00  08012e00  00032cdc  2**0
                  CONTENTS
  4 .ARM          00000008  08012e00  08012e00  00022e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012e08  08012e08  00032cdc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012e08  08012e08  00022e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012e0c  08012e0c  00022e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002cdc  20000000  08012e10  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00032cdc  2**0
                  CONTENTS
 10 .bss          00001818  20002cdc  20002cdc  00032cdc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200044f4  200044f4  00032cdc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00032cdc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00032d0c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002af83  00000000  00000000  00032d4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006bd1  00000000  00000000  0005dcd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002430  00000000  00000000  000648a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001bc4  00000000  00000000  00066cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002d243  00000000  00000000  0006889c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00030295  00000000  00000000  00095adf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f3339  00000000  00000000  000c5d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000a608  00000000  00000000  001b90b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  001c36b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20002cdc 	.word	0x20002cdc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08010bb0 	.word	0x08010bb0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20002ce0 	.word	0x20002ce0
 80001ec:	08010bb0 	.word	0x08010bb0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__gedf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpdf2+0x4>
 800060e:	bf00      	nop

08000610 <__ledf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpdf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpdf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000624:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000628:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800062c:	bf18      	it	ne
 800062e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000632:	d01b      	beq.n	800066c <__cmpdf2+0x54>
 8000634:	b001      	add	sp, #4
 8000636:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800063a:	bf0c      	ite	eq
 800063c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000640:	ea91 0f03 	teqne	r1, r3
 8000644:	bf02      	ittt	eq
 8000646:	ea90 0f02 	teqeq	r0, r2
 800064a:	2000      	moveq	r0, #0
 800064c:	4770      	bxeq	lr
 800064e:	f110 0f00 	cmn.w	r0, #0
 8000652:	ea91 0f03 	teq	r1, r3
 8000656:	bf58      	it	pl
 8000658:	4299      	cmppl	r1, r3
 800065a:	bf08      	it	eq
 800065c:	4290      	cmpeq	r0, r2
 800065e:	bf2c      	ite	cs
 8000660:	17d8      	asrcs	r0, r3, #31
 8000662:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000666:	f040 0001 	orr.w	r0, r0, #1
 800066a:	4770      	bx	lr
 800066c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000670:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000674:	d102      	bne.n	800067c <__cmpdf2+0x64>
 8000676:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800067a:	d107      	bne.n	800068c <__cmpdf2+0x74>
 800067c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000680:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000684:	d1d6      	bne.n	8000634 <__cmpdf2+0x1c>
 8000686:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800068a:	d0d3      	beq.n	8000634 <__cmpdf2+0x1c>
 800068c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <__aeabi_cdrcmple>:
 8000694:	4684      	mov	ip, r0
 8000696:	4610      	mov	r0, r2
 8000698:	4662      	mov	r2, ip
 800069a:	468c      	mov	ip, r1
 800069c:	4619      	mov	r1, r3
 800069e:	4663      	mov	r3, ip
 80006a0:	e000      	b.n	80006a4 <__aeabi_cdcmpeq>
 80006a2:	bf00      	nop

080006a4 <__aeabi_cdcmpeq>:
 80006a4:	b501      	push	{r0, lr}
 80006a6:	f7ff ffb7 	bl	8000618 <__cmpdf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd01      	pop	{r0, pc}

080006b4 <__aeabi_dcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cdcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_dcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cdcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_dcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cdcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_dcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffce 	bl	8000694 <__aeabi_cdrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_dcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc4 	bl	8000694 <__aeabi_cdrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_uldivmod>:
 8000718:	b953      	cbnz	r3, 8000730 <__aeabi_uldivmod+0x18>
 800071a:	b94a      	cbnz	r2, 8000730 <__aeabi_uldivmod+0x18>
 800071c:	2900      	cmp	r1, #0
 800071e:	bf08      	it	eq
 8000720:	2800      	cmpeq	r0, #0
 8000722:	bf1c      	itt	ne
 8000724:	f04f 31ff 	movne.w	r1, #4294967295
 8000728:	f04f 30ff 	movne.w	r0, #4294967295
 800072c:	f000 b970 	b.w	8000a10 <__aeabi_idiv0>
 8000730:	f1ad 0c08 	sub.w	ip, sp, #8
 8000734:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000738:	f000 f806 	bl	8000748 <__udivmoddi4>
 800073c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000744:	b004      	add	sp, #16
 8000746:	4770      	bx	lr

08000748 <__udivmoddi4>:
 8000748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800074c:	9e08      	ldr	r6, [sp, #32]
 800074e:	460d      	mov	r5, r1
 8000750:	4604      	mov	r4, r0
 8000752:	460f      	mov	r7, r1
 8000754:	2b00      	cmp	r3, #0
 8000756:	d14a      	bne.n	80007ee <__udivmoddi4+0xa6>
 8000758:	428a      	cmp	r2, r1
 800075a:	4694      	mov	ip, r2
 800075c:	d965      	bls.n	800082a <__udivmoddi4+0xe2>
 800075e:	fab2 f382 	clz	r3, r2
 8000762:	b143      	cbz	r3, 8000776 <__udivmoddi4+0x2e>
 8000764:	fa02 fc03 	lsl.w	ip, r2, r3
 8000768:	f1c3 0220 	rsb	r2, r3, #32
 800076c:	409f      	lsls	r7, r3
 800076e:	fa20 f202 	lsr.w	r2, r0, r2
 8000772:	4317      	orrs	r7, r2
 8000774:	409c      	lsls	r4, r3
 8000776:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800077a:	fa1f f58c 	uxth.w	r5, ip
 800077e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000782:	0c22      	lsrs	r2, r4, #16
 8000784:	fb0e 7711 	mls	r7, lr, r1, r7
 8000788:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800078c:	fb01 f005 	mul.w	r0, r1, r5
 8000790:	4290      	cmp	r0, r2
 8000792:	d90a      	bls.n	80007aa <__udivmoddi4+0x62>
 8000794:	eb1c 0202 	adds.w	r2, ip, r2
 8000798:	f101 37ff 	add.w	r7, r1, #4294967295
 800079c:	f080 811c 	bcs.w	80009d8 <__udivmoddi4+0x290>
 80007a0:	4290      	cmp	r0, r2
 80007a2:	f240 8119 	bls.w	80009d8 <__udivmoddi4+0x290>
 80007a6:	3902      	subs	r1, #2
 80007a8:	4462      	add	r2, ip
 80007aa:	1a12      	subs	r2, r2, r0
 80007ac:	b2a4      	uxth	r4, r4
 80007ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80007b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80007b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80007ba:	fb00 f505 	mul.w	r5, r0, r5
 80007be:	42a5      	cmp	r5, r4
 80007c0:	d90a      	bls.n	80007d8 <__udivmoddi4+0x90>
 80007c2:	eb1c 0404 	adds.w	r4, ip, r4
 80007c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80007ca:	f080 8107 	bcs.w	80009dc <__udivmoddi4+0x294>
 80007ce:	42a5      	cmp	r5, r4
 80007d0:	f240 8104 	bls.w	80009dc <__udivmoddi4+0x294>
 80007d4:	4464      	add	r4, ip
 80007d6:	3802      	subs	r0, #2
 80007d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80007dc:	1b64      	subs	r4, r4, r5
 80007de:	2100      	movs	r1, #0
 80007e0:	b11e      	cbz	r6, 80007ea <__udivmoddi4+0xa2>
 80007e2:	40dc      	lsrs	r4, r3
 80007e4:	2300      	movs	r3, #0
 80007e6:	e9c6 4300 	strd	r4, r3, [r6]
 80007ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ee:	428b      	cmp	r3, r1
 80007f0:	d908      	bls.n	8000804 <__udivmoddi4+0xbc>
 80007f2:	2e00      	cmp	r6, #0
 80007f4:	f000 80ed 	beq.w	80009d2 <__udivmoddi4+0x28a>
 80007f8:	2100      	movs	r1, #0
 80007fa:	e9c6 0500 	strd	r0, r5, [r6]
 80007fe:	4608      	mov	r0, r1
 8000800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000804:	fab3 f183 	clz	r1, r3
 8000808:	2900      	cmp	r1, #0
 800080a:	d149      	bne.n	80008a0 <__udivmoddi4+0x158>
 800080c:	42ab      	cmp	r3, r5
 800080e:	d302      	bcc.n	8000816 <__udivmoddi4+0xce>
 8000810:	4282      	cmp	r2, r0
 8000812:	f200 80f8 	bhi.w	8000a06 <__udivmoddi4+0x2be>
 8000816:	1a84      	subs	r4, r0, r2
 8000818:	eb65 0203 	sbc.w	r2, r5, r3
 800081c:	2001      	movs	r0, #1
 800081e:	4617      	mov	r7, r2
 8000820:	2e00      	cmp	r6, #0
 8000822:	d0e2      	beq.n	80007ea <__udivmoddi4+0xa2>
 8000824:	e9c6 4700 	strd	r4, r7, [r6]
 8000828:	e7df      	b.n	80007ea <__udivmoddi4+0xa2>
 800082a:	b902      	cbnz	r2, 800082e <__udivmoddi4+0xe6>
 800082c:	deff      	udf	#255	; 0xff
 800082e:	fab2 f382 	clz	r3, r2
 8000832:	2b00      	cmp	r3, #0
 8000834:	f040 8090 	bne.w	8000958 <__udivmoddi4+0x210>
 8000838:	1a8a      	subs	r2, r1, r2
 800083a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800083e:	fa1f fe8c 	uxth.w	lr, ip
 8000842:	2101      	movs	r1, #1
 8000844:	fbb2 f5f7 	udiv	r5, r2, r7
 8000848:	fb07 2015 	mls	r0, r7, r5, r2
 800084c:	0c22      	lsrs	r2, r4, #16
 800084e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000852:	fb0e f005 	mul.w	r0, lr, r5
 8000856:	4290      	cmp	r0, r2
 8000858:	d908      	bls.n	800086c <__udivmoddi4+0x124>
 800085a:	eb1c 0202 	adds.w	r2, ip, r2
 800085e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000862:	d202      	bcs.n	800086a <__udivmoddi4+0x122>
 8000864:	4290      	cmp	r0, r2
 8000866:	f200 80cb 	bhi.w	8000a00 <__udivmoddi4+0x2b8>
 800086a:	4645      	mov	r5, r8
 800086c:	1a12      	subs	r2, r2, r0
 800086e:	b2a4      	uxth	r4, r4
 8000870:	fbb2 f0f7 	udiv	r0, r2, r7
 8000874:	fb07 2210 	mls	r2, r7, r0, r2
 8000878:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800087c:	fb0e fe00 	mul.w	lr, lr, r0
 8000880:	45a6      	cmp	lr, r4
 8000882:	d908      	bls.n	8000896 <__udivmoddi4+0x14e>
 8000884:	eb1c 0404 	adds.w	r4, ip, r4
 8000888:	f100 32ff 	add.w	r2, r0, #4294967295
 800088c:	d202      	bcs.n	8000894 <__udivmoddi4+0x14c>
 800088e:	45a6      	cmp	lr, r4
 8000890:	f200 80bb 	bhi.w	8000a0a <__udivmoddi4+0x2c2>
 8000894:	4610      	mov	r0, r2
 8000896:	eba4 040e 	sub.w	r4, r4, lr
 800089a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800089e:	e79f      	b.n	80007e0 <__udivmoddi4+0x98>
 80008a0:	f1c1 0720 	rsb	r7, r1, #32
 80008a4:	408b      	lsls	r3, r1
 80008a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80008aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80008ae:	fa05 f401 	lsl.w	r4, r5, r1
 80008b2:	fa20 f307 	lsr.w	r3, r0, r7
 80008b6:	40fd      	lsrs	r5, r7
 80008b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80008bc:	4323      	orrs	r3, r4
 80008be:	fbb5 f8f9 	udiv	r8, r5, r9
 80008c2:	fa1f fe8c 	uxth.w	lr, ip
 80008c6:	fb09 5518 	mls	r5, r9, r8, r5
 80008ca:	0c1c      	lsrs	r4, r3, #16
 80008cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80008d0:	fb08 f50e 	mul.w	r5, r8, lr
 80008d4:	42a5      	cmp	r5, r4
 80008d6:	fa02 f201 	lsl.w	r2, r2, r1
 80008da:	fa00 f001 	lsl.w	r0, r0, r1
 80008de:	d90b      	bls.n	80008f8 <__udivmoddi4+0x1b0>
 80008e0:	eb1c 0404 	adds.w	r4, ip, r4
 80008e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80008e8:	f080 8088 	bcs.w	80009fc <__udivmoddi4+0x2b4>
 80008ec:	42a5      	cmp	r5, r4
 80008ee:	f240 8085 	bls.w	80009fc <__udivmoddi4+0x2b4>
 80008f2:	f1a8 0802 	sub.w	r8, r8, #2
 80008f6:	4464      	add	r4, ip
 80008f8:	1b64      	subs	r4, r4, r5
 80008fa:	b29d      	uxth	r5, r3
 80008fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000900:	fb09 4413 	mls	r4, r9, r3, r4
 8000904:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000908:	fb03 fe0e 	mul.w	lr, r3, lr
 800090c:	45a6      	cmp	lr, r4
 800090e:	d908      	bls.n	8000922 <__udivmoddi4+0x1da>
 8000910:	eb1c 0404 	adds.w	r4, ip, r4
 8000914:	f103 35ff 	add.w	r5, r3, #4294967295
 8000918:	d26c      	bcs.n	80009f4 <__udivmoddi4+0x2ac>
 800091a:	45a6      	cmp	lr, r4
 800091c:	d96a      	bls.n	80009f4 <__udivmoddi4+0x2ac>
 800091e:	3b02      	subs	r3, #2
 8000920:	4464      	add	r4, ip
 8000922:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000926:	fba3 9502 	umull	r9, r5, r3, r2
 800092a:	eba4 040e 	sub.w	r4, r4, lr
 800092e:	42ac      	cmp	r4, r5
 8000930:	46c8      	mov	r8, r9
 8000932:	46ae      	mov	lr, r5
 8000934:	d356      	bcc.n	80009e4 <__udivmoddi4+0x29c>
 8000936:	d053      	beq.n	80009e0 <__udivmoddi4+0x298>
 8000938:	b156      	cbz	r6, 8000950 <__udivmoddi4+0x208>
 800093a:	ebb0 0208 	subs.w	r2, r0, r8
 800093e:	eb64 040e 	sbc.w	r4, r4, lr
 8000942:	fa04 f707 	lsl.w	r7, r4, r7
 8000946:	40ca      	lsrs	r2, r1
 8000948:	40cc      	lsrs	r4, r1
 800094a:	4317      	orrs	r7, r2
 800094c:	e9c6 7400 	strd	r7, r4, [r6]
 8000950:	4618      	mov	r0, r3
 8000952:	2100      	movs	r1, #0
 8000954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000958:	f1c3 0120 	rsb	r1, r3, #32
 800095c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000960:	fa20 f201 	lsr.w	r2, r0, r1
 8000964:	fa25 f101 	lsr.w	r1, r5, r1
 8000968:	409d      	lsls	r5, r3
 800096a:	432a      	orrs	r2, r5
 800096c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000970:	fa1f fe8c 	uxth.w	lr, ip
 8000974:	fbb1 f0f7 	udiv	r0, r1, r7
 8000978:	fb07 1510 	mls	r5, r7, r0, r1
 800097c:	0c11      	lsrs	r1, r2, #16
 800097e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000982:	fb00 f50e 	mul.w	r5, r0, lr
 8000986:	428d      	cmp	r5, r1
 8000988:	fa04 f403 	lsl.w	r4, r4, r3
 800098c:	d908      	bls.n	80009a0 <__udivmoddi4+0x258>
 800098e:	eb1c 0101 	adds.w	r1, ip, r1
 8000992:	f100 38ff 	add.w	r8, r0, #4294967295
 8000996:	d22f      	bcs.n	80009f8 <__udivmoddi4+0x2b0>
 8000998:	428d      	cmp	r5, r1
 800099a:	d92d      	bls.n	80009f8 <__udivmoddi4+0x2b0>
 800099c:	3802      	subs	r0, #2
 800099e:	4461      	add	r1, ip
 80009a0:	1b49      	subs	r1, r1, r5
 80009a2:	b292      	uxth	r2, r2
 80009a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80009a8:	fb07 1115 	mls	r1, r7, r5, r1
 80009ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80009b0:	fb05 f10e 	mul.w	r1, r5, lr
 80009b4:	4291      	cmp	r1, r2
 80009b6:	d908      	bls.n	80009ca <__udivmoddi4+0x282>
 80009b8:	eb1c 0202 	adds.w	r2, ip, r2
 80009bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80009c0:	d216      	bcs.n	80009f0 <__udivmoddi4+0x2a8>
 80009c2:	4291      	cmp	r1, r2
 80009c4:	d914      	bls.n	80009f0 <__udivmoddi4+0x2a8>
 80009c6:	3d02      	subs	r5, #2
 80009c8:	4462      	add	r2, ip
 80009ca:	1a52      	subs	r2, r2, r1
 80009cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80009d0:	e738      	b.n	8000844 <__udivmoddi4+0xfc>
 80009d2:	4631      	mov	r1, r6
 80009d4:	4630      	mov	r0, r6
 80009d6:	e708      	b.n	80007ea <__udivmoddi4+0xa2>
 80009d8:	4639      	mov	r1, r7
 80009da:	e6e6      	b.n	80007aa <__udivmoddi4+0x62>
 80009dc:	4610      	mov	r0, r2
 80009de:	e6fb      	b.n	80007d8 <__udivmoddi4+0x90>
 80009e0:	4548      	cmp	r0, r9
 80009e2:	d2a9      	bcs.n	8000938 <__udivmoddi4+0x1f0>
 80009e4:	ebb9 0802 	subs.w	r8, r9, r2
 80009e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80009ec:	3b01      	subs	r3, #1
 80009ee:	e7a3      	b.n	8000938 <__udivmoddi4+0x1f0>
 80009f0:	4645      	mov	r5, r8
 80009f2:	e7ea      	b.n	80009ca <__udivmoddi4+0x282>
 80009f4:	462b      	mov	r3, r5
 80009f6:	e794      	b.n	8000922 <__udivmoddi4+0x1da>
 80009f8:	4640      	mov	r0, r8
 80009fa:	e7d1      	b.n	80009a0 <__udivmoddi4+0x258>
 80009fc:	46d0      	mov	r8, sl
 80009fe:	e77b      	b.n	80008f8 <__udivmoddi4+0x1b0>
 8000a00:	3d02      	subs	r5, #2
 8000a02:	4462      	add	r2, ip
 8000a04:	e732      	b.n	800086c <__udivmoddi4+0x124>
 8000a06:	4608      	mov	r0, r1
 8000a08:	e70a      	b.n	8000820 <__udivmoddi4+0xd8>
 8000a0a:	4464      	add	r4, ip
 8000a0c:	3802      	subs	r0, #2
 8000a0e:	e742      	b.n	8000896 <__udivmoddi4+0x14e>

08000a10 <__aeabi_idiv0>:
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_CRC_Init+0x20>)
 8000a1a:	4a07      	ldr	r2, [pc, #28]	; (8000a38 <MX_CRC_Init+0x24>)
 8000a1c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_CRC_Init+0x20>)
 8000a20:	f004 f8a8 	bl	8004b74 <HAL_CRC_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000a2a:	f001 fcd5 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20002cf8 	.word	0x20002cf8
 8000a38:	40023000 	.word	0x40023000

08000a3c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a0b      	ldr	r2, [pc, #44]	; (8000a78 <HAL_CRC_MspInit+0x3c>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d10d      	bne.n	8000a6a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <HAL_CRC_MspInit+0x40>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a09      	ldr	r2, [pc, #36]	; (8000a7c <HAL_CRC_MspInit+0x40>)
 8000a58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <HAL_CRC_MspInit+0x40>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	3714      	adds	r7, #20
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	40023000 	.word	0x40023000
 8000a7c:	40023800 	.word	0x40023800

08000a80 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000a84:	4b15      	ldr	r3, [pc, #84]	; (8000adc <MX_DMA2D_Init+0x5c>)
 8000a86:	4a16      	ldr	r2, [pc, #88]	; (8000ae0 <MX_DMA2D_Init+0x60>)
 8000a88:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000a8a:	4b14      	ldr	r3, [pc, #80]	; (8000adc <MX_DMA2D_Init+0x5c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <MX_DMA2D_Init+0x5c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_DMA2D_Init+0x5c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <MX_DMA2D_Init+0x5c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <MX_DMA2D_Init+0x5c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <MX_DMA2D_Init+0x5c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <MX_DMA2D_Init+0x5c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000ab4:	4809      	ldr	r0, [pc, #36]	; (8000adc <MX_DMA2D_Init+0x5c>)
 8000ab6:	f004 fa37 	bl	8004f28 <HAL_DMA2D_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000ac0:	f001 fc8a 	bl	80023d8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_DMA2D_Init+0x5c>)
 8000ac8:	f004 fc9c 	bl	8005404 <HAL_DMA2D_ConfigLayer>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000ad2:	f001 fc81 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20002d00 	.word	0x20002d00
 8000ae0:	4002b000 	.word	0x4002b000

08000ae4 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a0e      	ldr	r2, [pc, #56]	; (8000b2c <HAL_DMA2D_MspInit+0x48>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d115      	bne.n	8000b22 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <HAL_DMA2D_MspInit+0x4c>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a0c      	ldr	r2, [pc, #48]	; (8000b30 <HAL_DMA2D_MspInit+0x4c>)
 8000b00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <HAL_DMA2D_MspInit+0x4c>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2105      	movs	r1, #5
 8000b16:	205a      	movs	r0, #90	; 0x5a
 8000b18:	f004 f802 	bl	8004b20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000b1c:	205a      	movs	r0, #90	; 0x5a
 8000b1e:	f004 f81b 	bl	8004b58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000b22:	bf00      	nop
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	4002b000 	.word	0x4002b000
 8000b30:	40023800 	.word	0x40023800

08000b34 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b088      	sub	sp, #32
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
 8000b48:	615a      	str	r2, [r3, #20]
 8000b4a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000b4c:	4b1f      	ldr	r3, [pc, #124]	; (8000bcc <MX_FMC_Init+0x98>)
 8000b4e:	4a20      	ldr	r2, [pc, #128]	; (8000bd0 <MX_FMC_Init+0x9c>)
 8000b50:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000b52:	4b1e      	ldr	r3, [pc, #120]	; (8000bcc <MX_FMC_Init+0x98>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b58:	4b1c      	ldr	r3, [pc, #112]	; (8000bcc <MX_FMC_Init+0x98>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b5e:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <MX_FMC_Init+0x98>)
 8000b60:	2204      	movs	r2, #4
 8000b62:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b64:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <MX_FMC_Init+0x98>)
 8000b66:	2210      	movs	r2, #16
 8000b68:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b6a:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <MX_FMC_Init+0x98>)
 8000b6c:	2240      	movs	r2, #64	; 0x40
 8000b6e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000b70:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <MX_FMC_Init+0x98>)
 8000b72:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000b76:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000b78:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <MX_FMC_Init+0x98>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000b7e:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <MX_FMC_Init+0x98>)
 8000b80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b84:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000b86:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <MX_FMC_Init+0x98>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <MX_FMC_Init+0x98>)
 8000b8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b92:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000b94:	2302      	movs	r3, #2
 8000b96:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000b98:	2307      	movs	r3, #7
 8000b9a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000ba0:	2307      	movs	r3, #7
 8000ba2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000bac:	2302      	movs	r3, #2
 8000bae:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4805      	ldr	r0, [pc, #20]	; (8000bcc <MX_FMC_Init+0x98>)
 8000bb6:	f009 fd31 	bl	800a61c <HAL_SDRAM_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000bc0:	f001 fc0a 	bl	80023d8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000bc4:	bf00      	nop
 8000bc6:	3720      	adds	r7, #32
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20002d40 	.word	0x20002d40
 8000bd0:	a0000140 	.word	0xa0000140

08000bd4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000be8:	4b3b      	ldr	r3, [pc, #236]	; (8000cd8 <HAL_FMC_MspInit+0x104>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d16f      	bne.n	8000cd0 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000bf0:	4b39      	ldr	r3, [pc, #228]	; (8000cd8 <HAL_FMC_MspInit+0x104>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	4b38      	ldr	r3, [pc, #224]	; (8000cdc <HAL_FMC_MspInit+0x108>)
 8000bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bfe:	4a37      	ldr	r2, [pc, #220]	; (8000cdc <HAL_FMC_MspInit+0x108>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6393      	str	r3, [r2, #56]	; 0x38
 8000c06:	4b35      	ldr	r3, [pc, #212]	; (8000cdc <HAL_FMC_MspInit+0x108>)
 8000c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000c12:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000c16:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c20:	2303      	movs	r3, #3
 8000c22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c24:	230c      	movs	r3, #12
 8000c26:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	482c      	ldr	r0, [pc, #176]	; (8000ce0 <HAL_FMC_MspInit+0x10c>)
 8000c2e:	f004 fd17 	bl	8005660 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000c32:	2301      	movs	r3, #1
 8000c34:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c42:	230c      	movs	r3, #12
 8000c44:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4826      	ldr	r0, [pc, #152]	; (8000ce4 <HAL_FMC_MspInit+0x110>)
 8000c4c:	f004 fd08 	bl	8005660 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000c50:	f248 1333 	movw	r3, #33075	; 0x8133
 8000c54:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c62:	230c      	movs	r3, #12
 8000c64:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	4619      	mov	r1, r3
 8000c6a:	481f      	ldr	r0, [pc, #124]	; (8000ce8 <HAL_FMC_MspInit+0x114>)
 8000c6c:	f004 fcf8 	bl	8005660 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000c70:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000c74:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c82:	230c      	movs	r3, #12
 8000c84:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4818      	ldr	r0, [pc, #96]	; (8000cec <HAL_FMC_MspInit+0x118>)
 8000c8c:	f004 fce8 	bl	8005660 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000c90:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000c94:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c96:	2302      	movs	r3, #2
 8000c98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ca2:	230c      	movs	r3, #12
 8000ca4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4811      	ldr	r0, [pc, #68]	; (8000cf0 <HAL_FMC_MspInit+0x11c>)
 8000cac:	f004 fcd8 	bl	8005660 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000cb0:	2360      	movs	r3, #96	; 0x60
 8000cb2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cc0:	230c      	movs	r3, #12
 8000cc2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	480a      	ldr	r0, [pc, #40]	; (8000cf4 <HAL_FMC_MspInit+0x120>)
 8000cca:	f004 fcc9 	bl	8005660 <HAL_GPIO_Init>
 8000cce:	e000      	b.n	8000cd2 <HAL_FMC_MspInit+0xfe>
    return;
 8000cd0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000cd2:	3718      	adds	r7, #24
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20002d74 	.word	0x20002d74
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40021400 	.word	0x40021400
 8000ce4:	40020800 	.word	0x40020800
 8000ce8:	40021800 	.word	0x40021800
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	40020c00 	.word	0x40020c00
 8000cf4:	40020400 	.word	0x40020400

08000cf8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000d00:	f7ff ff68 	bl	8000bd4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000d04:	bf00      	nop
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08e      	sub	sp, #56	; 0x38
 8000d10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
 8000d20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	623b      	str	r3, [r7, #32]
 8000d26:	4b7b      	ldr	r3, [pc, #492]	; (8000f14 <MX_GPIO_Init+0x208>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a7a      	ldr	r2, [pc, #488]	; (8000f14 <MX_GPIO_Init+0x208>)
 8000d2c:	f043 0304 	orr.w	r3, r3, #4
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b78      	ldr	r3, [pc, #480]	; (8000f14 <MX_GPIO_Init+0x208>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0304 	and.w	r3, r3, #4
 8000d3a:	623b      	str	r3, [r7, #32]
 8000d3c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
 8000d42:	4b74      	ldr	r3, [pc, #464]	; (8000f14 <MX_GPIO_Init+0x208>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a73      	ldr	r2, [pc, #460]	; (8000f14 <MX_GPIO_Init+0x208>)
 8000d48:	f043 0320 	orr.w	r3, r3, #32
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b71      	ldr	r3, [pc, #452]	; (8000f14 <MX_GPIO_Init+0x208>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0320 	and.w	r3, r3, #32
 8000d56:	61fb      	str	r3, [r7, #28]
 8000d58:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61bb      	str	r3, [r7, #24]
 8000d5e:	4b6d      	ldr	r3, [pc, #436]	; (8000f14 <MX_GPIO_Init+0x208>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a6c      	ldr	r2, [pc, #432]	; (8000f14 <MX_GPIO_Init+0x208>)
 8000d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b6a      	ldr	r3, [pc, #424]	; (8000f14 <MX_GPIO_Init+0x208>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d72:	61bb      	str	r3, [r7, #24]
 8000d74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
 8000d7a:	4b66      	ldr	r3, [pc, #408]	; (8000f14 <MX_GPIO_Init+0x208>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a65      	ldr	r2, [pc, #404]	; (8000f14 <MX_GPIO_Init+0x208>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b63      	ldr	r3, [pc, #396]	; (8000f14 <MX_GPIO_Init+0x208>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	4b5f      	ldr	r3, [pc, #380]	; (8000f14 <MX_GPIO_Init+0x208>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a5e      	ldr	r2, [pc, #376]	; (8000f14 <MX_GPIO_Init+0x208>)
 8000d9c:	f043 0302 	orr.w	r3, r3, #2
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b5c      	ldr	r3, [pc, #368]	; (8000f14 <MX_GPIO_Init+0x208>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	4b58      	ldr	r3, [pc, #352]	; (8000f14 <MX_GPIO_Init+0x208>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a57      	ldr	r2, [pc, #348]	; (8000f14 <MX_GPIO_Init+0x208>)
 8000db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b55      	ldr	r3, [pc, #340]	; (8000f14 <MX_GPIO_Init+0x208>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	4b51      	ldr	r3, [pc, #324]	; (8000f14 <MX_GPIO_Init+0x208>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a50      	ldr	r2, [pc, #320]	; (8000f14 <MX_GPIO_Init+0x208>)
 8000dd4:	f043 0310 	orr.w	r3, r3, #16
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b4e      	ldr	r3, [pc, #312]	; (8000f14 <MX_GPIO_Init+0x208>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0310 	and.w	r3, r3, #16
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	4b4a      	ldr	r3, [pc, #296]	; (8000f14 <MX_GPIO_Init+0x208>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a49      	ldr	r2, [pc, #292]	; (8000f14 <MX_GPIO_Init+0x208>)
 8000df0:	f043 0308 	orr.w	r3, r3, #8
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b47      	ldr	r3, [pc, #284]	; (8000f14 <MX_GPIO_Init+0x208>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0308 	and.w	r3, r3, #8
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2116      	movs	r1, #22
 8000e06:	4844      	ldr	r0, [pc, #272]	; (8000f18 <MX_GPIO_Init+0x20c>)
 8000e08:	f004 fee2 	bl	8005bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2180      	movs	r1, #128	; 0x80
 8000e10:	4842      	ldr	r0, [pc, #264]	; (8000f1c <MX_GPIO_Init+0x210>)
 8000e12:	f004 fedd 	bl	8005bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000e1c:	4840      	ldr	r0, [pc, #256]	; (8000f20 <MX_GPIO_Init+0x214>)
 8000e1e:	f004 fed7 	bl	8005bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000e28:	483e      	ldr	r0, [pc, #248]	; (8000f24 <MX_GPIO_Init+0x218>)
 8000e2a:	f004 fed1 	bl	8005bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000e2e:	2316      	movs	r3, #22
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e32:	2301      	movs	r3, #1
 8000e34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e42:	4619      	mov	r1, r3
 8000e44:	4834      	ldr	r0, [pc, #208]	; (8000f18 <MX_GPIO_Init+0x20c>)
 8000e46:	f004 fc0b 	bl	8005660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000e4a:	f248 0307 	movw	r3, #32775	; 0x8007
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e50:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5e:	4619      	mov	r1, r3
 8000e60:	482e      	ldr	r0, [pc, #184]	; (8000f1c <MX_GPIO_Init+0x210>)
 8000e62:	f004 fbfd 	bl	8005660 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000e66:	2380      	movs	r3, #128	; 0x80
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4827      	ldr	r0, [pc, #156]	; (8000f1c <MX_GPIO_Init+0x210>)
 8000e7e:	f004 fbef 	bl	8005660 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000e82:	2320      	movs	r3, #32
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e86:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e94:	4619      	mov	r1, r3
 8000e96:	4820      	ldr	r0, [pc, #128]	; (8000f18 <MX_GPIO_Init+0x20c>)
 8000e98:	f004 fbe2 	bl	8005660 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e9c:	2304      	movs	r3, #4
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000ea8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eac:	4619      	mov	r1, r3
 8000eae:	481e      	ldr	r0, [pc, #120]	; (8000f28 <MX_GPIO_Init+0x21c>)
 8000eb0:	f004 fbd6 	bl	8005660 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000eb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000ec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4815      	ldr	r0, [pc, #84]	; (8000f20 <MX_GPIO_Init+0x214>)
 8000eca:	f004 fbc9 	bl	8005660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000ece:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2300      	movs	r3, #0
 8000ede:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	480e      	ldr	r0, [pc, #56]	; (8000f20 <MX_GPIO_Init+0x214>)
 8000ee8:	f004 fbba 	bl	8005660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000eec:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2300      	movs	r3, #0
 8000efc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f02:	4619      	mov	r1, r3
 8000f04:	4807      	ldr	r0, [pc, #28]	; (8000f24 <MX_GPIO_Init+0x218>)
 8000f06:	f004 fbab 	bl	8005660 <HAL_GPIO_Init>

}
 8000f0a:	bf00      	nop
 8000f0c:	3738      	adds	r7, #56	; 0x38
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40020800 	.word	0x40020800
 8000f1c:	40020000 	.word	0x40020000
 8000f20:	40020c00 	.word	0x40020c00
 8000f24:	40021800 	.word	0x40021800
 8000f28:	40020400 	.word	0x40020400

08000f2c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000f30:	4b1b      	ldr	r3, [pc, #108]	; (8000fa0 <MX_I2C3_Init+0x74>)
 8000f32:	4a1c      	ldr	r2, [pc, #112]	; (8000fa4 <MX_I2C3_Init+0x78>)
 8000f34:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000f36:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <MX_I2C3_Init+0x74>)
 8000f38:	4a1b      	ldr	r2, [pc, #108]	; (8000fa8 <MX_I2C3_Init+0x7c>)
 8000f3a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f3c:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <MX_I2C3_Init+0x74>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000f42:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <MX_I2C3_Init+0x74>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f48:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <MX_I2C3_Init+0x74>)
 8000f4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f4e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f50:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <MX_I2C3_Init+0x74>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000f56:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <MX_I2C3_Init+0x74>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f5c:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <MX_I2C3_Init+0x74>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f62:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <MX_I2C3_Init+0x74>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000f68:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <MX_I2C3_Init+0x74>)
 8000f6a:	f006 feb7 	bl	8007cdc <HAL_I2C_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000f74:	f001 fa30 	bl	80023d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4809      	ldr	r0, [pc, #36]	; (8000fa0 <MX_I2C3_Init+0x74>)
 8000f7c:	f008 f890 	bl	80090a0 <HAL_I2CEx_ConfigAnalogFilter>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000f86:	f001 fa27 	bl	80023d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4804      	ldr	r0, [pc, #16]	; (8000fa0 <MX_I2C3_Init+0x74>)
 8000f8e:	f008 f8c3 	bl	8009118 <HAL_I2CEx_ConfigDigitalFilter>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000f98:	f001 fa1e 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20002d78 	.word	0x20002d78
 8000fa4:	40005c00 	.word	0x40005c00
 8000fa8:	000186a0 	.word	0x000186a0

08000fac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	; 0x28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a29      	ldr	r2, [pc, #164]	; (8001070 <HAL_I2C_MspInit+0xc4>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d14b      	bne.n	8001066 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	4b28      	ldr	r3, [pc, #160]	; (8001074 <HAL_I2C_MspInit+0xc8>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a27      	ldr	r2, [pc, #156]	; (8001074 <HAL_I2C_MspInit+0xc8>)
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b25      	ldr	r3, [pc, #148]	; (8001074 <HAL_I2C_MspInit+0xc8>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	4b21      	ldr	r3, [pc, #132]	; (8001074 <HAL_I2C_MspInit+0xc8>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a20      	ldr	r2, [pc, #128]	; (8001074 <HAL_I2C_MspInit+0xc8>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b1e      	ldr	r3, [pc, #120]	; (8001074 <HAL_I2C_MspInit+0xc8>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001006:	f44f 7300 	mov.w	r3, #512	; 0x200
 800100a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800100c:	2312      	movs	r3, #18
 800100e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001010:	2301      	movs	r3, #1
 8001012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001018:	2304      	movs	r3, #4
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	4619      	mov	r1, r3
 8001022:	4815      	ldr	r0, [pc, #84]	; (8001078 <HAL_I2C_MspInit+0xcc>)
 8001024:	f004 fb1c 	bl	8005660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001028:	f44f 7380 	mov.w	r3, #256	; 0x100
 800102c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800102e:	2312      	movs	r3, #18
 8001030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001032:	2301      	movs	r3, #1
 8001034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800103a:	2304      	movs	r3, #4
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	480d      	ldr	r0, [pc, #52]	; (800107c <HAL_I2C_MspInit+0xd0>)
 8001046:	f004 fb0b 	bl	8005660 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <HAL_I2C_MspInit+0xc8>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	4a08      	ldr	r2, [pc, #32]	; (8001074 <HAL_I2C_MspInit+0xc8>)
 8001054:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001058:	6413      	str	r3, [r2, #64]	; 0x40
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_I2C_MspInit+0xc8>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001066:	bf00      	nop
 8001068:	3728      	adds	r7, #40	; 0x28
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40005c00 	.word	0x40005c00
 8001074:	40023800 	.word	0x40023800
 8001078:	40020800 	.word	0x40020800
 800107c:	40020000 	.word	0x40020000

08001080 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a0b      	ldr	r2, [pc, #44]	; (80010bc <HAL_I2C_MspDeInit+0x3c>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d10f      	bne.n	80010b2 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <HAL_I2C_MspDeInit+0x40>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <HAL_I2C_MspDeInit+0x40>)
 8001098:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800109c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 800109e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010a2:	4808      	ldr	r0, [pc, #32]	; (80010c4 <HAL_I2C_MspDeInit+0x44>)
 80010a4:	f004 fc88 	bl	80059b8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 80010a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ac:	4806      	ldr	r0, [pc, #24]	; (80010c8 <HAL_I2C_MspDeInit+0x48>)
 80010ae:	f004 fc83 	bl	80059b8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40005c00 	.word	0x40005c00
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40020800 	.word	0x40020800
 80010c8:	40020000 	.word	0x40020000

080010cc <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b09a      	sub	sp, #104	; 0x68
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80010d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010d6:	2234      	movs	r2, #52	; 0x34
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f00e f9e8 	bl	800f4b0 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80010e0:	463b      	mov	r3, r7
 80010e2:	2234      	movs	r2, #52	; 0x34
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f00e f9e2 	bl	800f4b0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */
  ili9341_Init();
 80010ec:	f001 fcfd 	bl	8002aea <ili9341_Init>
  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80010f0:	4b51      	ldr	r3, [pc, #324]	; (8001238 <MX_LTDC_Init+0x16c>)
 80010f2:	4a52      	ldr	r2, [pc, #328]	; (800123c <MX_LTDC_Init+0x170>)
 80010f4:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80010f6:	4b50      	ldr	r3, [pc, #320]	; (8001238 <MX_LTDC_Init+0x16c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80010fc:	4b4e      	ldr	r3, [pc, #312]	; (8001238 <MX_LTDC_Init+0x16c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001102:	4b4d      	ldr	r3, [pc, #308]	; (8001238 <MX_LTDC_Init+0x16c>)
 8001104:	2200      	movs	r2, #0
 8001106:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001108:	4b4b      	ldr	r3, [pc, #300]	; (8001238 <MX_LTDC_Init+0x16c>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 800110e:	4b4a      	ldr	r3, [pc, #296]	; (8001238 <MX_LTDC_Init+0x16c>)
 8001110:	2209      	movs	r2, #9
 8001112:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8001114:	4b48      	ldr	r3, [pc, #288]	; (8001238 <MX_LTDC_Init+0x16c>)
 8001116:	2201      	movs	r2, #1
 8001118:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 800111a:	4b47      	ldr	r3, [pc, #284]	; (8001238 <MX_LTDC_Init+0x16c>)
 800111c:	221d      	movs	r2, #29
 800111e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8001120:	4b45      	ldr	r3, [pc, #276]	; (8001238 <MX_LTDC_Init+0x16c>)
 8001122:	2203      	movs	r2, #3
 8001124:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8001126:	4b44      	ldr	r3, [pc, #272]	; (8001238 <MX_LTDC_Init+0x16c>)
 8001128:	f240 120d 	movw	r2, #269	; 0x10d
 800112c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 800112e:	4b42      	ldr	r3, [pc, #264]	; (8001238 <MX_LTDC_Init+0x16c>)
 8001130:	f240 1243 	movw	r2, #323	; 0x143
 8001134:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8001136:	4b40      	ldr	r3, [pc, #256]	; (8001238 <MX_LTDC_Init+0x16c>)
 8001138:	f240 1217 	movw	r2, #279	; 0x117
 800113c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 800113e:	4b3e      	ldr	r3, [pc, #248]	; (8001238 <MX_LTDC_Init+0x16c>)
 8001140:	f240 1247 	movw	r2, #327	; 0x147
 8001144:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001146:	4b3c      	ldr	r3, [pc, #240]	; (8001238 <MX_LTDC_Init+0x16c>)
 8001148:	2200      	movs	r2, #0
 800114a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800114e:	4b3a      	ldr	r3, [pc, #232]	; (8001238 <MX_LTDC_Init+0x16c>)
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001156:	4b38      	ldr	r3, [pc, #224]	; (8001238 <MX_LTDC_Init+0x16c>)
 8001158:	2200      	movs	r2, #0
 800115a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800115e:	4836      	ldr	r0, [pc, #216]	; (8001238 <MX_LTDC_Init+0x16c>)
 8001160:	f008 f81a 	bl	8009198 <HAL_LTDC_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_LTDC_Init+0xa2>
  {
    Error_Handler();
 800116a:	f001 f935 	bl	80023d8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 240;
 8001172:	23f0      	movs	r3, #240	; 0xf0
 8001174:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 320;
 800117a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800117e:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001180:	2302      	movs	r3, #2
 8001182:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8001184:	23ff      	movs	r3, #255	; 0xff
 8001186:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800118c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001190:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001192:	2307      	movs	r3, #7
 8001194:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = LCD_FRAME_BUFFER;
 8001196:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800119a:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 240;
 800119c:	23f0      	movs	r3, #240	; 0xf0
 800119e:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 320;
 80011a0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80011a4:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80011b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011bc:	2200      	movs	r2, #0
 80011be:	4619      	mov	r1, r3
 80011c0:	481d      	ldr	r0, [pc, #116]	; (8001238 <MX_LTDC_Init+0x16c>)
 80011c2:	f008 f9a1 	bl	8009508 <HAL_LTDC_ConfigLayer>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 80011cc:	f001 f904 	bl	80023d8 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 240;
 80011d4:	23f0      	movs	r3, #240	; 0xf0
 80011d6:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 320;
 80011dc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80011e0:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80011e2:	2302      	movs	r3, #2
 80011e4:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 200;
 80011e6:	23c8      	movs	r3, #200	; 0xc8
 80011e8:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80011ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011f2:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80011f4:	2307      	movs	r3, #7
 80011f6:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = LCD_FRAME_BUFFER;
 80011f8:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 240;
 80011fe:	23f0      	movs	r3, #240	; 0xf0
 8001200:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 320;
 8001202:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001206:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800121a:	463b      	mov	r3, r7
 800121c:	2201      	movs	r2, #1
 800121e:	4619      	mov	r1, r3
 8001220:	4805      	ldr	r0, [pc, #20]	; (8001238 <MX_LTDC_Init+0x16c>)
 8001222:	f008 f971 	bl	8009508 <HAL_LTDC_ConfigLayer>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_LTDC_Init+0x164>
  {
    Error_Handler();
 800122c:	f001 f8d4 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	3768      	adds	r7, #104	; 0x68
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20002dcc 	.word	0x20002dcc
 800123c:	40016800 	.word	0x40016800

08001240 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b09a      	sub	sp, #104	; 0x68
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125c:	2230      	movs	r2, #48	; 0x30
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f00e f925 	bl	800f4b0 <memset>
  if(ltdcHandle->Instance==LTDC)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a89      	ldr	r2, [pc, #548]	; (8001490 <HAL_LTDC_MspInit+0x250>)
 800126c:	4293      	cmp	r3, r2
 800126e:	f040 810b 	bne.w	8001488 <HAL_LTDC_MspInit+0x248>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001272:	2308      	movs	r3, #8
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 8001276:	2360      	movs	r3, #96	; 0x60
 8001278:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800127a:	2304      	movs	r3, #4
 800127c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800127e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001282:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001288:	4618      	mov	r0, r3
 800128a:	f009 f807 	bl	800a29c <HAL_RCCEx_PeriphCLKConfig>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8001294:	f001 f8a0 	bl	80023d8 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001298:	2300      	movs	r3, #0
 800129a:	623b      	str	r3, [r7, #32]
 800129c:	4b7d      	ldr	r3, [pc, #500]	; (8001494 <HAL_LTDC_MspInit+0x254>)
 800129e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a0:	4a7c      	ldr	r2, [pc, #496]	; (8001494 <HAL_LTDC_MspInit+0x254>)
 80012a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012a6:	6453      	str	r3, [r2, #68]	; 0x44
 80012a8:	4b7a      	ldr	r3, [pc, #488]	; (8001494 <HAL_LTDC_MspInit+0x254>)
 80012aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012b0:	623b      	str	r3, [r7, #32]
 80012b2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
 80012b8:	4b76      	ldr	r3, [pc, #472]	; (8001494 <HAL_LTDC_MspInit+0x254>)
 80012ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012bc:	4a75      	ldr	r2, [pc, #468]	; (8001494 <HAL_LTDC_MspInit+0x254>)
 80012be:	f043 0320 	orr.w	r3, r3, #32
 80012c2:	6313      	str	r3, [r2, #48]	; 0x30
 80012c4:	4b73      	ldr	r3, [pc, #460]	; (8001494 <HAL_LTDC_MspInit+0x254>)
 80012c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c8:	f003 0320 	and.w	r3, r3, #32
 80012cc:	61fb      	str	r3, [r7, #28]
 80012ce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d0:	2300      	movs	r3, #0
 80012d2:	61bb      	str	r3, [r7, #24]
 80012d4:	4b6f      	ldr	r3, [pc, #444]	; (8001494 <HAL_LTDC_MspInit+0x254>)
 80012d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d8:	4a6e      	ldr	r2, [pc, #440]	; (8001494 <HAL_LTDC_MspInit+0x254>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	6313      	str	r3, [r2, #48]	; 0x30
 80012e0:	4b6c      	ldr	r3, [pc, #432]	; (8001494 <HAL_LTDC_MspInit+0x254>)
 80012e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	61bb      	str	r3, [r7, #24]
 80012ea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	4b68      	ldr	r3, [pc, #416]	; (8001494 <HAL_LTDC_MspInit+0x254>)
 80012f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f4:	4a67      	ldr	r2, [pc, #412]	; (8001494 <HAL_LTDC_MspInit+0x254>)
 80012f6:	f043 0302 	orr.w	r3, r3, #2
 80012fa:	6313      	str	r3, [r2, #48]	; 0x30
 80012fc:	4b65      	ldr	r3, [pc, #404]	; (8001494 <HAL_LTDC_MspInit+0x254>)
 80012fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	4b61      	ldr	r3, [pc, #388]	; (8001494 <HAL_LTDC_MspInit+0x254>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001310:	4a60      	ldr	r2, [pc, #384]	; (8001494 <HAL_LTDC_MspInit+0x254>)
 8001312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001316:	6313      	str	r3, [r2, #48]	; 0x30
 8001318:	4b5e      	ldr	r3, [pc, #376]	; (8001494 <HAL_LTDC_MspInit+0x254>)
 800131a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	4b5a      	ldr	r3, [pc, #360]	; (8001494 <HAL_LTDC_MspInit+0x254>)
 800132a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132c:	4a59      	ldr	r2, [pc, #356]	; (8001494 <HAL_LTDC_MspInit+0x254>)
 800132e:	f043 0304 	orr.w	r3, r3, #4
 8001332:	6313      	str	r3, [r2, #48]	; 0x30
 8001334:	4b57      	ldr	r3, [pc, #348]	; (8001494 <HAL_LTDC_MspInit+0x254>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001338:	f003 0304 	and.w	r3, r3, #4
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001340:	2300      	movs	r3, #0
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	4b53      	ldr	r3, [pc, #332]	; (8001494 <HAL_LTDC_MspInit+0x254>)
 8001346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001348:	4a52      	ldr	r2, [pc, #328]	; (8001494 <HAL_LTDC_MspInit+0x254>)
 800134a:	f043 0308 	orr.w	r3, r3, #8
 800134e:	6313      	str	r3, [r2, #48]	; 0x30
 8001350:	4b50      	ldr	r3, [pc, #320]	; (8001494 <HAL_LTDC_MspInit+0x254>)
 8001352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001354:	f003 0308 	and.w	r3, r3, #8
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800135c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001360:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2300      	movs	r3, #0
 800136c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800136e:	230e      	movs	r3, #14
 8001370:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001372:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001376:	4619      	mov	r1, r3
 8001378:	4847      	ldr	r0, [pc, #284]	; (8001498 <HAL_LTDC_MspInit+0x258>)
 800137a:	f004 f971 	bl	8005660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800137e:	f641 0358 	movw	r3, #6232	; 0x1858
 8001382:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001384:	2302      	movs	r3, #2
 8001386:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138c:	2300      	movs	r3, #0
 800138e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001390:	230e      	movs	r3, #14
 8001392:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001394:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001398:	4619      	mov	r1, r3
 800139a:	4840      	ldr	r0, [pc, #256]	; (800149c <HAL_LTDC_MspInit+0x25c>)
 800139c:	f004 f960 	bl	8005660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80013a0:	2303      	movs	r3, #3
 80013a2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a4:	2302      	movs	r3, #2
 80013a6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	2300      	movs	r3, #0
 80013ae:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80013b0:	2309      	movs	r3, #9
 80013b2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013b8:	4619      	mov	r1, r3
 80013ba:	4839      	ldr	r0, [pc, #228]	; (80014a0 <HAL_LTDC_MspInit+0x260>)
 80013bc:	f004 f950 	bl	8005660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80013c0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80013c4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013d2:	230e      	movs	r3, #14
 80013d4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013da:	4619      	mov	r1, r3
 80013dc:	4830      	ldr	r0, [pc, #192]	; (80014a0 <HAL_LTDC_MspInit+0x260>)
 80013de:	f004 f93f 	bl	8005660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80013e2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80013e6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	2302      	movs	r3, #2
 80013ea:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f0:	2300      	movs	r3, #0
 80013f2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013f4:	230e      	movs	r3, #14
 80013f6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013fc:	4619      	mov	r1, r3
 80013fe:	4829      	ldr	r0, [pc, #164]	; (80014a4 <HAL_LTDC_MspInit+0x264>)
 8001400:	f004 f92e 	bl	8005660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001404:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001408:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140a:	2302      	movs	r3, #2
 800140c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001412:	2300      	movs	r3, #0
 8001414:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001416:	230e      	movs	r3, #14
 8001418:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800141e:	4619      	mov	r1, r3
 8001420:	4821      	ldr	r0, [pc, #132]	; (80014a8 <HAL_LTDC_MspInit+0x268>)
 8001422:	f004 f91d 	bl	8005660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001426:	2348      	movs	r3, #72	; 0x48
 8001428:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2300      	movs	r3, #0
 8001434:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001436:	230e      	movs	r3, #14
 8001438:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800143a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800143e:	4619      	mov	r1, r3
 8001440:	481a      	ldr	r0, [pc, #104]	; (80014ac <HAL_LTDC_MspInit+0x26c>)
 8001442:	f004 f90d 	bl	8005660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001446:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800144a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	2302      	movs	r3, #2
 800144e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001454:	2300      	movs	r3, #0
 8001456:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001458:	2309      	movs	r3, #9
 800145a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800145c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001460:	4619      	mov	r1, r3
 8001462:	4810      	ldr	r0, [pc, #64]	; (80014a4 <HAL_LTDC_MspInit+0x264>)
 8001464:	f004 f8fc 	bl	8005660 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001468:	2200      	movs	r2, #0
 800146a:	2105      	movs	r1, #5
 800146c:	2058      	movs	r0, #88	; 0x58
 800146e:	f003 fb57 	bl	8004b20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001472:	2058      	movs	r0, #88	; 0x58
 8001474:	f003 fb70 	bl	8004b58 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 8001478:	2200      	movs	r2, #0
 800147a:	2100      	movs	r1, #0
 800147c:	2059      	movs	r0, #89	; 0x59
 800147e:	f003 fb4f 	bl	8004b20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 8001482:	2059      	movs	r0, #89	; 0x59
 8001484:	f003 fb68 	bl	8004b58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001488:	bf00      	nop
 800148a:	3768      	adds	r7, #104	; 0x68
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40016800 	.word	0x40016800
 8001494:	40023800 	.word	0x40023800
 8001498:	40021400 	.word	0x40021400
 800149c:	40020000 	.word	0x40020000
 80014a0:	40020400 	.word	0x40020400
 80014a4:	40021800 	.word	0x40021800
 80014a8:	40020800 	.word	0x40020800
 80014ac:	40020c00 	.word	0x40020c00

080014b0 <adxl_write>:
int ghost3x=8, ghost3y=1; //pozycja ducha 3
int ghost4x=8, ghost4y=8; //pozycja ducha 4

//akcelerometr

void adxl_write(uint8_t reg, uint8_t value){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af02      	add	r7, sp, #8
 80014b6:	4603      	mov	r3, r0
 80014b8:	460a      	mov	r2, r1
 80014ba:	71fb      	strb	r3, [r7, #7]
 80014bc:	4613      	mov	r3, r2
 80014be:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = reg;
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 80014c4:	79bb      	ldrb	r3, [r7, #6]
 80014c6:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit (&hi2c3, adxl_address, data, 2, 10);
 80014c8:	f107 020c 	add.w	r2, r7, #12
 80014cc:	230a      	movs	r3, #10
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	2302      	movs	r3, #2
 80014d2:	21a6      	movs	r1, #166	; 0xa6
 80014d4:	4803      	ldr	r0, [pc, #12]	; (80014e4 <adxl_write+0x34>)
 80014d6:	f006 fd75 	bl	8007fc4 <HAL_I2C_Master_Transmit>
}
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20002d78 	.word	0x20002d78

080014e8 <adxl_read>:

void adxl_read(uint8_t reg, uint8_t){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af04      	add	r7, sp, #16
 80014ee:	4603      	mov	r3, r0
 80014f0:	460a      	mov	r2, r1
 80014f2:	71fb      	strb	r3, [r7, #7]
 80014f4:	4613      	mov	r3, r2
 80014f6:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read ( &hi2c3, adxl_address, reg, 1, &data_rec, 6, 100);
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	2364      	movs	r3, #100	; 0x64
 80014fe:	9302      	str	r3, [sp, #8]
 8001500:	2306      	movs	r3, #6
 8001502:	9301      	str	r3, [sp, #4]
 8001504:	4b10      	ldr	r3, [pc, #64]	; (8001548 <adxl_read+0x60>)
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	2301      	movs	r3, #1
 800150a:	21a6      	movs	r1, #166	; 0xa6
 800150c:	480f      	ldr	r0, [pc, #60]	; (800154c <adxl_read+0x64>)
 800150e:	f006 ff51 	bl	80083b4 <HAL_I2C_Mem_Read>

	acc_x = (data_rec[1]<<8 | data_rec[0]);
 8001512:	4b0d      	ldr	r3, [pc, #52]	; (8001548 <adxl_read+0x60>)
 8001514:	785b      	ldrb	r3, [r3, #1]
 8001516:	021b      	lsls	r3, r3, #8
 8001518:	b21a      	sxth	r2, r3
 800151a:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <adxl_read+0x60>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	b21b      	sxth	r3, r3
 8001520:	4313      	orrs	r3, r2
 8001522:	b21a      	sxth	r2, r3
 8001524:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <adxl_read+0x68>)
 8001526:	801a      	strh	r2, [r3, #0]
	acc_y = (data_rec[3]<<8 | data_rec[2]);
 8001528:	4b07      	ldr	r3, [pc, #28]	; (8001548 <adxl_read+0x60>)
 800152a:	78db      	ldrb	r3, [r3, #3]
 800152c:	021b      	lsls	r3, r3, #8
 800152e:	b21a      	sxth	r2, r3
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <adxl_read+0x60>)
 8001532:	789b      	ldrb	r3, [r3, #2]
 8001534:	b21b      	sxth	r3, r3
 8001536:	4313      	orrs	r3, r2
 8001538:	b21a      	sxth	r2, r3
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <adxl_read+0x6c>)
 800153c:	801a      	strh	r2, [r3, #0]
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	200034d0 	.word	0x200034d0
 800154c:	20002d78 	.word	0x20002d78
 8001550:	200034c8 	.word	0x200034c8
 8001554:	200034ca 	.word	0x200034ca

08001558 <adxl_init>:


void adxl_init (void){
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
	adxl_read(0x00, 1);
 800155c:	2101      	movs	r1, #1
 800155e:	2000      	movs	r0, #0
 8001560:	f7ff ffc2 	bl	80014e8 <adxl_read>

	adxl_write(0x2d, 0);
 8001564:	2100      	movs	r1, #0
 8001566:	202d      	movs	r0, #45	; 0x2d
 8001568:	f7ff ffa2 	bl	80014b0 <adxl_write>
	adxl_write(0x2d, 0x08);
 800156c:	2108      	movs	r1, #8
 800156e:	202d      	movs	r0, #45	; 0x2d
 8001570:	f7ff ff9e 	bl	80014b0 <adxl_write>

	adxl_write(0x31, 0x01);
 8001574:	2101      	movs	r1, #1
 8001576:	2031      	movs	r0, #49	; 0x31
 8001578:	f7ff ff9a 	bl	80014b0 <adxl_write>
}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}

08001580 <GetGameState>:

enum gamestate GetGameState(){
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
    // warunki przegranej (postac znajduje sie na tym samym polu co jakikolwiek duch)
    int coins=0;
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
    for(int i=0; i<X; i++){
 800158a:	2300      	movs	r3, #0
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	e017      	b.n	80015c0 <GetGameState+0x40>
        for(int j=0; j<Y;j++){
 8001590:	2300      	movs	r3, #0
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	e00e      	b.n	80015b4 <GetGameState+0x34>
            if(board[i][j]==1)
 8001596:	492e      	ldr	r1, [pc, #184]	; (8001650 <GetGameState+0xd0>)
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	011a      	lsls	r2, r3, #4
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4413      	add	r3, r2
 80015a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d102      	bne.n	80015ae <GetGameState+0x2e>
                coins++;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	3301      	adds	r3, #1
 80015ac:	60fb      	str	r3, [r7, #12]
        for(int j=0; j<Y;j++){
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3301      	adds	r3, #1
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b0f      	cmp	r3, #15
 80015b8:	dded      	ble.n	8001596 <GetGameState+0x16>
    for(int i=0; i<X; i++){
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	3301      	adds	r3, #1
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	2b0b      	cmp	r3, #11
 80015c4:	dde4      	ble.n	8001590 <GetGameState+0x10>
        }
    }
    if(headx==ghost1x && heady==ghost1y)
 80015c6:	4b23      	ldr	r3, [pc, #140]	; (8001654 <GetGameState+0xd4>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4b23      	ldr	r3, [pc, #140]	; (8001658 <GetGameState+0xd8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d107      	bne.n	80015e2 <GetGameState+0x62>
 80015d2:	4b22      	ldr	r3, [pc, #136]	; (800165c <GetGameState+0xdc>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	4b22      	ldr	r3, [pc, #136]	; (8001660 <GetGameState+0xe0>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d101      	bne.n	80015e2 <GetGameState+0x62>
        return LOSE;
 80015de:	2301      	movs	r3, #1
 80015e0:	e02f      	b.n	8001642 <GetGameState+0xc2>
    else if(headx==ghost2x && heady==ghost2y)
 80015e2:	4b1c      	ldr	r3, [pc, #112]	; (8001654 <GetGameState+0xd4>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	4b1f      	ldr	r3, [pc, #124]	; (8001664 <GetGameState+0xe4>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d107      	bne.n	80015fe <GetGameState+0x7e>
 80015ee:	4b1b      	ldr	r3, [pc, #108]	; (800165c <GetGameState+0xdc>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <GetGameState+0xe8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d101      	bne.n	80015fe <GetGameState+0x7e>
        return LOSE;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e021      	b.n	8001642 <GetGameState+0xc2>
    else if(headx==ghost3x && heady==ghost3y)
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <GetGameState+0xd4>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	4b1a      	ldr	r3, [pc, #104]	; (800166c <GetGameState+0xec>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	429a      	cmp	r2, r3
 8001608:	d107      	bne.n	800161a <GetGameState+0x9a>
 800160a:	4b14      	ldr	r3, [pc, #80]	; (800165c <GetGameState+0xdc>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	4b18      	ldr	r3, [pc, #96]	; (8001670 <GetGameState+0xf0>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	429a      	cmp	r2, r3
 8001614:	d101      	bne.n	800161a <GetGameState+0x9a>
        return LOSE;
 8001616:	2301      	movs	r3, #1
 8001618:	e013      	b.n	8001642 <GetGameState+0xc2>
    else if(headx==ghost4x && heady==ghost4y)
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <GetGameState+0xd4>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	4b15      	ldr	r3, [pc, #84]	; (8001674 <GetGameState+0xf4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	429a      	cmp	r2, r3
 8001624:	d107      	bne.n	8001636 <GetGameState+0xb6>
 8001626:	4b0d      	ldr	r3, [pc, #52]	; (800165c <GetGameState+0xdc>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	4b13      	ldr	r3, [pc, #76]	; (8001678 <GetGameState+0xf8>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	429a      	cmp	r2, r3
 8001630:	d101      	bne.n	8001636 <GetGameState+0xb6>
        return LOSE;
 8001632:	2301      	movs	r3, #1
 8001634:	e005      	b.n	8001642 <GetGameState+0xc2>
    //warunki wygranej (wszystkie "monetki zebrane")
    else if (coins==0)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d101      	bne.n	8001640 <GetGameState+0xc0>
        return WIN;
 800163c:	2302      	movs	r3, #2
 800163e:	e000      	b.n	8001642 <GetGameState+0xc2>

    else
        return RUN;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	200034e8 	.word	0x200034e8
 8001654:	20002bcc 	.word	0x20002bcc
 8001658:	20002bd8 	.word	0x20002bd8
 800165c:	20002bd0 	.word	0x20002bd0
 8001660:	20002bdc 	.word	0x20002bdc
 8001664:	20002be0 	.word	0x20002be0
 8001668:	20002be4 	.word	0x20002be4
 800166c:	20002be8 	.word	0x20002be8
 8001670:	20002bec 	.word	0x20002bec
 8001674:	20002bf0 	.word	0x20002bf0
 8001678:	20002bf4 	.word	0x20002bf4

0800167c <RandomizeMovement>:

//domyslnie po prostu zapewne będziemy brać nie z rand() tylko z odczytu z zegarów mikroprocesora
enum movement RandomizeMovement(){
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
    int num =rand()%4;
 8001682:	f00d fcb5 	bl	800eff0 <rand>
 8001686:	4603      	mov	r3, r0
 8001688:	425a      	negs	r2, r3
 800168a:	f003 0303 	and.w	r3, r3, #3
 800168e:	f002 0203 	and.w	r2, r2, #3
 8001692:	bf58      	it	pl
 8001694:	4253      	negpl	r3, r2
 8001696:	607b      	str	r3, [r7, #4]
    if (num==0)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <RandomizeMovement+0x26>
        return UP;
 800169e:	2300      	movs	r3, #0
 80016a0:	e00f      	b.n	80016c2 <RandomizeMovement+0x46>
    else if (num==1)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d101      	bne.n	80016ac <RandomizeMovement+0x30>
        return DOWN;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e00a      	b.n	80016c2 <RandomizeMovement+0x46>
    else if (num==2)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d101      	bne.n	80016b6 <RandomizeMovement+0x3a>
        return LEFT;
 80016b2:	2302      	movs	r3, #2
 80016b4:	e005      	b.n	80016c2 <RandomizeMovement+0x46>
    else if (num==3)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b03      	cmp	r3, #3
 80016ba:	d101      	bne.n	80016c0 <RandomizeMovement+0x44>
        return RIGHT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e000      	b.n	80016c2 <RandomizeMovement+0x46>
    else
    return NONE;
 80016c0:	2304      	movs	r3, #4
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <MoveGhosts>:
void MoveGhosts(){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
    bool moved =0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	71fb      	strb	r3, [r7, #7]
    while(moved==0){
 80016d6:	e077      	b.n	80017c8 <MoveGhosts+0xfc>
        MOVEGHOST=RandomizeMovement();
 80016d8:	f7ff ffd0 	bl	800167c <RandomizeMovement>
 80016dc:	4603      	mov	r3, r0
 80016de:	461a      	mov	r2, r3
 80016e0:	4b8f      	ldr	r3, [pc, #572]	; (8001920 <MoveGhosts+0x254>)
 80016e2:	701a      	strb	r2, [r3, #0]

        if(MOVEGHOST==DOWN){
 80016e4:	4b8e      	ldr	r3, [pc, #568]	; (8001920 <MoveGhosts+0x254>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d117      	bne.n	800171c <MoveGhosts+0x50>
            if(ghost1x<X-1 && board[ghost1x+1][ghost1y]!=2){
 80016ec:	4b8d      	ldr	r3, [pc, #564]	; (8001924 <MoveGhosts+0x258>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b0a      	cmp	r3, #10
 80016f2:	dc69      	bgt.n	80017c8 <MoveGhosts+0xfc>
 80016f4:	4b8b      	ldr	r3, [pc, #556]	; (8001924 <MoveGhosts+0x258>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	1c5a      	adds	r2, r3, #1
 80016fa:	4b8b      	ldr	r3, [pc, #556]	; (8001928 <MoveGhosts+0x25c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	498b      	ldr	r1, [pc, #556]	; (800192c <MoveGhosts+0x260>)
 8001700:	0112      	lsls	r2, r2, #4
 8001702:	4413      	add	r3, r2
 8001704:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001708:	2b02      	cmp	r3, #2
 800170a:	d05d      	beq.n	80017c8 <MoveGhosts+0xfc>
                ghost1x++;
 800170c:	4b85      	ldr	r3, [pc, #532]	; (8001924 <MoveGhosts+0x258>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	3301      	adds	r3, #1
 8001712:	4a84      	ldr	r2, [pc, #528]	; (8001924 <MoveGhosts+0x258>)
 8001714:	6013      	str	r3, [r2, #0]
                moved=1;
 8001716:	2301      	movs	r3, #1
 8001718:	71fb      	strb	r3, [r7, #7]
 800171a:	e055      	b.n	80017c8 <MoveGhosts+0xfc>
            }
        }
        else if(MOVEGHOST==LEFT){
 800171c:	4b80      	ldr	r3, [pc, #512]	; (8001920 <MoveGhosts+0x254>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b02      	cmp	r3, #2
 8001722:	d117      	bne.n	8001754 <MoveGhosts+0x88>
            if(ghost1y>0 && board[ghost1x][ghost1y-1]!=2){
 8001724:	4b80      	ldr	r3, [pc, #512]	; (8001928 <MoveGhosts+0x25c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	dd4d      	ble.n	80017c8 <MoveGhosts+0xfc>
 800172c:	4b7d      	ldr	r3, [pc, #500]	; (8001924 <MoveGhosts+0x258>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b7d      	ldr	r3, [pc, #500]	; (8001928 <MoveGhosts+0x25c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	3b01      	subs	r3, #1
 8001736:	497d      	ldr	r1, [pc, #500]	; (800192c <MoveGhosts+0x260>)
 8001738:	0112      	lsls	r2, r2, #4
 800173a:	4413      	add	r3, r2
 800173c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001740:	2b02      	cmp	r3, #2
 8001742:	d041      	beq.n	80017c8 <MoveGhosts+0xfc>
                ghost1y--;
 8001744:	4b78      	ldr	r3, [pc, #480]	; (8001928 <MoveGhosts+0x25c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	3b01      	subs	r3, #1
 800174a:	4a77      	ldr	r2, [pc, #476]	; (8001928 <MoveGhosts+0x25c>)
 800174c:	6013      	str	r3, [r2, #0]
                moved=1;
 800174e:	2301      	movs	r3, #1
 8001750:	71fb      	strb	r3, [r7, #7]
 8001752:	e039      	b.n	80017c8 <MoveGhosts+0xfc>
            }
        }
        else if(MOVEGHOST==UP){
 8001754:	4b72      	ldr	r3, [pc, #456]	; (8001920 <MoveGhosts+0x254>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d117      	bne.n	800178c <MoveGhosts+0xc0>
            if(ghost1x>0 && board[ghost1x-1][ghost1y]!=2){
 800175c:	4b71      	ldr	r3, [pc, #452]	; (8001924 <MoveGhosts+0x258>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	dd31      	ble.n	80017c8 <MoveGhosts+0xfc>
 8001764:	4b6f      	ldr	r3, [pc, #444]	; (8001924 <MoveGhosts+0x258>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	1e5a      	subs	r2, r3, #1
 800176a:	4b6f      	ldr	r3, [pc, #444]	; (8001928 <MoveGhosts+0x25c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	496f      	ldr	r1, [pc, #444]	; (800192c <MoveGhosts+0x260>)
 8001770:	0112      	lsls	r2, r2, #4
 8001772:	4413      	add	r3, r2
 8001774:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001778:	2b02      	cmp	r3, #2
 800177a:	d025      	beq.n	80017c8 <MoveGhosts+0xfc>
                ghost1x--;
 800177c:	4b69      	ldr	r3, [pc, #420]	; (8001924 <MoveGhosts+0x258>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	3b01      	subs	r3, #1
 8001782:	4a68      	ldr	r2, [pc, #416]	; (8001924 <MoveGhosts+0x258>)
 8001784:	6013      	str	r3, [r2, #0]
                moved=1;
 8001786:	2301      	movs	r3, #1
 8001788:	71fb      	strb	r3, [r7, #7]
 800178a:	e01d      	b.n	80017c8 <MoveGhosts+0xfc>
            }
        }
        else if(MOVEGHOST==RIGHT){
 800178c:	4b64      	ldr	r3, [pc, #400]	; (8001920 <MoveGhosts+0x254>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b03      	cmp	r3, #3
 8001792:	d117      	bne.n	80017c4 <MoveGhosts+0xf8>
            if(ghost1y<Y-1  && board[ghost1x][ghost1y+1]!=2){
 8001794:	4b64      	ldr	r3, [pc, #400]	; (8001928 <MoveGhosts+0x25c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b0e      	cmp	r3, #14
 800179a:	dc15      	bgt.n	80017c8 <MoveGhosts+0xfc>
 800179c:	4b61      	ldr	r3, [pc, #388]	; (8001924 <MoveGhosts+0x258>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4b61      	ldr	r3, [pc, #388]	; (8001928 <MoveGhosts+0x25c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	3301      	adds	r3, #1
 80017a6:	4961      	ldr	r1, [pc, #388]	; (800192c <MoveGhosts+0x260>)
 80017a8:	0112      	lsls	r2, r2, #4
 80017aa:	4413      	add	r3, r2
 80017ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d009      	beq.n	80017c8 <MoveGhosts+0xfc>
                ghost1y++;
 80017b4:	4b5c      	ldr	r3, [pc, #368]	; (8001928 <MoveGhosts+0x25c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	3301      	adds	r3, #1
 80017ba:	4a5b      	ldr	r2, [pc, #364]	; (8001928 <MoveGhosts+0x25c>)
 80017bc:	6013      	str	r3, [r2, #0]
                moved=1;
 80017be:	2301      	movs	r3, #1
 80017c0:	71fb      	strb	r3, [r7, #7]
 80017c2:	e001      	b.n	80017c8 <MoveGhosts+0xfc>
            }
        }
        else
            moved=1;
 80017c4:	2301      	movs	r3, #1
 80017c6:	71fb      	strb	r3, [r7, #7]
    while(moved==0){
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	f083 0301 	eor.w	r3, r3, #1
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d181      	bne.n	80016d8 <MoveGhosts+0xc>
    }
    moved = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	71fb      	strb	r3, [r7, #7]
    while(moved==0){
 80017d8:	e077      	b.n	80018ca <MoveGhosts+0x1fe>
        MOVEGHOST=RandomizeMovement();
 80017da:	f7ff ff4f 	bl	800167c <RandomizeMovement>
 80017de:	4603      	mov	r3, r0
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b4f      	ldr	r3, [pc, #316]	; (8001920 <MoveGhosts+0x254>)
 80017e4:	701a      	strb	r2, [r3, #0]

        if(MOVEGHOST==DOWN){
 80017e6:	4b4e      	ldr	r3, [pc, #312]	; (8001920 <MoveGhosts+0x254>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d117      	bne.n	800181e <MoveGhosts+0x152>
            if(ghost2x<X-1 && board[ghost2x+1][ghost2y]!=2){
 80017ee:	4b50      	ldr	r3, [pc, #320]	; (8001930 <MoveGhosts+0x264>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2b0a      	cmp	r3, #10
 80017f4:	dc69      	bgt.n	80018ca <MoveGhosts+0x1fe>
 80017f6:	4b4e      	ldr	r3, [pc, #312]	; (8001930 <MoveGhosts+0x264>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	1c5a      	adds	r2, r3, #1
 80017fc:	4b4d      	ldr	r3, [pc, #308]	; (8001934 <MoveGhosts+0x268>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	494a      	ldr	r1, [pc, #296]	; (800192c <MoveGhosts+0x260>)
 8001802:	0112      	lsls	r2, r2, #4
 8001804:	4413      	add	r3, r2
 8001806:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800180a:	2b02      	cmp	r3, #2
 800180c:	d05d      	beq.n	80018ca <MoveGhosts+0x1fe>
                ghost2x++;
 800180e:	4b48      	ldr	r3, [pc, #288]	; (8001930 <MoveGhosts+0x264>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	3301      	adds	r3, #1
 8001814:	4a46      	ldr	r2, [pc, #280]	; (8001930 <MoveGhosts+0x264>)
 8001816:	6013      	str	r3, [r2, #0]
                moved=1;
 8001818:	2301      	movs	r3, #1
 800181a:	71fb      	strb	r3, [r7, #7]
 800181c:	e055      	b.n	80018ca <MoveGhosts+0x1fe>
            }
        }
        else if(MOVEGHOST==LEFT){
 800181e:	4b40      	ldr	r3, [pc, #256]	; (8001920 <MoveGhosts+0x254>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b02      	cmp	r3, #2
 8001824:	d117      	bne.n	8001856 <MoveGhosts+0x18a>
            if(ghost2y>0 && board[ghost2x][ghost2y-1]!=2){
 8001826:	4b43      	ldr	r3, [pc, #268]	; (8001934 <MoveGhosts+0x268>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	dd4d      	ble.n	80018ca <MoveGhosts+0x1fe>
 800182e:	4b40      	ldr	r3, [pc, #256]	; (8001930 <MoveGhosts+0x264>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	4b40      	ldr	r3, [pc, #256]	; (8001934 <MoveGhosts+0x268>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	3b01      	subs	r3, #1
 8001838:	493c      	ldr	r1, [pc, #240]	; (800192c <MoveGhosts+0x260>)
 800183a:	0112      	lsls	r2, r2, #4
 800183c:	4413      	add	r3, r2
 800183e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d041      	beq.n	80018ca <MoveGhosts+0x1fe>
                ghost2y--;
 8001846:	4b3b      	ldr	r3, [pc, #236]	; (8001934 <MoveGhosts+0x268>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	3b01      	subs	r3, #1
 800184c:	4a39      	ldr	r2, [pc, #228]	; (8001934 <MoveGhosts+0x268>)
 800184e:	6013      	str	r3, [r2, #0]
                moved=1;
 8001850:	2301      	movs	r3, #1
 8001852:	71fb      	strb	r3, [r7, #7]
 8001854:	e039      	b.n	80018ca <MoveGhosts+0x1fe>
            }
        }
        else if(MOVEGHOST==UP){
 8001856:	4b32      	ldr	r3, [pc, #200]	; (8001920 <MoveGhosts+0x254>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d117      	bne.n	800188e <MoveGhosts+0x1c2>
            if(ghost2x>0 && board[ghost2x-1][ghost2y]!=2){
 800185e:	4b34      	ldr	r3, [pc, #208]	; (8001930 <MoveGhosts+0x264>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	dd31      	ble.n	80018ca <MoveGhosts+0x1fe>
 8001866:	4b32      	ldr	r3, [pc, #200]	; (8001930 <MoveGhosts+0x264>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	1e5a      	subs	r2, r3, #1
 800186c:	4b31      	ldr	r3, [pc, #196]	; (8001934 <MoveGhosts+0x268>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	492e      	ldr	r1, [pc, #184]	; (800192c <MoveGhosts+0x260>)
 8001872:	0112      	lsls	r2, r2, #4
 8001874:	4413      	add	r3, r2
 8001876:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d025      	beq.n	80018ca <MoveGhosts+0x1fe>
                ghost2x--;
 800187e:	4b2c      	ldr	r3, [pc, #176]	; (8001930 <MoveGhosts+0x264>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	3b01      	subs	r3, #1
 8001884:	4a2a      	ldr	r2, [pc, #168]	; (8001930 <MoveGhosts+0x264>)
 8001886:	6013      	str	r3, [r2, #0]
                moved=1;
 8001888:	2301      	movs	r3, #1
 800188a:	71fb      	strb	r3, [r7, #7]
 800188c:	e01d      	b.n	80018ca <MoveGhosts+0x1fe>
            }
        }
        else if(MOVEGHOST==RIGHT){
 800188e:	4b24      	ldr	r3, [pc, #144]	; (8001920 <MoveGhosts+0x254>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b03      	cmp	r3, #3
 8001894:	d117      	bne.n	80018c6 <MoveGhosts+0x1fa>
            if(ghost2y<Y-1  && board[ghost2x][ghost2y+1]!=2){
 8001896:	4b27      	ldr	r3, [pc, #156]	; (8001934 <MoveGhosts+0x268>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b0e      	cmp	r3, #14
 800189c:	dc15      	bgt.n	80018ca <MoveGhosts+0x1fe>
 800189e:	4b24      	ldr	r3, [pc, #144]	; (8001930 <MoveGhosts+0x264>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	4b24      	ldr	r3, [pc, #144]	; (8001934 <MoveGhosts+0x268>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	3301      	adds	r3, #1
 80018a8:	4920      	ldr	r1, [pc, #128]	; (800192c <MoveGhosts+0x260>)
 80018aa:	0112      	lsls	r2, r2, #4
 80018ac:	4413      	add	r3, r2
 80018ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d009      	beq.n	80018ca <MoveGhosts+0x1fe>
                ghost2y++;
 80018b6:	4b1f      	ldr	r3, [pc, #124]	; (8001934 <MoveGhosts+0x268>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	3301      	adds	r3, #1
 80018bc:	4a1d      	ldr	r2, [pc, #116]	; (8001934 <MoveGhosts+0x268>)
 80018be:	6013      	str	r3, [r2, #0]
                moved=1;
 80018c0:	2301      	movs	r3, #1
 80018c2:	71fb      	strb	r3, [r7, #7]
 80018c4:	e001      	b.n	80018ca <MoveGhosts+0x1fe>
            }
        }
        else
            moved=1;
 80018c6:	2301      	movs	r3, #1
 80018c8:	71fb      	strb	r3, [r7, #7]
    while(moved==0){
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	f083 0301 	eor.w	r3, r3, #1
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d181      	bne.n	80017da <MoveGhosts+0x10e>
    }
    moved = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	71fb      	strb	r3, [r7, #7]
    while(moved==0){
 80018da:	e087      	b.n	80019ec <MoveGhosts+0x320>
        MOVEGHOST=RandomizeMovement();
 80018dc:	f7ff fece 	bl	800167c <RandomizeMovement>
 80018e0:	4603      	mov	r3, r0
 80018e2:	461a      	mov	r2, r3
 80018e4:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <MoveGhosts+0x254>)
 80018e6:	701a      	strb	r2, [r3, #0]

        if(MOVEGHOST==DOWN){
 80018e8:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <MoveGhosts+0x254>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d127      	bne.n	8001940 <MoveGhosts+0x274>
            if(ghost3x<X-1 && board[ghost3x+1][ghost3y]!=2){
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <MoveGhosts+0x26c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b0a      	cmp	r3, #10
 80018f6:	dc79      	bgt.n	80019ec <MoveGhosts+0x320>
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <MoveGhosts+0x26c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	1c5a      	adds	r2, r3, #1
 80018fe:	4b0f      	ldr	r3, [pc, #60]	; (800193c <MoveGhosts+0x270>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	490a      	ldr	r1, [pc, #40]	; (800192c <MoveGhosts+0x260>)
 8001904:	0112      	lsls	r2, r2, #4
 8001906:	4413      	add	r3, r2
 8001908:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800190c:	2b02      	cmp	r3, #2
 800190e:	d06d      	beq.n	80019ec <MoveGhosts+0x320>
                ghost3x++;
 8001910:	4b09      	ldr	r3, [pc, #36]	; (8001938 <MoveGhosts+0x26c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	3301      	adds	r3, #1
 8001916:	4a08      	ldr	r2, [pc, #32]	; (8001938 <MoveGhosts+0x26c>)
 8001918:	6013      	str	r3, [r2, #0]
                moved=1;
 800191a:	2301      	movs	r3, #1
 800191c:	71fb      	strb	r3, [r7, #7]
 800191e:	e065      	b.n	80019ec <MoveGhosts+0x320>
 8001920:	20002bd5 	.word	0x20002bd5
 8001924:	20002bd8 	.word	0x20002bd8
 8001928:	20002bdc 	.word	0x20002bdc
 800192c:	200034e8 	.word	0x200034e8
 8001930:	20002be0 	.word	0x20002be0
 8001934:	20002be4 	.word	0x20002be4
 8001938:	20002be8 	.word	0x20002be8
 800193c:	20002bec 	.word	0x20002bec
            }
        }
        else if(MOVEGHOST==LEFT){
 8001940:	4b71      	ldr	r3, [pc, #452]	; (8001b08 <MoveGhosts+0x43c>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b02      	cmp	r3, #2
 8001946:	d117      	bne.n	8001978 <MoveGhosts+0x2ac>
            if(ghost3y>0 && board[ghost3x][ghost3y-1]!=2){
 8001948:	4b70      	ldr	r3, [pc, #448]	; (8001b0c <MoveGhosts+0x440>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	dd4d      	ble.n	80019ec <MoveGhosts+0x320>
 8001950:	4b6f      	ldr	r3, [pc, #444]	; (8001b10 <MoveGhosts+0x444>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b6d      	ldr	r3, [pc, #436]	; (8001b0c <MoveGhosts+0x440>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	3b01      	subs	r3, #1
 800195a:	496e      	ldr	r1, [pc, #440]	; (8001b14 <MoveGhosts+0x448>)
 800195c:	0112      	lsls	r2, r2, #4
 800195e:	4413      	add	r3, r2
 8001960:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001964:	2b02      	cmp	r3, #2
 8001966:	d041      	beq.n	80019ec <MoveGhosts+0x320>
                ghost3y--;
 8001968:	4b68      	ldr	r3, [pc, #416]	; (8001b0c <MoveGhosts+0x440>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	3b01      	subs	r3, #1
 800196e:	4a67      	ldr	r2, [pc, #412]	; (8001b0c <MoveGhosts+0x440>)
 8001970:	6013      	str	r3, [r2, #0]
                moved=1;
 8001972:	2301      	movs	r3, #1
 8001974:	71fb      	strb	r3, [r7, #7]
 8001976:	e039      	b.n	80019ec <MoveGhosts+0x320>
            }
        }
        else if(MOVEGHOST==UP){
 8001978:	4b63      	ldr	r3, [pc, #396]	; (8001b08 <MoveGhosts+0x43c>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d117      	bne.n	80019b0 <MoveGhosts+0x2e4>
            if(ghost3x>0 && board[ghost3x-1][ghost3y]!=2){
 8001980:	4b63      	ldr	r3, [pc, #396]	; (8001b10 <MoveGhosts+0x444>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	dd31      	ble.n	80019ec <MoveGhosts+0x320>
 8001988:	4b61      	ldr	r3, [pc, #388]	; (8001b10 <MoveGhosts+0x444>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	1e5a      	subs	r2, r3, #1
 800198e:	4b5f      	ldr	r3, [pc, #380]	; (8001b0c <MoveGhosts+0x440>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4960      	ldr	r1, [pc, #384]	; (8001b14 <MoveGhosts+0x448>)
 8001994:	0112      	lsls	r2, r2, #4
 8001996:	4413      	add	r3, r2
 8001998:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800199c:	2b02      	cmp	r3, #2
 800199e:	d025      	beq.n	80019ec <MoveGhosts+0x320>
                ghost3x--;
 80019a0:	4b5b      	ldr	r3, [pc, #364]	; (8001b10 <MoveGhosts+0x444>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	3b01      	subs	r3, #1
 80019a6:	4a5a      	ldr	r2, [pc, #360]	; (8001b10 <MoveGhosts+0x444>)
 80019a8:	6013      	str	r3, [r2, #0]
                moved=1;
 80019aa:	2301      	movs	r3, #1
 80019ac:	71fb      	strb	r3, [r7, #7]
 80019ae:	e01d      	b.n	80019ec <MoveGhosts+0x320>
            }
        }
        else if(MOVEGHOST==RIGHT){
 80019b0:	4b55      	ldr	r3, [pc, #340]	; (8001b08 <MoveGhosts+0x43c>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b03      	cmp	r3, #3
 80019b6:	d117      	bne.n	80019e8 <MoveGhosts+0x31c>
            if(ghost3y<Y-1  && board[ghost3x][ghost3y+1]!=2){
 80019b8:	4b54      	ldr	r3, [pc, #336]	; (8001b0c <MoveGhosts+0x440>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b0e      	cmp	r3, #14
 80019be:	dc15      	bgt.n	80019ec <MoveGhosts+0x320>
 80019c0:	4b53      	ldr	r3, [pc, #332]	; (8001b10 <MoveGhosts+0x444>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b51      	ldr	r3, [pc, #324]	; (8001b0c <MoveGhosts+0x440>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	3301      	adds	r3, #1
 80019ca:	4952      	ldr	r1, [pc, #328]	; (8001b14 <MoveGhosts+0x448>)
 80019cc:	0112      	lsls	r2, r2, #4
 80019ce:	4413      	add	r3, r2
 80019d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d009      	beq.n	80019ec <MoveGhosts+0x320>
                ghost3y++;
 80019d8:	4b4c      	ldr	r3, [pc, #304]	; (8001b0c <MoveGhosts+0x440>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	3301      	adds	r3, #1
 80019de:	4a4b      	ldr	r2, [pc, #300]	; (8001b0c <MoveGhosts+0x440>)
 80019e0:	6013      	str	r3, [r2, #0]
                moved=1;
 80019e2:	2301      	movs	r3, #1
 80019e4:	71fb      	strb	r3, [r7, #7]
 80019e6:	e001      	b.n	80019ec <MoveGhosts+0x320>
            }
        }
        else
            moved=1;
 80019e8:	2301      	movs	r3, #1
 80019ea:	71fb      	strb	r3, [r7, #7]
    while(moved==0){
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	f083 0301 	eor.w	r3, r3, #1
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f47f af71 	bne.w	80018dc <MoveGhosts+0x210>
    }
    moved = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	71fb      	strb	r3, [r7, #7]
    while(moved==0){
 80019fe:	e077      	b.n	8001af0 <MoveGhosts+0x424>
        MOVEGHOST=RandomizeMovement();
 8001a00:	f7ff fe3c 	bl	800167c <RandomizeMovement>
 8001a04:	4603      	mov	r3, r0
 8001a06:	461a      	mov	r2, r3
 8001a08:	4b3f      	ldr	r3, [pc, #252]	; (8001b08 <MoveGhosts+0x43c>)
 8001a0a:	701a      	strb	r2, [r3, #0]

        if(MOVEGHOST==DOWN){
 8001a0c:	4b3e      	ldr	r3, [pc, #248]	; (8001b08 <MoveGhosts+0x43c>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d117      	bne.n	8001a44 <MoveGhosts+0x378>
            if(ghost4x<X-1 && board[ghost4x+1][ghost4y]!=2){
 8001a14:	4b40      	ldr	r3, [pc, #256]	; (8001b18 <MoveGhosts+0x44c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b0a      	cmp	r3, #10
 8001a1a:	dc69      	bgt.n	8001af0 <MoveGhosts+0x424>
 8001a1c:	4b3e      	ldr	r3, [pc, #248]	; (8001b18 <MoveGhosts+0x44c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	1c5a      	adds	r2, r3, #1
 8001a22:	4b3e      	ldr	r3, [pc, #248]	; (8001b1c <MoveGhosts+0x450>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	493b      	ldr	r1, [pc, #236]	; (8001b14 <MoveGhosts+0x448>)
 8001a28:	0112      	lsls	r2, r2, #4
 8001a2a:	4413      	add	r3, r2
 8001a2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d05d      	beq.n	8001af0 <MoveGhosts+0x424>
                ghost4x++;
 8001a34:	4b38      	ldr	r3, [pc, #224]	; (8001b18 <MoveGhosts+0x44c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	4a37      	ldr	r2, [pc, #220]	; (8001b18 <MoveGhosts+0x44c>)
 8001a3c:	6013      	str	r3, [r2, #0]
                moved=1;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	71fb      	strb	r3, [r7, #7]
 8001a42:	e055      	b.n	8001af0 <MoveGhosts+0x424>
            }
        }
        else if(MOVEGHOST==LEFT){
 8001a44:	4b30      	ldr	r3, [pc, #192]	; (8001b08 <MoveGhosts+0x43c>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d117      	bne.n	8001a7c <MoveGhosts+0x3b0>
            if(ghost4y>0 && board[ghost4x][ghost4y-1]!=2){
 8001a4c:	4b33      	ldr	r3, [pc, #204]	; (8001b1c <MoveGhosts+0x450>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	dd4d      	ble.n	8001af0 <MoveGhosts+0x424>
 8001a54:	4b30      	ldr	r3, [pc, #192]	; (8001b18 <MoveGhosts+0x44c>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b30      	ldr	r3, [pc, #192]	; (8001b1c <MoveGhosts+0x450>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	492d      	ldr	r1, [pc, #180]	; (8001b14 <MoveGhosts+0x448>)
 8001a60:	0112      	lsls	r2, r2, #4
 8001a62:	4413      	add	r3, r2
 8001a64:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d041      	beq.n	8001af0 <MoveGhosts+0x424>
                ghost4y--;
 8001a6c:	4b2b      	ldr	r3, [pc, #172]	; (8001b1c <MoveGhosts+0x450>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	3b01      	subs	r3, #1
 8001a72:	4a2a      	ldr	r2, [pc, #168]	; (8001b1c <MoveGhosts+0x450>)
 8001a74:	6013      	str	r3, [r2, #0]
                moved=1;
 8001a76:	2301      	movs	r3, #1
 8001a78:	71fb      	strb	r3, [r7, #7]
 8001a7a:	e039      	b.n	8001af0 <MoveGhosts+0x424>
            }
        }
        else if(MOVEGHOST==UP){
 8001a7c:	4b22      	ldr	r3, [pc, #136]	; (8001b08 <MoveGhosts+0x43c>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d117      	bne.n	8001ab4 <MoveGhosts+0x3e8>
            if(ghost4x>0 && board[ghost4x-1][ghost4y]!=2){
 8001a84:	4b24      	ldr	r3, [pc, #144]	; (8001b18 <MoveGhosts+0x44c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	dd31      	ble.n	8001af0 <MoveGhosts+0x424>
 8001a8c:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <MoveGhosts+0x44c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	1e5a      	subs	r2, r3, #1
 8001a92:	4b22      	ldr	r3, [pc, #136]	; (8001b1c <MoveGhosts+0x450>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	491f      	ldr	r1, [pc, #124]	; (8001b14 <MoveGhosts+0x448>)
 8001a98:	0112      	lsls	r2, r2, #4
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d025      	beq.n	8001af0 <MoveGhosts+0x424>
                ghost4x--;
 8001aa4:	4b1c      	ldr	r3, [pc, #112]	; (8001b18 <MoveGhosts+0x44c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	4a1b      	ldr	r2, [pc, #108]	; (8001b18 <MoveGhosts+0x44c>)
 8001aac:	6013      	str	r3, [r2, #0]
                moved=1;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	71fb      	strb	r3, [r7, #7]
 8001ab2:	e01d      	b.n	8001af0 <MoveGhosts+0x424>
            }
        }
        else if(MOVEGHOST==RIGHT){
 8001ab4:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <MoveGhosts+0x43c>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b03      	cmp	r3, #3
 8001aba:	d117      	bne.n	8001aec <MoveGhosts+0x420>
            if(ghost4y<Y-1  && board[ghost4x][ghost4y+1]!=2){
 8001abc:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <MoveGhosts+0x450>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b0e      	cmp	r3, #14
 8001ac2:	dc15      	bgt.n	8001af0 <MoveGhosts+0x424>
 8001ac4:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <MoveGhosts+0x44c>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <MoveGhosts+0x450>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	3301      	adds	r3, #1
 8001ace:	4911      	ldr	r1, [pc, #68]	; (8001b14 <MoveGhosts+0x448>)
 8001ad0:	0112      	lsls	r2, r2, #4
 8001ad2:	4413      	add	r3, r2
 8001ad4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d009      	beq.n	8001af0 <MoveGhosts+0x424>
                ghost4y++;
 8001adc:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <MoveGhosts+0x450>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	4a0e      	ldr	r2, [pc, #56]	; (8001b1c <MoveGhosts+0x450>)
 8001ae4:	6013      	str	r3, [r2, #0]
                moved=1;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	71fb      	strb	r3, [r7, #7]
 8001aea:	e001      	b.n	8001af0 <MoveGhosts+0x424>
            }
        }
        else
            moved=1;
 8001aec:	2301      	movs	r3, #1
 8001aee:	71fb      	strb	r3, [r7, #7]
    while(moved==0){
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	f083 0301 	eor.w	r3, r3, #1
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d181      	bne.n	8001a00 <MoveGhosts+0x334>
    }
}
 8001afc:	bf00      	nop
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20002bd5 	.word	0x20002bd5
 8001b0c:	20002bec 	.word	0x20002bec
 8001b10:	20002be8 	.word	0x20002be8
 8001b14:	200034e8 	.word	0x200034e8
 8001b18:	20002bf0 	.word	0x20002bf0
 8001b1c:	20002bf4 	.word	0x20002bf4

08001b20 <GetPlayerMove>:
//domyslnie bedzie w jakis sposob to kooperowac z zyroskopem
enum movement GetPlayerMove(){
 8001b20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
//    else{
//        printf("Bledne dane wejsciowe sprouj jeszcze raz\n");
//        c='n';
//        return NONE;
//    }
	L3GD20_ReadXYZAngRate(DaneZyroskopu);
 8001b28:	482c      	ldr	r0, [pc, #176]	; (8001bdc <GetPlayerMove+0xbc>)
 8001b2a:	f001 f9a3 	bl	8002e74 <L3GD20_ReadXYZAngRate>
	adxl_read(0x32, 6);
 8001b2e:	2106      	movs	r1, #6
 8001b30:	2032      	movs	r0, #50	; 0x32
 8001b32:	f7ff fcd9 	bl	80014e8 <adxl_read>

	// 1 = down 2 = up 3 = right 4 = left
					int xx = acc_x - first_acc_x;
 8001b36:	4b2a      	ldr	r3, [pc, #168]	; (8001be0 <GetPlayerMove+0xc0>)
 8001b38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	4b29      	ldr	r3, [pc, #164]	; (8001be4 <GetPlayerMove+0xc4>)
 8001b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	607b      	str	r3, [r7, #4]
					int yy = acc_y - first_acc_y;
 8001b48:	4b27      	ldr	r3, [pc, #156]	; (8001be8 <GetPlayerMove+0xc8>)
 8001b4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	4b26      	ldr	r3, [pc, #152]	; (8001bec <GetPlayerMove+0xcc>)
 8001b52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	603b      	str	r3, [r7, #0]

				if(fabs(acc_y) > fabs(acc_x)){
 8001b5a:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <GetPlayerMove+0xc8>)
 8001b5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fce7 	bl	8000534 <__aeabi_i2d>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4614      	mov	r4, r2
 8001b6c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001b70:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <GetPlayerMove+0xc0>)
 8001b72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7fe fcdc 	bl	8000534 <__aeabi_i2d>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4690      	mov	r8, r2
 8001b82:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001b86:	4642      	mov	r2, r8
 8001b88:	464b      	mov	r3, r9
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	4629      	mov	r1, r5
 8001b8e:	f7fe fdb9 	bl	8000704 <__aeabi_dcmpgt>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00d      	beq.n	8001bb4 <GetPlayerMove+0x94>
					if(acc_y < 0){
 8001b98:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <GetPlayerMove+0xc8>)
 8001b9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	da01      	bge.n	8001ba6 <GetPlayerMove+0x86>
						return DOWN;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e014      	b.n	8001bd0 <GetPlayerMove+0xb0>
					}
					else if(acc_y > 0){
 8001ba6:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <GetPlayerMove+0xc8>)
 8001ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	dd0f      	ble.n	8001bd0 <GetPlayerMove+0xb0>
						return UP;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	e00d      	b.n	8001bd0 <GetPlayerMove+0xb0>
					}
				}
				else if(acc_x < 0){
 8001bb4:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <GetPlayerMove+0xc0>)
 8001bb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	da01      	bge.n	8001bc2 <GetPlayerMove+0xa2>
					return RIGHT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e006      	b.n	8001bd0 <GetPlayerMove+0xb0>
				}
				else if(acc_x > 0){
 8001bc2:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <GetPlayerMove+0xc0>)
 8001bc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	dd01      	ble.n	8001bd0 <GetPlayerMove+0xb0>
					return LEFT;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	e7ff      	b.n	8001bd0 <GetPlayerMove+0xb0>
				}

}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001bda:	bf00      	nop
 8001bdc:	200034d8 	.word	0x200034d8
 8001be0:	200034c8 	.word	0x200034c8
 8001be4:	200034cc 	.word	0x200034cc
 8001be8:	200034ca 	.word	0x200034ca
 8001bec:	200034ce 	.word	0x200034ce

08001bf0 <MovePlayer>:
void MovePlayer(){
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0

    MOVE=GetPlayerMove();
 8001bf4:	f7ff ff94 	bl	8001b20 <GetPlayerMove>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4b45      	ldr	r3, [pc, #276]	; (8001d14 <MovePlayer+0x124>)
 8001bfe:	701a      	strb	r2, [r3, #0]

    	if(MOVE==DOWN){
 8001c00:	4b44      	ldr	r3, [pc, #272]	; (8001d14 <MovePlayer+0x124>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d115      	bne.n	8001c34 <MovePlayer+0x44>
    		if(headx<X-1 && board[headx+1][heady]!=2)
 8001c08:	4b43      	ldr	r3, [pc, #268]	; (8001d18 <MovePlayer+0x128>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2b0a      	cmp	r3, #10
 8001c0e:	dc5e      	bgt.n	8001cce <MovePlayer+0xde>
 8001c10:	4b41      	ldr	r3, [pc, #260]	; (8001d18 <MovePlayer+0x128>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	1c5a      	adds	r2, r3, #1
 8001c16:	4b41      	ldr	r3, [pc, #260]	; (8001d1c <MovePlayer+0x12c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4941      	ldr	r1, [pc, #260]	; (8001d20 <MovePlayer+0x130>)
 8001c1c:	0112      	lsls	r2, r2, #4
 8001c1e:	4413      	add	r3, r2
 8001c20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d052      	beq.n	8001cce <MovePlayer+0xde>
    			headx++;
 8001c28:	4b3b      	ldr	r3, [pc, #236]	; (8001d18 <MovePlayer+0x128>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	4a3a      	ldr	r2, [pc, #232]	; (8001d18 <MovePlayer+0x128>)
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	e04c      	b.n	8001cce <MovePlayer+0xde>
    	}
    	else if(MOVE==LEFT){
 8001c34:	4b37      	ldr	r3, [pc, #220]	; (8001d14 <MovePlayer+0x124>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d115      	bne.n	8001c68 <MovePlayer+0x78>
    		if(heady>0 && board[headx][heady-1]!=2)
 8001c3c:	4b37      	ldr	r3, [pc, #220]	; (8001d1c <MovePlayer+0x12c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	dd44      	ble.n	8001cce <MovePlayer+0xde>
 8001c44:	4b34      	ldr	r3, [pc, #208]	; (8001d18 <MovePlayer+0x128>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4b34      	ldr	r3, [pc, #208]	; (8001d1c <MovePlayer+0x12c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	4934      	ldr	r1, [pc, #208]	; (8001d20 <MovePlayer+0x130>)
 8001c50:	0112      	lsls	r2, r2, #4
 8001c52:	4413      	add	r3, r2
 8001c54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d038      	beq.n	8001cce <MovePlayer+0xde>
    			heady--;
 8001c5c:	4b2f      	ldr	r3, [pc, #188]	; (8001d1c <MovePlayer+0x12c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	3b01      	subs	r3, #1
 8001c62:	4a2e      	ldr	r2, [pc, #184]	; (8001d1c <MovePlayer+0x12c>)
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	e032      	b.n	8001cce <MovePlayer+0xde>
    	}
    	else if(MOVE==UP){
 8001c68:	4b2a      	ldr	r3, [pc, #168]	; (8001d14 <MovePlayer+0x124>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d115      	bne.n	8001c9c <MovePlayer+0xac>
    		if(headx>0 && board[headx-1][heady]!=2)
 8001c70:	4b29      	ldr	r3, [pc, #164]	; (8001d18 <MovePlayer+0x128>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	dd2a      	ble.n	8001cce <MovePlayer+0xde>
 8001c78:	4b27      	ldr	r3, [pc, #156]	; (8001d18 <MovePlayer+0x128>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	1e5a      	subs	r2, r3, #1
 8001c7e:	4b27      	ldr	r3, [pc, #156]	; (8001d1c <MovePlayer+0x12c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4927      	ldr	r1, [pc, #156]	; (8001d20 <MovePlayer+0x130>)
 8001c84:	0112      	lsls	r2, r2, #4
 8001c86:	4413      	add	r3, r2
 8001c88:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d01e      	beq.n	8001cce <MovePlayer+0xde>
    			headx--;
 8001c90:	4b21      	ldr	r3, [pc, #132]	; (8001d18 <MovePlayer+0x128>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	3b01      	subs	r3, #1
 8001c96:	4a20      	ldr	r2, [pc, #128]	; (8001d18 <MovePlayer+0x128>)
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	e018      	b.n	8001cce <MovePlayer+0xde>
    	}
    	else if(MOVE==RIGHT){
 8001c9c:	4b1d      	ldr	r3, [pc, #116]	; (8001d14 <MovePlayer+0x124>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b03      	cmp	r3, #3
 8001ca2:	d114      	bne.n	8001cce <MovePlayer+0xde>
    		if(heady<Y-1  && board[headx][heady+1]!=2)
 8001ca4:	4b1d      	ldr	r3, [pc, #116]	; (8001d1c <MovePlayer+0x12c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2b0e      	cmp	r3, #14
 8001caa:	dc10      	bgt.n	8001cce <MovePlayer+0xde>
 8001cac:	4b1a      	ldr	r3, [pc, #104]	; (8001d18 <MovePlayer+0x128>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <MovePlayer+0x12c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	491a      	ldr	r1, [pc, #104]	; (8001d20 <MovePlayer+0x130>)
 8001cb8:	0112      	lsls	r2, r2, #4
 8001cba:	4413      	add	r3, r2
 8001cbc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d004      	beq.n	8001cce <MovePlayer+0xde>
    			heady++;
 8001cc4:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <MovePlayer+0x12c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	4a14      	ldr	r2, [pc, #80]	; (8001d1c <MovePlayer+0x12c>)
 8001ccc:	6013      	str	r3, [r2, #0]
    	}
    	printf("X=%d Y=%d\n",headx,heady);
 8001cce:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <MovePlayer+0x128>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a12      	ldr	r2, [pc, #72]	; (8001d1c <MovePlayer+0x12c>)
 8001cd4:	6812      	ldr	r2, [r2, #0]
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4812      	ldr	r0, [pc, #72]	; (8001d24 <MovePlayer+0x134>)
 8001cda:	f00d fa89 	bl	800f1f0 <iprintf>
    	highest_speed = 0;
 8001cde:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <MovePlayer+0x138>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]

    	if(board[headx][heady]==1)
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <MovePlayer+0x128>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <MovePlayer+0x12c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	490c      	ldr	r1, [pc, #48]	; (8001d20 <MovePlayer+0x130>)
 8001cee:	0112      	lsls	r2, r2, #4
 8001cf0:	4413      	add	r3, r2
 8001cf2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d109      	bne.n	8001d0e <MovePlayer+0x11e>
    		board[headx][heady]=0;
 8001cfa:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <MovePlayer+0x128>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <MovePlayer+0x12c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4907      	ldr	r1, [pc, #28]	; (8001d20 <MovePlayer+0x130>)
 8001d04:	0112      	lsls	r2, r2, #4
 8001d06:	4413      	add	r3, r2
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20002bd4 	.word	0x20002bd4
 8001d18:	20002bcc 	.word	0x20002bcc
 8001d1c:	20002bd0 	.word	0x20002bd0
 8001d20:	200034e8 	.word	0x200034e8
 8001d24:	08010bc8 	.word	0x08010bc8
 8001d28:	200034e4 	.word	0x200034e4

08001d2c <BoardInit1>:

	for(int i=0; i<68;i++){
		board[wallcoardx[i]][wallcoardy[i]] = 2;
	}
}
void BoardInit1(){
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
	board[0][0]=2;
 8001d30:	4b03      	ldr	r3, [pc, #12]	; (8001d40 <BoardInit1+0x14>)
 8001d32:	2202      	movs	r2, #2
 8001d34:	601a      	str	r2, [r3, #0]
}
 8001d36:	bf00      	nop
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	200034e8 	.word	0x200034e8

08001d44 <BoardInit2>:
void BoardInit2(){
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
	board[0][5]=2;
 8001d48:	4b03      	ldr	r3, [pc, #12]	; (8001d58 <BoardInit2+0x14>)
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	615a      	str	r2, [r3, #20]
}
 8001d4e:	bf00      	nop
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	200034e8 	.word	0x200034e8

08001d5c <BoardInit3>:
void BoardInit3(){
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
	board[5][0]=2;
 8001d60:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <BoardInit3+0x18>)
 8001d62:	2202      	movs	r2, #2
 8001d64:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	200034e8 	.word	0x200034e8

08001d78 <BoardInit4>:
void BoardInit4(){
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
	board[5][5]=2;
 8001d7c:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <BoardInit4+0x18>)
 8001d7e:	2202      	movs	r2, #2
 8001d80:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	200034e8 	.word	0x200034e8

08001d94 <BoardCoinInit>:
}



//uzupelnianie mapy "monetkami" tam gdzie nie ma murkow oraz glowy ghracza
void BoardCoinInit(){
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
    for(int i=0; i<X; i++){
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	607b      	str	r3, [r7, #4]
 8001d9e:	e01c      	b.n	8001dda <BoardCoinInit+0x46>
        for(int j=0; j<Y;j++){
 8001da0:	2300      	movs	r3, #0
 8001da2:	603b      	str	r3, [r7, #0]
 8001da4:	e013      	b.n	8001dce <BoardCoinInit+0x3a>
            if(board[i][j]==0)
 8001da6:	4912      	ldr	r1, [pc, #72]	; (8001df0 <BoardCoinInit+0x5c>)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	011a      	lsls	r2, r3, #4
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	4413      	add	r3, r2
 8001db0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d107      	bne.n	8001dc8 <BoardCoinInit+0x34>
                board[i][j]=1;
 8001db8:	490d      	ldr	r1, [pc, #52]	; (8001df0 <BoardCoinInit+0x5c>)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	011a      	lsls	r2, r3, #4
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for(int j=0; j<Y;j++){
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	603b      	str	r3, [r7, #0]
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	2b0f      	cmp	r3, #15
 8001dd2:	dde8      	ble.n	8001da6 <BoardCoinInit+0x12>
    for(int i=0; i<X; i++){
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b0b      	cmp	r3, #11
 8001dde:	dddf      	ble.n	8001da0 <BoardCoinInit+0xc>
        }
    }
}
 8001de0:	bf00      	nop
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	200034e8 	.word	0x200034e8

08001df4 <BoardDraw>:
void BoardDraw(){
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af02      	add	r7, sp, #8
	//BSP_LCD_Clear(0x0000);
    for(int i=0; i<X; i++){
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	607b      	str	r3, [r7, #4]
 8001dfe:	e115      	b.n	800202c <BoardDraw+0x238>
        for(int j=0; j<Y;j++){
 8001e00:	2300      	movs	r3, #0
 8001e02:	603b      	str	r3, [r7, #0]
 8001e04:	e108      	b.n	8002018 <BoardDraw+0x224>
            if(i==headx && j==heady)
 8001e06:	4b8e      	ldr	r3, [pc, #568]	; (8002040 <BoardDraw+0x24c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d11c      	bne.n	8001e4a <BoardDraw+0x56>
 8001e10:	4b8c      	ldr	r3, [pc, #560]	; (8002044 <BoardDraw+0x250>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d117      	bne.n	8001e4a <BoardDraw+0x56>
            	BSP_LCD_DrawBitmap_RGB565(headx*20, heady*20, (uint8_t *)PacManicon, szerokosc, wysokosc);
 8001e1a:	4b89      	ldr	r3, [pc, #548]	; (8002040 <BoardDraw+0x24c>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4618      	mov	r0, r3
 8001e28:	4b86      	ldr	r3, [pc, #536]	; (8002044 <BoardDraw+0x250>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4619      	mov	r1, r3
 8001e36:	4b84      	ldr	r3, [pc, #528]	; (8002048 <BoardDraw+0x254>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	4b84      	ldr	r3, [pc, #528]	; (800204c <BoardDraw+0x258>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	4613      	mov	r3, r2
 8001e42:	4a83      	ldr	r2, [pc, #524]	; (8002050 <BoardDraw+0x25c>)
 8001e44:	f002 fa3c 	bl	80042c0 <BSP_LCD_DrawBitmap_RGB565>
 8001e48:	e0e3      	b.n	8002012 <BoardDraw+0x21e>
            else if(i==ghost1x && j==ghost1y)
 8001e4a:	4b82      	ldr	r3, [pc, #520]	; (8002054 <BoardDraw+0x260>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d11c      	bne.n	8001e8e <BoardDraw+0x9a>
 8001e54:	4b80      	ldr	r3, [pc, #512]	; (8002058 <BoardDraw+0x264>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d117      	bne.n	8001e8e <BoardDraw+0x9a>
            	BSP_LCD_DrawBitmap_RGB565(ghost1x*20, ghost1y*20, (uint8_t *)duszek1, szerokosc, wysokosc);
 8001e5e:	4b7d      	ldr	r3, [pc, #500]	; (8002054 <BoardDraw+0x260>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	4613      	mov	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4413      	add	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	4b7a      	ldr	r3, [pc, #488]	; (8002058 <BoardDraw+0x264>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	4613      	mov	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4b73      	ldr	r3, [pc, #460]	; (8002048 <BoardDraw+0x254>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	4b73      	ldr	r3, [pc, #460]	; (800204c <BoardDraw+0x258>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	4613      	mov	r3, r2
 8001e86:	4a75      	ldr	r2, [pc, #468]	; (800205c <BoardDraw+0x268>)
 8001e88:	f002 fa1a 	bl	80042c0 <BSP_LCD_DrawBitmap_RGB565>
 8001e8c:	e0c1      	b.n	8002012 <BoardDraw+0x21e>
            else if(i==ghost2x && j==ghost2y)
 8001e8e:	4b74      	ldr	r3, [pc, #464]	; (8002060 <BoardDraw+0x26c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d11c      	bne.n	8001ed2 <BoardDraw+0xde>
 8001e98:	4b72      	ldr	r3, [pc, #456]	; (8002064 <BoardDraw+0x270>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d117      	bne.n	8001ed2 <BoardDraw+0xde>
            	BSP_LCD_DrawBitmap_RGB565(ghost2x*20, ghost2y*20, (uint8_t *)duszek2, szerokosc, wysokosc);
 8001ea2:	4b6f      	ldr	r3, [pc, #444]	; (8002060 <BoardDraw+0x26c>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4618      	mov	r0, r3
 8001eb0:	4b6c      	ldr	r3, [pc, #432]	; (8002064 <BoardDraw+0x270>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4b62      	ldr	r3, [pc, #392]	; (8002048 <BoardDraw+0x254>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	4b62      	ldr	r3, [pc, #392]	; (800204c <BoardDraw+0x258>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	4a67      	ldr	r2, [pc, #412]	; (8002068 <BoardDraw+0x274>)
 8001ecc:	f002 f9f8 	bl	80042c0 <BSP_LCD_DrawBitmap_RGB565>
 8001ed0:	e09f      	b.n	8002012 <BoardDraw+0x21e>
            else if(i==ghost3x && j==ghost3y)
 8001ed2:	4b66      	ldr	r3, [pc, #408]	; (800206c <BoardDraw+0x278>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d11c      	bne.n	8001f16 <BoardDraw+0x122>
 8001edc:	4b64      	ldr	r3, [pc, #400]	; (8002070 <BoardDraw+0x27c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d117      	bne.n	8001f16 <BoardDraw+0x122>
            	BSP_LCD_DrawBitmap_RGB565(ghost3x*20, ghost3y*20, (uint8_t *)duszek3, szerokosc, wysokosc);
 8001ee6:	4b61      	ldr	r3, [pc, #388]	; (800206c <BoardDraw+0x278>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	4613      	mov	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	4b5e      	ldr	r3, [pc, #376]	; (8002070 <BoardDraw+0x27c>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4619      	mov	r1, r3
 8001f02:	4b51      	ldr	r3, [pc, #324]	; (8002048 <BoardDraw+0x254>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	4b51      	ldr	r3, [pc, #324]	; (800204c <BoardDraw+0x258>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	4a59      	ldr	r2, [pc, #356]	; (8002074 <BoardDraw+0x280>)
 8001f10:	f002 f9d6 	bl	80042c0 <BSP_LCD_DrawBitmap_RGB565>
 8001f14:	e07d      	b.n	8002012 <BoardDraw+0x21e>
            else if(i==ghost4x && j==ghost4y)
 8001f16:	4b58      	ldr	r3, [pc, #352]	; (8002078 <BoardDraw+0x284>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d11c      	bne.n	8001f5a <BoardDraw+0x166>
 8001f20:	4b56      	ldr	r3, [pc, #344]	; (800207c <BoardDraw+0x288>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d117      	bne.n	8001f5a <BoardDraw+0x166>
            	BSP_LCD_DrawBitmap_RGB565(ghost4x*20, ghost4y*20, (uint8_t *)duszek4, szerokosc, wysokosc);
 8001f2a:	4b53      	ldr	r3, [pc, #332]	; (8002078 <BoardDraw+0x284>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4618      	mov	r0, r3
 8001f38:	4b50      	ldr	r3, [pc, #320]	; (800207c <BoardDraw+0x288>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4619      	mov	r1, r3
 8001f46:	4b40      	ldr	r3, [pc, #256]	; (8002048 <BoardDraw+0x254>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	4b40      	ldr	r3, [pc, #256]	; (800204c <BoardDraw+0x258>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	4613      	mov	r3, r2
 8001f52:	4a4b      	ldr	r2, [pc, #300]	; (8002080 <BoardDraw+0x28c>)
 8001f54:	f002 f9b4 	bl	80042c0 <BSP_LCD_DrawBitmap_RGB565>
 8001f58:	e05b      	b.n	8002012 <BoardDraw+0x21e>
            else if(board[i][j]==0)
 8001f5a:	494a      	ldr	r1, [pc, #296]	; (8002084 <BoardDraw+0x290>)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	011a      	lsls	r2, r3, #4
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	4413      	add	r3, r2
 8001f64:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d115      	bne.n	8001f98 <BoardDraw+0x1a4>
            	BSP_LCD_DrawBitmap_RGB565(i*20, j*20, (uint8_t *)puste_pole, szerokosc, wysokosc);
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4618      	mov	r0, r3
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4413      	add	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4619      	mov	r1, r3
 8001f84:	4b30      	ldr	r3, [pc, #192]	; (8002048 <BoardDraw+0x254>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	4b30      	ldr	r3, [pc, #192]	; (800204c <BoardDraw+0x258>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	4a3d      	ldr	r2, [pc, #244]	; (8002088 <BoardDraw+0x294>)
 8001f92:	f002 f995 	bl	80042c0 <BSP_LCD_DrawBitmap_RGB565>
 8001f96:	e03c      	b.n	8002012 <BoardDraw+0x21e>
            else if(board[i][j]==1)
 8001f98:	493a      	ldr	r1, [pc, #232]	; (8002084 <BoardDraw+0x290>)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	011a      	lsls	r2, r3, #4
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d115      	bne.n	8001fd6 <BoardDraw+0x1e2>
            	BSP_LCD_DrawBitmap_RGB565(i*20, j*20, (uint8_t *)moneta, szerokosc, wysokosc);
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4b21      	ldr	r3, [pc, #132]	; (8002048 <BoardDraw+0x254>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	4b21      	ldr	r3, [pc, #132]	; (800204c <BoardDraw+0x258>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	4a2f      	ldr	r2, [pc, #188]	; (800208c <BoardDraw+0x298>)
 8001fd0:	f002 f976 	bl	80042c0 <BSP_LCD_DrawBitmap_RGB565>
 8001fd4:	e01d      	b.n	8002012 <BoardDraw+0x21e>
            else if(board[i][j]==2)
 8001fd6:	492b      	ldr	r1, [pc, #172]	; (8002084 <BoardDraw+0x290>)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	011a      	lsls	r2, r3, #4
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	4413      	add	r3, r2
 8001fe0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d114      	bne.n	8002012 <BoardDraw+0x21e>
            	BSP_LCD_DrawBitmap_RGB565(i*20, j*20, (uint8_t *)sciana, szerokosc, wysokosc);
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4619      	mov	r1, r3
 8002000:	4b11      	ldr	r3, [pc, #68]	; (8002048 <BoardDraw+0x254>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4b11      	ldr	r3, [pc, #68]	; (800204c <BoardDraw+0x258>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	4613      	mov	r3, r2
 800200c:	4a20      	ldr	r2, [pc, #128]	; (8002090 <BoardDraw+0x29c>)
 800200e:	f002 f957 	bl	80042c0 <BSP_LCD_DrawBitmap_RGB565>
        for(int j=0; j<Y;j++){
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	3301      	adds	r3, #1
 8002016:	603b      	str	r3, [r7, #0]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	2b0f      	cmp	r3, #15
 800201c:	f77f aef3 	ble.w	8001e06 <BoardDraw+0x12>
        }
        printf("\n");
 8002020:	200a      	movs	r0, #10
 8002022:	f00d f8f7 	bl	800f214 <putchar>
    for(int i=0; i<X; i++){
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3301      	adds	r3, #1
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b0b      	cmp	r3, #11
 8002030:	f77f aee6 	ble.w	8001e00 <BoardDraw+0xc>
    }
}
 8002034:	bf00      	nop
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20002bcc 	.word	0x20002bcc
 8002044:	20002bd0 	.word	0x20002bd0
 8002048:	20002bc4 	.word	0x20002bc4
 800204c:	20002bc8 	.word	0x20002bc8
 8002050:	20000000 	.word	0x20000000
 8002054:	20002bd8 	.word	0x20002bd8
 8002058:	20002bdc 	.word	0x20002bdc
 800205c:	20000640 	.word	0x20000640
 8002060:	20002be0 	.word	0x20002be0
 8002064:	20002be4 	.word	0x20002be4
 8002068:	20000c80 	.word	0x20000c80
 800206c:	20002be8 	.word	0x20002be8
 8002070:	20002bec 	.word	0x20002bec
 8002074:	200012c0 	.word	0x200012c0
 8002078:	20002bf0 	.word	0x20002bf0
 800207c:	20002bf4 	.word	0x20002bf4
 8002080:	20001900 	.word	0x20001900
 8002084:	200034e8 	.word	0x200034e8
 8002088:	20002e88 	.word	0x20002e88
 800208c:	20002580 	.word	0x20002580
 8002090:	20001f40 	.word	0x20001f40

08002094 <play>:
void play(){
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
    //BoardWallsInit();
    BoardCoinInit();
 800209a:	f7ff fe7b 	bl	8001d94 <BoardCoinInit>

    while(GetGameState()==RUN){
 800209e:	e00d      	b.n	80020bc <play+0x28>
    	GetPlayerMove();
 80020a0:	f7ff fd3e 	bl	8001b20 <GetPlayerMove>
        BoardDraw();
 80020a4:	f7ff fea6 	bl	8001df4 <BoardDraw>
        MovePlayer();
 80020a8:	f7ff fda2 	bl	8001bf0 <MovePlayer>
        MoveGhosts();
 80020ac:	f7ff fb0e 	bl	80016cc <MoveGhosts>
        MX_USB_HOST_Process();
 80020b0:	f00c fd08 	bl	800eac4 <MX_USB_HOST_Process>
        HAL_Delay(600);
 80020b4:	f44f 7016 	mov.w	r0, #600	; 0x258
 80020b8:	f002 fc56 	bl	8004968 <HAL_Delay>
    while(GetGameState()==RUN){
 80020bc:	f7ff fa60 	bl	8001580 <GetGameState>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0ec      	beq.n	80020a0 <play+0xc>
    }
    BoardDraw();
 80020c6:	f7ff fe95 	bl	8001df4 <BoardDraw>
    if(GetGameState()==WIN){
 80020ca:	f7ff fa59 	bl	8001580 <GetGameState>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d114      	bne.n	80020fe <play+0x6a>
        printf("Brawo wygrales\n");
 80020d4:	4819      	ldr	r0, [pc, #100]	; (800213c <play+0xa8>)
 80020d6:	f00d f8f9 	bl	800f2cc <puts>
        printf("Wpisz cokolwiek, aby zagrac ponownie\n");
 80020da:	4819      	ldr	r0, [pc, #100]	; (8002140 <play+0xac>)
 80020dc:	f00d f8f6 	bl	800f2cc <puts>
        printf("Wpisz x, zeby zakonczyc\n");
 80020e0:	4818      	ldr	r0, [pc, #96]	; (8002144 <play+0xb0>)
 80020e2:	f00d f8f3 	bl	800f2cc <puts>
        char c=' ';
 80020e6:	2320      	movs	r3, #32
 80020e8:	71fb      	strb	r3, [r7, #7]
        scanf("%c", &c);
 80020ea:	1dfb      	adds	r3, r7, #7
 80020ec:	4619      	mov	r1, r3
 80020ee:	4816      	ldr	r0, [pc, #88]	; (8002148 <play+0xb4>)
 80020f0:	f00d f8f4 	bl	800f2dc <iscanf>
        if(c=='x')
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	2b78      	cmp	r3, #120	; 0x78
 80020f8:	d101      	bne.n	80020fe <play+0x6a>
            play();
 80020fa:	f7ff ffcb 	bl	8002094 <play>
    }
    if(GetGameState()==LOSE){
 80020fe:	f7ff fa3f 	bl	8001580 <GetGameState>
 8002102:	4603      	mov	r3, r0
 8002104:	2b01      	cmp	r3, #1
 8002106:	d114      	bne.n	8002132 <play+0x9e>
        printf("Niestety przegrales\n");
 8002108:	4810      	ldr	r0, [pc, #64]	; (800214c <play+0xb8>)
 800210a:	f00d f8df 	bl	800f2cc <puts>
        printf("Wpisz cokolwiek, aby zagrac ponownie\n");
 800210e:	480c      	ldr	r0, [pc, #48]	; (8002140 <play+0xac>)
 8002110:	f00d f8dc 	bl	800f2cc <puts>
        printf("Wpisz x, zeby zakonczyc\n");
 8002114:	480b      	ldr	r0, [pc, #44]	; (8002144 <play+0xb0>)
 8002116:	f00d f8d9 	bl	800f2cc <puts>
        char c=' ';
 800211a:	2320      	movs	r3, #32
 800211c:	71bb      	strb	r3, [r7, #6]
        scanf("%c", &c);
 800211e:	1dbb      	adds	r3, r7, #6
 8002120:	4619      	mov	r1, r3
 8002122:	4809      	ldr	r0, [pc, #36]	; (8002148 <play+0xb4>)
 8002124:	f00d f8da 	bl	800f2dc <iscanf>
        if(c=='x')
 8002128:	79bb      	ldrb	r3, [r7, #6]
 800212a:	2b78      	cmp	r3, #120	; 0x78
 800212c:	d101      	bne.n	8002132 <play+0x9e>
            play();
 800212e:	f7ff ffb1 	bl	8002094 <play>
    }
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	080110b4 	.word	0x080110b4
 8002140:	080110c4 	.word	0x080110c4
 8002144:	080110ec 	.word	0x080110ec
 8002148:	08011104 	.word	0x08011104
 800214c:	08011108 	.word	0x08011108

08002150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002150:	b590      	push	{r4, r7, lr}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	srand(time(0));
 8002156:	2000      	movs	r0, #0
 8002158:	f00d f9b2 	bl	800f4c0 <time>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4613      	mov	r3, r2
 8002162:	4618      	mov	r0, r3
 8002164:	f00c ff16 	bl	800ef94 <srand>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002168:	f002 fbbc 	bl	80048e4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800216c:	f000 f8b8 	bl	80022e0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  BSP_LED_Init(LED3);
 8002170:	2000      	movs	r0, #0
 8002172:	f001 f9af 	bl	80034d4 <BSP_LED_Init>
  L3GD20_Init(InitZyro);
 8002176:	4b55      	ldr	r3, [pc, #340]	; (80022cc <main+0x17c>)
 8002178:	881b      	ldrh	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f000 fe57 	bl	8002e2e <L3GD20_Init>
//  TS_StateTypeDef TS_State;
//  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002180:	f7fe fdc4 	bl	8000d0c <MX_GPIO_Init>
  MX_CRC_Init();
 8002184:	f7fe fc46 	bl	8000a14 <MX_CRC_Init>
  MX_DMA2D_Init();
 8002188:	f7fe fc7a 	bl	8000a80 <MX_DMA2D_Init>
  MX_FMC_Init();
 800218c:	f7fe fcd2 	bl	8000b34 <MX_FMC_Init>
  MX_I2C3_Init();
 8002190:	f7fe fecc 	bl	8000f2c <MX_I2C3_Init>
  MX_LTDC_Init();
 8002194:	f7fe ff9a 	bl	80010cc <MX_LTDC_Init>
  MX_SPI5_Init();
 8002198:	f000 f924 	bl	80023e4 <MX_SPI5_Init>
  MX_TIM1_Init();
 800219c:	f000 fb98 	bl	80028d0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80021a0:	f000 fc08 	bl	80029b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  	BSP_LCD_Init();
 80021a4:	f001 fe36 	bl	8003e14 <BSP_LCD_Init>
  	adxl_init();
 80021a8:	f7ff f9d6 	bl	8001558 <adxl_init>
  	// ili9341_Init();

    BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER, LCD_FRAME_BUFFER);
 80021ac:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80021b0:	2000      	movs	r0, #0
 80021b2:	f001 feb1 	bl	8003f18 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 80021b6:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80021ba:	2001      	movs	r0, #1
 80021bc:	f001 feac 	bl	8003f18 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_SelectLayer(1);
 80021c0:	2001      	movs	r0, #1
 80021c2:	f001 ff0d 	bl	8003fe0 <BSP_LCD_SelectLayer>
    BSP_LCD_DisplayOn();
 80021c6:	f001 ff5d 	bl	8004084 <BSP_LCD_DisplayOn>
    TS_StateTypeDef TS_State;
    BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80021ca:	f001 fe8d 	bl	8003ee8 <BSP_LCD_GetXSize>
 80021ce:	4603      	mov	r3, r0
 80021d0:	b29c      	uxth	r4, r3
 80021d2:	f001 fe95 	bl	8003f00 <BSP_LCD_GetYSize>
 80021d6:	4603      	mov	r3, r0
 80021d8:	b29b      	uxth	r3, r3
 80021da:	4619      	mov	r1, r3
 80021dc:	4620      	mov	r0, r4
 80021de:	f002 fa95 	bl	800470c <BSP_TS_Init>
 //     BSP_LCD_SetFont(&LCD_DEFAULT_FONT); // Ustawienie domyślnej czcionki
 //     BSP_LCD_SetTextColor(LCD_COLOR_BLUE); // Ustawienie koloru tekstu
 //     BSP_LCD_DisplayStringAt(0, 200, (uint8_t *)"Pac Man!", CENTER_MODE);
 //   BSP_LCD_DrawBitmap_RGB565(ruchx, ruchy, (uint8_t *)PacManicon, szerokosc, wysokosc);

    uint16_t screenWidth = BSP_LCD_GetXSize();
 80021e2:	f001 fe81 	bl	8003ee8 <BSP_LCD_GetXSize>
 80021e6:	4603      	mov	r3, r0
 80021e8:	81fb      	strh	r3, [r7, #14]
    uint16_t screenHeight = BSP_LCD_GetYSize();
 80021ea:	f001 fe89 	bl	8003f00 <BSP_LCD_GetYSize>
 80021ee:	4603      	mov	r3, r0
 80021f0:	81bb      	strh	r3, [r7, #12]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    adxl_read(0x32, 6);
 80021f2:	2106      	movs	r1, #6
 80021f4:	2032      	movs	r0, #50	; 0x32
 80021f6:	f7ff f977 	bl	80014e8 <adxl_read>
    first_acc_x = (data_rec[1]<<8 | data_rec[0]);
 80021fa:	4b35      	ldr	r3, [pc, #212]	; (80022d0 <main+0x180>)
 80021fc:	785b      	ldrb	r3, [r3, #1]
 80021fe:	021b      	lsls	r3, r3, #8
 8002200:	b21a      	sxth	r2, r3
 8002202:	4b33      	ldr	r3, [pc, #204]	; (80022d0 <main+0x180>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	b21b      	sxth	r3, r3
 8002208:	4313      	orrs	r3, r2
 800220a:	b21a      	sxth	r2, r3
 800220c:	4b31      	ldr	r3, [pc, #196]	; (80022d4 <main+0x184>)
 800220e:	801a      	strh	r2, [r3, #0]
    first_acc_y = (data_rec[3]<<8 | data_rec[2]);
 8002210:	4b2f      	ldr	r3, [pc, #188]	; (80022d0 <main+0x180>)
 8002212:	78db      	ldrb	r3, [r3, #3]
 8002214:	021b      	lsls	r3, r3, #8
 8002216:	b21a      	sxth	r2, r3
 8002218:	4b2d      	ldr	r3, [pc, #180]	; (80022d0 <main+0x180>)
 800221a:	789b      	ldrb	r3, [r3, #2]
 800221c:	b21b      	sxth	r3, r3
 800221e:	4313      	orrs	r3, r2
 8002220:	b21a      	sxth	r2, r3
 8002222:	4b2d      	ldr	r3, [pc, #180]	; (80022d8 <main+0x188>)
 8002224:	801a      	strh	r2, [r3, #0]
    //play();
    BSP_LCD_Clear(LCD_COLOR_BLUE);
 8002226:	482d      	ldr	r0, [pc, #180]	; (80022dc <main+0x18c>)
 8002228:	f001 ff04 	bl	8004034 <BSP_LCD_Clear>
  while (1)
  {
      // Odczytanie stanu dotyku
      BSP_TS_GetState(&TS_State);
 800222c:	463b      	mov	r3, r7
 800222e:	4618      	mov	r0, r3
 8002230:	f002 faa6 	bl	8004780 <BSP_TS_GetState>
      if (TS_State.TouchDetected) {
 8002234:	883b      	ldrh	r3, [r7, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d044      	beq.n	80022c4 <main+0x174>
          // Współrzędne dotyku
          uint16_t x = TS_State.touchX;
 800223a:	887b      	ldrh	r3, [r7, #2]
 800223c:	817b      	strh	r3, [r7, #10]
          uint16_t y = TS_State.touchY;
 800223e:	88bb      	ldrh	r3, [r7, #4]
 8002240:	813b      	strh	r3, [r7, #8]

          // Sprawdzenie, która część ekranu została dotknięta i wywołanie odpowiedniej funkcji
          if (y < screenHeight / 4) {
 8002242:	89bb      	ldrh	r3, [r7, #12]
 8002244:	089b      	lsrs	r3, r3, #2
 8002246:	b29b      	uxth	r3, r3
 8002248:	893a      	ldrh	r2, [r7, #8]
 800224a:	429a      	cmp	r2, r3
 800224c:	d204      	bcs.n	8002258 <main+0x108>
              // Górna część
        	  BoardInit1();
 800224e:	f7ff fd6d 	bl	8001d2c <BoardInit1>
              play();
 8002252:	f7ff ff1f 	bl	8002094 <play>
 8002256:	e035      	b.n	80022c4 <main+0x174>
          } else if (y >= screenHeight / 4 && y < screenHeight / 2) {
 8002258:	89bb      	ldrh	r3, [r7, #12]
 800225a:	089b      	lsrs	r3, r3, #2
 800225c:	b29b      	uxth	r3, r3
 800225e:	893a      	ldrh	r2, [r7, #8]
 8002260:	429a      	cmp	r2, r3
 8002262:	d30a      	bcc.n	800227a <main+0x12a>
 8002264:	89bb      	ldrh	r3, [r7, #12]
 8002266:	085b      	lsrs	r3, r3, #1
 8002268:	b29b      	uxth	r3, r3
 800226a:	893a      	ldrh	r2, [r7, #8]
 800226c:	429a      	cmp	r2, r3
 800226e:	d204      	bcs.n	800227a <main+0x12a>
              // Druga część
        	  BoardInit2();
 8002270:	f7ff fd68 	bl	8001d44 <BoardInit2>
              play();
 8002274:	f7ff ff0e 	bl	8002094 <play>
 8002278:	e024      	b.n	80022c4 <main+0x174>
          } else if (y >= screenHeight / 2 && y < 3 * screenHeight / 4) {
 800227a:	89bb      	ldrh	r3, [r7, #12]
 800227c:	085b      	lsrs	r3, r3, #1
 800227e:	b29b      	uxth	r3, r3
 8002280:	893a      	ldrh	r2, [r7, #8]
 8002282:	429a      	cmp	r2, r3
 8002284:	d30f      	bcc.n	80022a6 <main+0x156>
 8002286:	8939      	ldrh	r1, [r7, #8]
 8002288:	89ba      	ldrh	r2, [r7, #12]
 800228a:	4613      	mov	r3, r2
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	4413      	add	r3, r2
 8002290:	2b00      	cmp	r3, #0
 8002292:	da00      	bge.n	8002296 <main+0x146>
 8002294:	3303      	adds	r3, #3
 8002296:	109b      	asrs	r3, r3, #2
 8002298:	4299      	cmp	r1, r3
 800229a:	da04      	bge.n	80022a6 <main+0x156>
              // Trzecia część
        	  BoardInit3();
 800229c:	f7ff fd5e 	bl	8001d5c <BoardInit3>
              play();
 80022a0:	f7ff fef8 	bl	8002094 <play>
 80022a4:	e00e      	b.n	80022c4 <main+0x174>
          } else if (y >= 3 * screenHeight / 4) {
 80022a6:	8939      	ldrh	r1, [r7, #8]
 80022a8:	89ba      	ldrh	r2, [r7, #12]
 80022aa:	4613      	mov	r3, r2
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	4413      	add	r3, r2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	da00      	bge.n	80022b6 <main+0x166>
 80022b4:	3303      	adds	r3, #3
 80022b6:	109b      	asrs	r3, r3, #2
 80022b8:	4299      	cmp	r1, r3
 80022ba:	db03      	blt.n	80022c4 <main+0x174>
              // Dolna część
        	  BoardInit4();
 80022bc:	f7ff fd5c 	bl	8001d78 <BoardInit4>
              play();
 80022c0:	f7ff fee8 	bl	8002094 <play>
          }
      }
      HAL_Delay(100);
 80022c4:	2064      	movs	r0, #100	; 0x64
 80022c6:	f002 fb4f 	bl	8004968 <HAL_Delay>
      BSP_TS_GetState(&TS_State);
 80022ca:	e7af      	b.n	800222c <main+0xdc>
 80022cc:	20002bc0 	.word	0x20002bc0
 80022d0:	200034d0 	.word	0x200034d0
 80022d4:	200034cc 	.word	0x200034cc
 80022d8:	200034ce 	.word	0x200034ce
 80022dc:	ff0000ff 	.word	0xff0000ff

080022e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b094      	sub	sp, #80	; 0x50
 80022e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022e6:	f107 0320 	add.w	r3, r7, #32
 80022ea:	2230      	movs	r2, #48	; 0x30
 80022ec:	2100      	movs	r1, #0
 80022ee:	4618      	mov	r0, r3
 80022f0:	f00d f8de 	bl	800f4b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022f4:	f107 030c 	add.w	r3, r7, #12
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]
 8002302:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002304:	2300      	movs	r3, #0
 8002306:	60bb      	str	r3, [r7, #8]
 8002308:	4b28      	ldr	r3, [pc, #160]	; (80023ac <SystemClock_Config+0xcc>)
 800230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230c:	4a27      	ldr	r2, [pc, #156]	; (80023ac <SystemClock_Config+0xcc>)
 800230e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002312:	6413      	str	r3, [r2, #64]	; 0x40
 8002314:	4b25      	ldr	r3, [pc, #148]	; (80023ac <SystemClock_Config+0xcc>)
 8002316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002320:	2300      	movs	r3, #0
 8002322:	607b      	str	r3, [r7, #4]
 8002324:	4b22      	ldr	r3, [pc, #136]	; (80023b0 <SystemClock_Config+0xd0>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800232c:	4a20      	ldr	r2, [pc, #128]	; (80023b0 <SystemClock_Config+0xd0>)
 800232e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	4b1e      	ldr	r3, [pc, #120]	; (80023b0 <SystemClock_Config+0xd0>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800233c:	607b      	str	r3, [r7, #4]
 800233e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002340:	2301      	movs	r3, #1
 8002342:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002344:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800234a:	2302      	movs	r3, #2
 800234c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800234e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002352:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002354:	2304      	movs	r3, #4
 8002356:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002358:	2348      	movs	r3, #72	; 0x48
 800235a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800235c:	2302      	movs	r3, #2
 800235e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002360:	2303      	movs	r3, #3
 8002362:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002364:	f107 0320 	add.w	r3, r7, #32
 8002368:	4618      	mov	r0, r3
 800236a:	f007 facd 	bl	8009908 <HAL_RCC_OscConfig>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002374:	f000 f830 	bl	80023d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002378:	230f      	movs	r3, #15
 800237a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800237c:	2302      	movs	r3, #2
 800237e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002388:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800238e:	f107 030c 	add.w	r3, r7, #12
 8002392:	2102      	movs	r1, #2
 8002394:	4618      	mov	r0, r3
 8002396:	f007 fd2f 	bl	8009df8 <HAL_RCC_ClockConfig>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80023a0:	f000 f81a 	bl	80023d8 <Error_Handler>
  }
}
 80023a4:	bf00      	nop
 80023a6:	3750      	adds	r7, #80	; 0x50
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40007000 	.word	0x40007000

080023b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a04      	ldr	r2, [pc, #16]	; (80023d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d101      	bne.n	80023ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80023c6:	f002 faaf 	bl	8004928 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40001000 	.word	0x40001000

080023d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023dc:	b672      	cpsid	i
}
 80023de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023e0:	e7fe      	b.n	80023e0 <Error_Handler+0x8>
	...

080023e4 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80023e8:	4b17      	ldr	r3, [pc, #92]	; (8002448 <MX_SPI5_Init+0x64>)
 80023ea:	4a18      	ldr	r2, [pc, #96]	; (800244c <MX_SPI5_Init+0x68>)
 80023ec:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80023ee:	4b16      	ldr	r3, [pc, #88]	; (8002448 <MX_SPI5_Init+0x64>)
 80023f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023f4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80023f6:	4b14      	ldr	r3, [pc, #80]	; (8002448 <MX_SPI5_Init+0x64>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80023fc:	4b12      	ldr	r3, [pc, #72]	; (8002448 <MX_SPI5_Init+0x64>)
 80023fe:	2200      	movs	r2, #0
 8002400:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002402:	4b11      	ldr	r3, [pc, #68]	; (8002448 <MX_SPI5_Init+0x64>)
 8002404:	2200      	movs	r2, #0
 8002406:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002408:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <MX_SPI5_Init+0x64>)
 800240a:	2200      	movs	r2, #0
 800240c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800240e:	4b0e      	ldr	r3, [pc, #56]	; (8002448 <MX_SPI5_Init+0x64>)
 8002410:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002414:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002416:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <MX_SPI5_Init+0x64>)
 8002418:	2218      	movs	r2, #24
 800241a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800241c:	4b0a      	ldr	r3, [pc, #40]	; (8002448 <MX_SPI5_Init+0x64>)
 800241e:	2200      	movs	r2, #0
 8002420:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002422:	4b09      	ldr	r3, [pc, #36]	; (8002448 <MX_SPI5_Init+0x64>)
 8002424:	2200      	movs	r2, #0
 8002426:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002428:	4b07      	ldr	r3, [pc, #28]	; (8002448 <MX_SPI5_Init+0x64>)
 800242a:	2200      	movs	r2, #0
 800242c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800242e:	4b06      	ldr	r3, [pc, #24]	; (8002448 <MX_SPI5_Init+0x64>)
 8002430:	220a      	movs	r2, #10
 8002432:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002434:	4804      	ldr	r0, [pc, #16]	; (8002448 <MX_SPI5_Init+0x64>)
 8002436:	f008 f982 	bl	800a73e <HAL_SPI_Init>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002440:	f7ff ffca 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002444:	bf00      	nop
 8002446:	bd80      	pop	{r7, pc}
 8002448:	200037e8 	.word	0x200037e8
 800244c:	40015000 	.word	0x40015000

08002450 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b08a      	sub	sp, #40	; 0x28
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002458:	f107 0314 	add.w	r3, r7, #20
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	60da      	str	r2, [r3, #12]
 8002466:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a19      	ldr	r2, [pc, #100]	; (80024d4 <HAL_SPI_MspInit+0x84>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d12c      	bne.n	80024cc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	613b      	str	r3, [r7, #16]
 8002476:	4b18      	ldr	r3, [pc, #96]	; (80024d8 <HAL_SPI_MspInit+0x88>)
 8002478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247a:	4a17      	ldr	r2, [pc, #92]	; (80024d8 <HAL_SPI_MspInit+0x88>)
 800247c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002480:	6453      	str	r3, [r2, #68]	; 0x44
 8002482:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <HAL_SPI_MspInit+0x88>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <HAL_SPI_MspInit+0x88>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	4a10      	ldr	r2, [pc, #64]	; (80024d8 <HAL_SPI_MspInit+0x88>)
 8002498:	f043 0320 	orr.w	r3, r3, #32
 800249c:	6313      	str	r3, [r2, #48]	; 0x30
 800249e:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <HAL_SPI_MspInit+0x88>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	f003 0320 	and.w	r3, r3, #32
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80024aa:	f44f 7360 	mov.w	r3, #896	; 0x380
 80024ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b0:	2302      	movs	r3, #2
 80024b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b8:	2300      	movs	r3, #0
 80024ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80024bc:	2305      	movs	r3, #5
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024c0:	f107 0314 	add.w	r3, r7, #20
 80024c4:	4619      	mov	r1, r3
 80024c6:	4805      	ldr	r0, [pc, #20]	; (80024dc <HAL_SPI_MspInit+0x8c>)
 80024c8:	f003 f8ca 	bl	8005660 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80024cc:	bf00      	nop
 80024ce:	3728      	adds	r7, #40	; 0x28
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40015000 	.word	0x40015000
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40021400 	.word	0x40021400

080024e0 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a08      	ldr	r2, [pc, #32]	; (8002510 <HAL_SPI_MspDeInit+0x30>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d10a      	bne.n	8002508 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80024f2:	4b08      	ldr	r3, [pc, #32]	; (8002514 <HAL_SPI_MspDeInit+0x34>)
 80024f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f6:	4a07      	ldr	r2, [pc, #28]	; (8002514 <HAL_SPI_MspDeInit+0x34>)
 80024f8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80024fc:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80024fe:	f44f 7160 	mov.w	r1, #896	; 0x380
 8002502:	4805      	ldr	r0, [pc, #20]	; (8002518 <HAL_SPI_MspDeInit+0x38>)
 8002504:	f003 fa58 	bl	80059b8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 8002508:	bf00      	nop
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40015000 	.word	0x40015000
 8002514:	40023800 	.word	0x40023800
 8002518:	40021400 	.word	0x40021400

0800251c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	607b      	str	r3, [r7, #4]
 8002526:	4b10      	ldr	r3, [pc, #64]	; (8002568 <HAL_MspInit+0x4c>)
 8002528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252a:	4a0f      	ldr	r2, [pc, #60]	; (8002568 <HAL_MspInit+0x4c>)
 800252c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002530:	6453      	str	r3, [r2, #68]	; 0x44
 8002532:	4b0d      	ldr	r3, [pc, #52]	; (8002568 <HAL_MspInit+0x4c>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800253a:	607b      	str	r3, [r7, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	603b      	str	r3, [r7, #0]
 8002542:	4b09      	ldr	r3, [pc, #36]	; (8002568 <HAL_MspInit+0x4c>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	4a08      	ldr	r2, [pc, #32]	; (8002568 <HAL_MspInit+0x4c>)
 8002548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800254c:	6413      	str	r3, [r2, #64]	; 0x40
 800254e:	4b06      	ldr	r3, [pc, #24]	; (8002568 <HAL_MspInit+0x4c>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002556:	603b      	str	r3, [r7, #0]
 8002558:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40023800 	.word	0x40023800

0800256c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08e      	sub	sp, #56	; 0x38
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002578:	2300      	movs	r3, #0
 800257a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	4b33      	ldr	r3, [pc, #204]	; (8002650 <HAL_InitTick+0xe4>)
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	4a32      	ldr	r2, [pc, #200]	; (8002650 <HAL_InitTick+0xe4>)
 8002586:	f043 0310 	orr.w	r3, r3, #16
 800258a:	6413      	str	r3, [r2, #64]	; 0x40
 800258c:	4b30      	ldr	r3, [pc, #192]	; (8002650 <HAL_InitTick+0xe4>)
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	f003 0310 	and.w	r3, r3, #16
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002598:	f107 0210 	add.w	r2, r7, #16
 800259c:	f107 0314 	add.w	r3, r7, #20
 80025a0:	4611      	mov	r1, r2
 80025a2:	4618      	mov	r0, r3
 80025a4:	f007 fe48 	bl	800a238 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80025ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d103      	bne.n	80025ba <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80025b2:	f007 fe19 	bl	800a1e8 <HAL_RCC_GetPCLK1Freq>
 80025b6:	6378      	str	r0, [r7, #52]	; 0x34
 80025b8:	e004      	b.n	80025c4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80025ba:	f007 fe15 	bl	800a1e8 <HAL_RCC_GetPCLK1Freq>
 80025be:	4603      	mov	r3, r0
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80025c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c6:	4a23      	ldr	r2, [pc, #140]	; (8002654 <HAL_InitTick+0xe8>)
 80025c8:	fba2 2303 	umull	r2, r3, r2, r3
 80025cc:	0c9b      	lsrs	r3, r3, #18
 80025ce:	3b01      	subs	r3, #1
 80025d0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80025d2:	4b21      	ldr	r3, [pc, #132]	; (8002658 <HAL_InitTick+0xec>)
 80025d4:	4a21      	ldr	r2, [pc, #132]	; (800265c <HAL_InitTick+0xf0>)
 80025d6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80025d8:	4b1f      	ldr	r3, [pc, #124]	; (8002658 <HAL_InitTick+0xec>)
 80025da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025de:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80025e0:	4a1d      	ldr	r2, [pc, #116]	; (8002658 <HAL_InitTick+0xec>)
 80025e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80025e6:	4b1c      	ldr	r3, [pc, #112]	; (8002658 <HAL_InitTick+0xec>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ec:	4b1a      	ldr	r3, [pc, #104]	; (8002658 <HAL_InitTick+0xec>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f2:	4b19      	ldr	r3, [pc, #100]	; (8002658 <HAL_InitTick+0xec>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80025f8:	4817      	ldr	r0, [pc, #92]	; (8002658 <HAL_InitTick+0xec>)
 80025fa:	f008 fead 	bl	800b358 <HAL_TIM_Base_Init>
 80025fe:	4603      	mov	r3, r0
 8002600:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002604:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002608:	2b00      	cmp	r3, #0
 800260a:	d11b      	bne.n	8002644 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800260c:	4812      	ldr	r0, [pc, #72]	; (8002658 <HAL_InitTick+0xec>)
 800260e:	f008 fef3 	bl	800b3f8 <HAL_TIM_Base_Start_IT>
 8002612:	4603      	mov	r3, r0
 8002614:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002618:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800261c:	2b00      	cmp	r3, #0
 800261e:	d111      	bne.n	8002644 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002620:	2036      	movs	r0, #54	; 0x36
 8002622:	f002 fa99 	bl	8004b58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b0f      	cmp	r3, #15
 800262a:	d808      	bhi.n	800263e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800262c:	2200      	movs	r2, #0
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	2036      	movs	r0, #54	; 0x36
 8002632:	f002 fa75 	bl	8004b20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002636:	4a0a      	ldr	r2, [pc, #40]	; (8002660 <HAL_InitTick+0xf4>)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6013      	str	r3, [r2, #0]
 800263c:	e002      	b.n	8002644 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002644:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002648:	4618      	mov	r0, r3
 800264a:	3738      	adds	r7, #56	; 0x38
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40023800 	.word	0x40023800
 8002654:	431bde83 	.word	0x431bde83
 8002658:	20003840 	.word	0x20003840
 800265c:	40001000 	.word	0x40001000
 8002660:	20002c78 	.word	0x20002c78

08002664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002668:	e7fe      	b.n	8002668 <NMI_Handler+0x4>

0800266a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800266a:	b480      	push	{r7}
 800266c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800266e:	e7fe      	b.n	800266e <HardFault_Handler+0x4>

08002670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002674:	e7fe      	b.n	8002674 <MemManage_Handler+0x4>

08002676 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002676:	b480      	push	{r7}
 8002678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800267a:	e7fe      	b.n	800267a <BusFault_Handler+0x4>

0800267c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002680:	e7fe      	b.n	8002680 <UsageFault_Handler+0x4>

08002682 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002682:	b480      	push	{r7}
 8002684:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800269e:	b480      	push	{r7}
 80026a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026b0:	bf00      	nop
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
	...

080026bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80026c0:	4802      	ldr	r0, [pc, #8]	; (80026cc <TIM6_DAC_IRQHandler+0x10>)
 80026c2:	f008 ff09 	bl	800b4d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20003840 	.word	0x20003840

080026d0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80026d4:	4802      	ldr	r0, [pc, #8]	; (80026e0 <OTG_HS_IRQHandler+0x10>)
 80026d6:	f003 fceb 	bl	80060b0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20003fc8 	.word	0x20003fc8

080026e4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80026e8:	4802      	ldr	r0, [pc, #8]	; (80026f4 <LTDC_IRQHandler+0x10>)
 80026ea:	f006 fe43 	bl	8009374 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20002dcc 	.word	0x20002dcc

080026f8 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC global error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80026fc:	4802      	ldr	r0, [pc, #8]	; (8002708 <LTDC_ER_IRQHandler+0x10>)
 80026fe:	f006 fe39 	bl	8009374 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20002dcc 	.word	0x20002dcc

0800270c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002710:	4802      	ldr	r0, [pc, #8]	; (800271c <DMA2D_IRQHandler+0x10>)
 8002712:	f002 fd66 	bl	80051e2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	20002d00 	.word	0x20002d00

08002720 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  return 1;
 8002724:	2301      	movs	r3, #1
}
 8002726:	4618      	mov	r0, r3
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <_kill>:

int _kill(int pid, int sig)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800273a:	f00c ff43 	bl	800f5c4 <__errno>
 800273e:	4603      	mov	r3, r0
 8002740:	2216      	movs	r2, #22
 8002742:	601a      	str	r2, [r3, #0]
  return -1;
 8002744:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002748:	4618      	mov	r0, r3
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <_exit>:

void _exit (int status)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002758:	f04f 31ff 	mov.w	r1, #4294967295
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7ff ffe7 	bl	8002730 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002762:	e7fe      	b.n	8002762 <_exit+0x12>

08002764 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002770:	2300      	movs	r3, #0
 8002772:	617b      	str	r3, [r7, #20]
 8002774:	e00a      	b.n	800278c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002776:	f3af 8000 	nop.w
 800277a:	4601      	mov	r1, r0
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	1c5a      	adds	r2, r3, #1
 8002780:	60ba      	str	r2, [r7, #8]
 8002782:	b2ca      	uxtb	r2, r1
 8002784:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	3301      	adds	r3, #1
 800278a:	617b      	str	r3, [r7, #20]
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	429a      	cmp	r2, r3
 8002792:	dbf0      	blt.n	8002776 <_read+0x12>
  }

  return len;
 8002794:	687b      	ldr	r3, [r7, #4]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b086      	sub	sp, #24
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	60f8      	str	r0, [r7, #12]
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	e009      	b.n	80027c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	60ba      	str	r2, [r7, #8]
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	3301      	adds	r3, #1
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	dbf1      	blt.n	80027b0 <_write+0x12>
  }
  return len;
 80027cc:	687b      	ldr	r3, [r7, #4]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <_close>:

int _close(int file)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027fe:	605a      	str	r2, [r3, #4]
  return 0;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <_isatty>:

int _isatty(int file)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002816:	2301      	movs	r3, #1
}
 8002818:	4618      	mov	r0, r3
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
	...

08002840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002848:	4a14      	ldr	r2, [pc, #80]	; (800289c <_sbrk+0x5c>)
 800284a:	4b15      	ldr	r3, [pc, #84]	; (80028a0 <_sbrk+0x60>)
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002854:	4b13      	ldr	r3, [pc, #76]	; (80028a4 <_sbrk+0x64>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d102      	bne.n	8002862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800285c:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <_sbrk+0x64>)
 800285e:	4a12      	ldr	r2, [pc, #72]	; (80028a8 <_sbrk+0x68>)
 8002860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002862:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <_sbrk+0x64>)
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4413      	add	r3, r2
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	429a      	cmp	r2, r3
 800286e:	d207      	bcs.n	8002880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002870:	f00c fea8 	bl	800f5c4 <__errno>
 8002874:	4603      	mov	r3, r0
 8002876:	220c      	movs	r2, #12
 8002878:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800287a:	f04f 33ff 	mov.w	r3, #4294967295
 800287e:	e009      	b.n	8002894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002880:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <_sbrk+0x64>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002886:	4b07      	ldr	r3, [pc, #28]	; (80028a4 <_sbrk+0x64>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4413      	add	r3, r2
 800288e:	4a05      	ldr	r2, [pc, #20]	; (80028a4 <_sbrk+0x64>)
 8002890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002892:	68fb      	ldr	r3, [r7, #12]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	20030000 	.word	0x20030000
 80028a0:	00000400 	.word	0x00000400
 80028a4:	20003888 	.word	0x20003888
 80028a8:	200044f8 	.word	0x200044f8

080028ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028b0:	4b06      	ldr	r3, [pc, #24]	; (80028cc <SystemInit+0x20>)
 80028b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b6:	4a05      	ldr	r2, [pc, #20]	; (80028cc <SystemInit+0x20>)
 80028b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028c0:	bf00      	nop
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	e000ed00 	.word	0xe000ed00

080028d0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028d6:	f107 0308 	add.w	r3, r7, #8
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	605a      	str	r2, [r3, #4]
 80028e0:	609a      	str	r2, [r3, #8]
 80028e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028e4:	463b      	mov	r3, r7
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80028ec:	4b1e      	ldr	r3, [pc, #120]	; (8002968 <MX_TIM1_Init+0x98>)
 80028ee:	4a1f      	ldr	r2, [pc, #124]	; (800296c <MX_TIM1_Init+0x9c>)
 80028f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80028f2:	4b1d      	ldr	r3, [pc, #116]	; (8002968 <MX_TIM1_Init+0x98>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028f8:	4b1b      	ldr	r3, [pc, #108]	; (8002968 <MX_TIM1_Init+0x98>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80028fe:	4b1a      	ldr	r3, [pc, #104]	; (8002968 <MX_TIM1_Init+0x98>)
 8002900:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002904:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002906:	4b18      	ldr	r3, [pc, #96]	; (8002968 <MX_TIM1_Init+0x98>)
 8002908:	2200      	movs	r2, #0
 800290a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800290c:	4b16      	ldr	r3, [pc, #88]	; (8002968 <MX_TIM1_Init+0x98>)
 800290e:	2200      	movs	r2, #0
 8002910:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002912:	4b15      	ldr	r3, [pc, #84]	; (8002968 <MX_TIM1_Init+0x98>)
 8002914:	2200      	movs	r2, #0
 8002916:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002918:	4813      	ldr	r0, [pc, #76]	; (8002968 <MX_TIM1_Init+0x98>)
 800291a:	f008 fd1d 	bl	800b358 <HAL_TIM_Base_Init>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002924:	f7ff fd58 	bl	80023d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800292c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800292e:	f107 0308 	add.w	r3, r7, #8
 8002932:	4619      	mov	r1, r3
 8002934:	480c      	ldr	r0, [pc, #48]	; (8002968 <MX_TIM1_Init+0x98>)
 8002936:	f008 febf 	bl	800b6b8 <HAL_TIM_ConfigClockSource>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002940:	f7ff fd4a 	bl	80023d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002944:	2300      	movs	r3, #0
 8002946:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002948:	2300      	movs	r3, #0
 800294a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800294c:	463b      	mov	r3, r7
 800294e:	4619      	mov	r1, r3
 8002950:	4805      	ldr	r0, [pc, #20]	; (8002968 <MX_TIM1_Init+0x98>)
 8002952:	f009 f8e7 	bl	800bb24 <HAL_TIMEx_MasterConfigSynchronization>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800295c:	f7ff fd3c 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002960:	bf00      	nop
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	2000388c 	.word	0x2000388c
 800296c:	40010000 	.word	0x40010000

08002970 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a0b      	ldr	r2, [pc, #44]	; (80029ac <HAL_TIM_Base_MspInit+0x3c>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d10d      	bne.n	800299e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <HAL_TIM_Base_MspInit+0x40>)
 8002988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298a:	4a09      	ldr	r2, [pc, #36]	; (80029b0 <HAL_TIM_Base_MspInit+0x40>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	6453      	str	r3, [r2, #68]	; 0x44
 8002992:	4b07      	ldr	r3, [pc, #28]	; (80029b0 <HAL_TIM_Base_MspInit+0x40>)
 8002994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800299e:	bf00      	nop
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	40010000 	.word	0x40010000
 80029b0:	40023800 	.word	0x40023800

080029b4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80029b8:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <MX_USART1_UART_Init+0x4c>)
 80029ba:	4a12      	ldr	r2, [pc, #72]	; (8002a04 <MX_USART1_UART_Init+0x50>)
 80029bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80029be:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <MX_USART1_UART_Init+0x4c>)
 80029c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029c6:	4b0e      	ldr	r3, [pc, #56]	; (8002a00 <MX_USART1_UART_Init+0x4c>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029cc:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <MX_USART1_UART_Init+0x4c>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029d2:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <MX_USART1_UART_Init+0x4c>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029d8:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <MX_USART1_UART_Init+0x4c>)
 80029da:	220c      	movs	r2, #12
 80029dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029de:	4b08      	ldr	r3, [pc, #32]	; (8002a00 <MX_USART1_UART_Init+0x4c>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029e4:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <MX_USART1_UART_Init+0x4c>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029ea:	4805      	ldr	r0, [pc, #20]	; (8002a00 <MX_USART1_UART_Init+0x4c>)
 80029ec:	f009 f92a 	bl	800bc44 <HAL_UART_Init>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80029f6:	f7ff fcef 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	200038d4 	.word	0x200038d4
 8002a04:	40011000 	.word	0x40011000

08002a08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08a      	sub	sp, #40	; 0x28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a10:	f107 0314 	add.w	r3, r7, #20
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	609a      	str	r2, [r3, #8]
 8002a1c:	60da      	str	r2, [r3, #12]
 8002a1e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a19      	ldr	r2, [pc, #100]	; (8002a8c <HAL_UART_MspInit+0x84>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d12c      	bne.n	8002a84 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	613b      	str	r3, [r7, #16]
 8002a2e:	4b18      	ldr	r3, [pc, #96]	; (8002a90 <HAL_UART_MspInit+0x88>)
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	4a17      	ldr	r2, [pc, #92]	; (8002a90 <HAL_UART_MspInit+0x88>)
 8002a34:	f043 0310 	orr.w	r3, r3, #16
 8002a38:	6453      	str	r3, [r2, #68]	; 0x44
 8002a3a:	4b15      	ldr	r3, [pc, #84]	; (8002a90 <HAL_UART_MspInit+0x88>)
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3e:	f003 0310 	and.w	r3, r3, #16
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	4b11      	ldr	r3, [pc, #68]	; (8002a90 <HAL_UART_MspInit+0x88>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	4a10      	ldr	r2, [pc, #64]	; (8002a90 <HAL_UART_MspInit+0x88>)
 8002a50:	f043 0301 	orr.w	r3, r3, #1
 8002a54:	6313      	str	r3, [r2, #48]	; 0x30
 8002a56:	4b0e      	ldr	r3, [pc, #56]	; (8002a90 <HAL_UART_MspInit+0x88>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002a62:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a70:	2303      	movs	r3, #3
 8002a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a74:	2307      	movs	r3, #7
 8002a76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a78:	f107 0314 	add.w	r3, r7, #20
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4805      	ldr	r0, [pc, #20]	; (8002a94 <HAL_UART_MspInit+0x8c>)
 8002a80:	f002 fdee 	bl	8005660 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002a84:	bf00      	nop
 8002a86:	3728      	adds	r7, #40	; 0x28
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40011000 	.word	0x40011000
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40020000 	.word	0x40020000

08002a98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002a98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ad0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a9c:	f7ff ff06 	bl	80028ac <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002aa0:	480c      	ldr	r0, [pc, #48]	; (8002ad4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002aa2:	490d      	ldr	r1, [pc, #52]	; (8002ad8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002aa4:	4a0d      	ldr	r2, [pc, #52]	; (8002adc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002aa8:	e002      	b.n	8002ab0 <LoopCopyDataInit>

08002aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aae:	3304      	adds	r3, #4

08002ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ab4:	d3f9      	bcc.n	8002aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ab6:	4a0a      	ldr	r2, [pc, #40]	; (8002ae0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ab8:	4c0a      	ldr	r4, [pc, #40]	; (8002ae4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002abc:	e001      	b.n	8002ac2 <LoopFillZerobss>

08002abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ac0:	3204      	adds	r2, #4

08002ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ac4:	d3fb      	bcc.n	8002abe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002ac6:	f00c fd83 	bl	800f5d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aca:	f7ff fb41 	bl	8002150 <main>
  bx  lr    
 8002ace:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002ad0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ad8:	20002cdc 	.word	0x20002cdc
  ldr r2, =_sidata
 8002adc:	08012e10 	.word	0x08012e10
  ldr r2, =_sbss
 8002ae0:	20002cdc 	.word	0x20002cdc
  ldr r4, =_ebss
 8002ae4:	200044f4 	.word	0x200044f4

08002ae8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ae8:	e7fe      	b.n	8002ae8 <ADC_IRQHandler>

08002aea <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002aee:	f000 ff8b 	bl	8003a08 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8002af2:	20ca      	movs	r0, #202	; 0xca
 8002af4:	f000 f95d 	bl	8002db2 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8002af8:	20c3      	movs	r0, #195	; 0xc3
 8002afa:	f000 f967 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8002afe:	2008      	movs	r0, #8
 8002b00:	f000 f964 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8002b04:	2050      	movs	r0, #80	; 0x50
 8002b06:	f000 f961 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8002b0a:	20cf      	movs	r0, #207	; 0xcf
 8002b0c:	f000 f951 	bl	8002db2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002b10:	2000      	movs	r0, #0
 8002b12:	f000 f95b 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8002b16:	20c1      	movs	r0, #193	; 0xc1
 8002b18:	f000 f958 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8002b1c:	2030      	movs	r0, #48	; 0x30
 8002b1e:	f000 f955 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8002b22:	20ed      	movs	r0, #237	; 0xed
 8002b24:	f000 f945 	bl	8002db2 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8002b28:	2064      	movs	r0, #100	; 0x64
 8002b2a:	f000 f94f 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8002b2e:	2003      	movs	r0, #3
 8002b30:	f000 f94c 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8002b34:	2012      	movs	r0, #18
 8002b36:	f000 f949 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8002b3a:	2081      	movs	r0, #129	; 0x81
 8002b3c:	f000 f946 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8002b40:	20e8      	movs	r0, #232	; 0xe8
 8002b42:	f000 f936 	bl	8002db2 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8002b46:	2085      	movs	r0, #133	; 0x85
 8002b48:	f000 f940 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	f000 f93d 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002b52:	2078      	movs	r0, #120	; 0x78
 8002b54:	f000 f93a 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8002b58:	20cb      	movs	r0, #203	; 0xcb
 8002b5a:	f000 f92a 	bl	8002db2 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8002b5e:	2039      	movs	r0, #57	; 0x39
 8002b60:	f000 f934 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002b64:	202c      	movs	r0, #44	; 0x2c
 8002b66:	f000 f931 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002b6a:	2000      	movs	r0, #0
 8002b6c:	f000 f92e 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8002b70:	2034      	movs	r0, #52	; 0x34
 8002b72:	f000 f92b 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8002b76:	2002      	movs	r0, #2
 8002b78:	f000 f928 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002b7c:	20f7      	movs	r0, #247	; 0xf7
 8002b7e:	f000 f918 	bl	8002db2 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8002b82:	2020      	movs	r0, #32
 8002b84:	f000 f922 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8002b88:	20ea      	movs	r0, #234	; 0xea
 8002b8a:	f000 f912 	bl	8002db2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002b8e:	2000      	movs	r0, #0
 8002b90:	f000 f91c 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002b94:	2000      	movs	r0, #0
 8002b96:	f000 f919 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002b9a:	20b1      	movs	r0, #177	; 0xb1
 8002b9c:	f000 f909 	bl	8002db2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	f000 f913 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002ba6:	201b      	movs	r0, #27
 8002ba8:	f000 f910 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002bac:	20b6      	movs	r0, #182	; 0xb6
 8002bae:	f000 f900 	bl	8002db2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002bb2:	200a      	movs	r0, #10
 8002bb4:	f000 f90a 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002bb8:	20a2      	movs	r0, #162	; 0xa2
 8002bba:	f000 f907 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8002bbe:	20c0      	movs	r0, #192	; 0xc0
 8002bc0:	f000 f8f7 	bl	8002db2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002bc4:	2010      	movs	r0, #16
 8002bc6:	f000 f901 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8002bca:	20c1      	movs	r0, #193	; 0xc1
 8002bcc:	f000 f8f1 	bl	8002db2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002bd0:	2010      	movs	r0, #16
 8002bd2:	f000 f8fb 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8002bd6:	20c5      	movs	r0, #197	; 0xc5
 8002bd8:	f000 f8eb 	bl	8002db2 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002bdc:	2045      	movs	r0, #69	; 0x45
 8002bde:	f000 f8f5 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8002be2:	2015      	movs	r0, #21
 8002be4:	f000 f8f2 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002be8:	20c7      	movs	r0, #199	; 0xc7
 8002bea:	f000 f8e2 	bl	8002db2 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8002bee:	2090      	movs	r0, #144	; 0x90
 8002bf0:	f000 f8ec 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002bf4:	2036      	movs	r0, #54	; 0x36
 8002bf6:	f000 f8dc 	bl	8002db2 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8002bfa:	20c8      	movs	r0, #200	; 0xc8
 8002bfc:	f000 f8e6 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8002c00:	20f2      	movs	r0, #242	; 0xf2
 8002c02:	f000 f8d6 	bl	8002db2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002c06:	2000      	movs	r0, #0
 8002c08:	f000 f8e0 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8002c0c:	20b0      	movs	r0, #176	; 0xb0
 8002c0e:	f000 f8d0 	bl	8002db2 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8002c12:	20c2      	movs	r0, #194	; 0xc2
 8002c14:	f000 f8da 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002c18:	20b6      	movs	r0, #182	; 0xb6
 8002c1a:	f000 f8ca 	bl	8002db2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002c1e:	200a      	movs	r0, #10
 8002c20:	f000 f8d4 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8002c24:	20a7      	movs	r0, #167	; 0xa7
 8002c26:	f000 f8d1 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8002c2a:	2027      	movs	r0, #39	; 0x27
 8002c2c:	f000 f8ce 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002c30:	2004      	movs	r0, #4
 8002c32:	f000 f8cb 	bl	8002dcc <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8002c36:	202a      	movs	r0, #42	; 0x2a
 8002c38:	f000 f8bb 	bl	8002db2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	f000 f8c5 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002c42:	2000      	movs	r0, #0
 8002c44:	f000 f8c2 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002c48:	2000      	movs	r0, #0
 8002c4a:	f000 f8bf 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8002c4e:	20ef      	movs	r0, #239	; 0xef
 8002c50:	f000 f8bc 	bl	8002dcc <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8002c54:	202b      	movs	r0, #43	; 0x2b
 8002c56:	f000 f8ac 	bl	8002db2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	f000 f8b6 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002c60:	2000      	movs	r0, #0
 8002c62:	f000 f8b3 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8002c66:	2001      	movs	r0, #1
 8002c68:	f000 f8b0 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002c6c:	203f      	movs	r0, #63	; 0x3f
 8002c6e:	f000 f8ad 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8002c72:	20f6      	movs	r0, #246	; 0xf6
 8002c74:	f000 f89d 	bl	8002db2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002c78:	2001      	movs	r0, #1
 8002c7a:	f000 f8a7 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002c7e:	2000      	movs	r0, #0
 8002c80:	f000 f8a4 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8002c84:	2006      	movs	r0, #6
 8002c86:	f000 f8a1 	bl	8002dcc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8002c8a:	202c      	movs	r0, #44	; 0x2c
 8002c8c:	f000 f891 	bl	8002db2 <ili9341_WriteReg>
  LCD_Delay(200);
 8002c90:	20c8      	movs	r0, #200	; 0xc8
 8002c92:	f000 ffa7 	bl	8003be4 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8002c96:	2026      	movs	r0, #38	; 0x26
 8002c98:	f000 f88b 	bl	8002db2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002c9c:	2001      	movs	r0, #1
 8002c9e:	f000 f895 	bl	8002dcc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8002ca2:	20e0      	movs	r0, #224	; 0xe0
 8002ca4:	f000 f885 	bl	8002db2 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002ca8:	200f      	movs	r0, #15
 8002caa:	f000 f88f 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8002cae:	2029      	movs	r0, #41	; 0x29
 8002cb0:	f000 f88c 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8002cb4:	2024      	movs	r0, #36	; 0x24
 8002cb6:	f000 f889 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002cba:	200c      	movs	r0, #12
 8002cbc:	f000 f886 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8002cc0:	200e      	movs	r0, #14
 8002cc2:	f000 f883 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002cc6:	2009      	movs	r0, #9
 8002cc8:	f000 f880 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8002ccc:	204e      	movs	r0, #78	; 0x4e
 8002cce:	f000 f87d 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002cd2:	2078      	movs	r0, #120	; 0x78
 8002cd4:	f000 f87a 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002cd8:	203c      	movs	r0, #60	; 0x3c
 8002cda:	f000 f877 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002cde:	2009      	movs	r0, #9
 8002ce0:	f000 f874 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002ce4:	2013      	movs	r0, #19
 8002ce6:	f000 f871 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002cea:	2005      	movs	r0, #5
 8002cec:	f000 f86e 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8002cf0:	2017      	movs	r0, #23
 8002cf2:	f000 f86b 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002cf6:	2011      	movs	r0, #17
 8002cf8:	f000 f868 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	f000 f865 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8002d02:	20e1      	movs	r0, #225	; 0xe1
 8002d04:	f000 f855 	bl	8002db2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002d08:	2000      	movs	r0, #0
 8002d0a:	f000 f85f 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8002d0e:	2016      	movs	r0, #22
 8002d10:	f000 f85c 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002d14:	201b      	movs	r0, #27
 8002d16:	f000 f859 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002d1a:	2004      	movs	r0, #4
 8002d1c:	f000 f856 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002d20:	2011      	movs	r0, #17
 8002d22:	f000 f853 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8002d26:	2007      	movs	r0, #7
 8002d28:	f000 f850 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8002d2c:	2031      	movs	r0, #49	; 0x31
 8002d2e:	f000 f84d 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8002d32:	2033      	movs	r0, #51	; 0x33
 8002d34:	f000 f84a 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8002d38:	2042      	movs	r0, #66	; 0x42
 8002d3a:	f000 f847 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002d3e:	2005      	movs	r0, #5
 8002d40:	f000 f844 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002d44:	200c      	movs	r0, #12
 8002d46:	f000 f841 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8002d4a:	200a      	movs	r0, #10
 8002d4c:	f000 f83e 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8002d50:	2028      	movs	r0, #40	; 0x28
 8002d52:	f000 f83b 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8002d56:	202f      	movs	r0, #47	; 0x2f
 8002d58:	f000 f838 	bl	8002dcc <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8002d5c:	200f      	movs	r0, #15
 8002d5e:	f000 f835 	bl	8002dcc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8002d62:	2011      	movs	r0, #17
 8002d64:	f000 f825 	bl	8002db2 <ili9341_WriteReg>
  LCD_Delay(200);
 8002d68:	20c8      	movs	r0, #200	; 0xc8
 8002d6a:	f000 ff3b 	bl	8003be4 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002d6e:	2029      	movs	r0, #41	; 0x29
 8002d70:	f000 f81f 	bl	8002db2 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8002d74:	202c      	movs	r0, #44	; 0x2c
 8002d76:	f000 f81c 	bl	8002db2 <ili9341_WriteReg>
}
 8002d7a:	bf00      	nop
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8002d82:	f000 fe41 	bl	8003a08 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8002d86:	2103      	movs	r1, #3
 8002d88:	20d3      	movs	r0, #211	; 0xd3
 8002d8a:	f000 f82c 	bl	8002de6 <ili9341_ReadData>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	b29b      	uxth	r3, r3
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002d9a:	2029      	movs	r0, #41	; 0x29
 8002d9c:	f000 f809 	bl	8002db2 <ili9341_WriteReg>
}
 8002da0:	bf00      	nop
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8002da8:	2028      	movs	r0, #40	; 0x28
 8002daa:	f000 f802 	bl	8002db2 <ili9341_WriteReg>
}
 8002dae:	bf00      	nop
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b082      	sub	sp, #8
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	4603      	mov	r3, r0
 8002dba:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002dbc:	79fb      	ldrb	r3, [r7, #7]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 febc 	bl	8003b3c <LCD_IO_WriteReg>
}
 8002dc4:	bf00      	nop
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002dd6:	88fb      	ldrh	r3, [r7, #6]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 fe8d 	bl	8003af8 <LCD_IO_WriteData>
}
 8002dde:	bf00      	nop
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	4603      	mov	r3, r0
 8002dee:	460a      	mov	r2, r1
 8002df0:	80fb      	strh	r3, [r7, #6]
 8002df2:	4613      	mov	r3, r2
 8002df4:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8002df6:	797a      	ldrb	r2, [r7, #5]
 8002df8:	88fb      	ldrh	r3, [r7, #6]
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 febf 	bl	8003b80 <LCD_IO_ReadData>
 8002e02:	4603      	mov	r3, r0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8002e10:	23f0      	movs	r3, #240	; 0xf0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8002e20:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b084      	sub	sp, #16
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	4603      	mov	r3, r0
 8002e36:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8002e3c:	f000 ff32 	bl	8003ca4 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8002e40:	88fb      	ldrh	r3, [r7, #6]
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8002e46:	f107 030f 	add.w	r3, r7, #15
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	2120      	movs	r1, #32
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 ff74 	bl	8003d3c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8002e54:	88fb      	ldrh	r3, [r7, #6]
 8002e56:	0a1b      	lsrs	r3, r3, #8
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8002e5e:	f107 030f 	add.w	r3, r7, #15
 8002e62:	2201      	movs	r2, #1
 8002e64:	2123      	movs	r1, #35	; 0x23
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 ff68 	bl	8003d3c <GYRO_IO_Write>
}
 8002e6c:	bf00      	nop
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b08a      	sub	sp, #40	; 0x28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	61bb      	str	r3, [r7, #24]
 8002e80:	2300      	movs	r3, #0
 8002e82:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8002e84:	f107 0310 	add.w	r3, r7, #16
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8002e9c:	f107 030f 	add.w	r3, r7, #15
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	2123      	movs	r1, #35	; 0x23
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f000 ff7b 	bl	8003da0 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8002eaa:	f107 0318 	add.w	r3, r7, #24
 8002eae:	2206      	movs	r2, #6
 8002eb0:	2128      	movs	r1, #40	; 0x28
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 ff74 	bl	8003da0 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
 8002eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d123      	bne.n	8002f0a <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	623b      	str	r3, [r7, #32]
 8002ec6:	e01c      	b.n	8002f02 <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	3301      	adds	r3, #1
 8002ece:	3328      	adds	r3, #40	; 0x28
 8002ed0:	443b      	add	r3, r7
 8002ed2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	021b      	lsls	r3, r3, #8
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	3328      	adds	r3, #40	; 0x28
 8002ee2:	443b      	add	r3, r7
 8002ee4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	4413      	add	r3, r2
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	b21a      	sxth	r2, r3
 8002ef0:	6a3b      	ldr	r3, [r7, #32]
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	3328      	adds	r3, #40	; 0x28
 8002ef6:	443b      	add	r3, r7
 8002ef8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8002efc:	6a3b      	ldr	r3, [r7, #32]
 8002efe:	3301      	adds	r3, #1
 8002f00:	623b      	str	r3, [r7, #32]
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	dddf      	ble.n	8002ec8 <L3GD20_ReadXYZAngRate+0x54>
 8002f08:	e022      	b.n	8002f50 <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	623b      	str	r3, [r7, #32]
 8002f0e:	e01c      	b.n	8002f4a <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	3328      	adds	r3, #40	; 0x28
 8002f16:	443b      	add	r3, r7
 8002f18:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	021b      	lsls	r3, r3, #8
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	3301      	adds	r3, #1
 8002f28:	3328      	adds	r3, #40	; 0x28
 8002f2a:	443b      	add	r3, r7
 8002f2c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	4413      	add	r3, r2
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	b21a      	sxth	r2, r3
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	3328      	adds	r3, #40	; 0x28
 8002f3e:	443b      	add	r3, r7
 8002f40:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8002f44:	6a3b      	ldr	r3, [r7, #32]
 8002f46:	3301      	adds	r3, #1
 8002f48:	623b      	str	r3, [r7, #32]
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	dddf      	ble.n	8002f10 <L3GD20_ReadXYZAngRate+0x9c>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
 8002f52:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f56:	2b20      	cmp	r3, #32
 8002f58:	d00c      	beq.n	8002f74 <L3GD20_ReadXYZAngRate+0x100>
 8002f5a:	2b20      	cmp	r3, #32
 8002f5c:	dc0d      	bgt.n	8002f7a <L3GD20_ReadXYZAngRate+0x106>
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d002      	beq.n	8002f68 <L3GD20_ReadXYZAngRate+0xf4>
 8002f62:	2b10      	cmp	r3, #16
 8002f64:	d003      	beq.n	8002f6e <L3GD20_ReadXYZAngRate+0xfa>
 8002f66:	e008      	b.n	8002f7a <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8002f68:	4b15      	ldr	r3, [pc, #84]	; (8002fc0 <L3GD20_ReadXYZAngRate+0x14c>)
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8002f6c:	e005      	b.n	8002f7a <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8002f6e:	4b15      	ldr	r3, [pc, #84]	; (8002fc4 <L3GD20_ReadXYZAngRate+0x150>)
 8002f70:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8002f72:	e002      	b.n	8002f7a <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8002f74:	4b14      	ldr	r3, [pc, #80]	; (8002fc8 <L3GD20_ReadXYZAngRate+0x154>)
 8002f76:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8002f78:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	623b      	str	r3, [r7, #32]
 8002f7e:	e016      	b.n	8002fae <L3GD20_ReadXYZAngRate+0x13a>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8002f80:	6a3b      	ldr	r3, [r7, #32]
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	3328      	adds	r3, #40	; 0x28
 8002f86:	443b      	add	r3, r7
 8002f88:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8002f8c:	ee07 3a90 	vmov	s15, r3
 8002f90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002fa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fa4:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	3301      	adds	r3, #1
 8002fac:	623b      	str	r3, [r7, #32]
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	dde5      	ble.n	8002f80 <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 8002fb4:	bf00      	nop
 8002fb6:	bf00      	nop
 8002fb8:	3728      	adds	r7, #40	; 0x28
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	410c0000 	.word	0x410c0000
 8002fc4:	418c0000 	.word	0x418c0000
 8002fc8:	428c0000 	.word	0x428c0000

08002fcc <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8002fd6:	88fb      	ldrh	r3, [r7, #6]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 fa59 	bl	8003490 <stmpe811_GetInstance>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
 8002fe4:	2bff      	cmp	r3, #255	; 0xff
 8002fe6:	d112      	bne.n	800300e <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8002fe8:	2000      	movs	r0, #0
 8002fea:	f000 fa51 	bl	8003490 <stmpe811_GetInstance>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8002ff2:	7bbb      	ldrb	r3, [r7, #14]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d80a      	bhi.n	800300e <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8002ff8:	7bbb      	ldrb	r3, [r7, #14]
 8002ffa:	88fa      	ldrh	r2, [r7, #6]
 8002ffc:	b2d1      	uxtb	r1, r2
 8002ffe:	4a06      	ldr	r2, [pc, #24]	; (8003018 <stmpe811_Init+0x4c>)
 8003000:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8003002:	f000 fdfa 	bl	8003bfa <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8003006:	88fb      	ldrh	r3, [r7, #6]
 8003008:	4618      	mov	r0, r3
 800300a:	f000 f807 	bl	800301c <stmpe811_Reset>
    }
  }
}
 800300e:	bf00      	nop
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	2000391c 	.word	0x2000391c

0800301c <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8003026:	88fb      	ldrh	r3, [r7, #6]
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2202      	movs	r2, #2
 800302c:	2103      	movs	r1, #3
 800302e:	4618      	mov	r0, r3
 8003030:	f000 fdef 	bl	8003c12 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8003034:	200a      	movs	r0, #10
 8003036:	f000 fe29 	bl	8003c8c <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 800303a:	88fb      	ldrh	r3, [r7, #6]
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2200      	movs	r2, #0
 8003040:	2103      	movs	r1, #3
 8003042:	4618      	mov	r0, r3
 8003044:	f000 fde5 	bl	8003c12 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8003048:	2002      	movs	r0, #2
 800304a:	f000 fe1f 	bl	8003c8c <IOE_Delay>
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8003056:	b590      	push	{r4, r7, lr}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	4603      	mov	r3, r0
 800305e:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8003060:	f000 fdcb 	bl	8003bfa <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8003064:	88fb      	ldrh	r3, [r7, #6]
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2100      	movs	r1, #0
 800306a:	4618      	mov	r0, r3
 800306c:	f000 fde4 	bl	8003c38 <IOE_Read>
 8003070:	4603      	mov	r3, r0
 8003072:	021b      	lsls	r3, r3, #8
 8003074:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8003076:	88fb      	ldrh	r3, [r7, #6]
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2101      	movs	r1, #1
 800307c:	4618      	mov	r0, r3
 800307e:	f000 fddb 	bl	8003c38 <IOE_Read>
 8003082:	4603      	mov	r3, r0
 8003084:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8003086:	4323      	orrs	r3, r4
 8003088:	b21b      	sxth	r3, r3
 800308a:	b29b      	uxth	r3, r3
}
 800308c:	4618      	mov	r0, r3
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	bd90      	pop	{r4, r7, pc}

08003094 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	4603      	mov	r3, r0
 800309c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800309e:	2300      	movs	r3, #0
 80030a0:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80030a2:	88fb      	ldrh	r3, [r7, #6]
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2109      	movs	r1, #9
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fdc5 	bl	8003c38 <IOE_Read>
 80030ae:	4603      	mov	r3, r0
 80030b0:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
 80030b4:	f043 0301 	orr.w	r3, r3, #1
 80030b8:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80030ba:	88fb      	ldrh	r3, [r7, #6]
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	7bfa      	ldrb	r2, [r7, #15]
 80030c0:	2109      	movs	r1, #9
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 fda5 	bl	8003c12 <IOE_Write>
}
 80030c8:	bf00      	nop
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80030da:	2300      	movs	r3, #0
 80030dc:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80030de:	88fb      	ldrh	r3, [r7, #6]
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2109      	movs	r1, #9
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 fda7 	bl	8003c38 <IOE_Read>
 80030ea:	4603      	mov	r3, r0
 80030ec:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
 80030f0:	f023 0301 	bic.w	r3, r3, #1
 80030f4:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 80030f6:	88fb      	ldrh	r3, [r7, #6]
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	7bfa      	ldrb	r2, [r7, #15]
 80030fc:	2109      	movs	r1, #9
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 fd87 	bl	8003c12 <IOE_Write>
    
}
 8003104:	bf00      	nop
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	4603      	mov	r3, r0
 8003114:	460a      	mov	r2, r1
 8003116:	80fb      	strh	r3, [r7, #6]
 8003118:	4613      	mov	r3, r2
 800311a:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800311c:	2300      	movs	r3, #0
 800311e:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8003120:	88fb      	ldrh	r3, [r7, #6]
 8003122:	b2db      	uxtb	r3, r3
 8003124:	210a      	movs	r1, #10
 8003126:	4618      	mov	r0, r3
 8003128:	f000 fd86 	bl	8003c38 <IOE_Read>
 800312c:	4603      	mov	r3, r0
 800312e:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8003130:	7bfa      	ldrb	r2, [r7, #15]
 8003132:	797b      	ldrb	r3, [r7, #5]
 8003134:	4313      	orrs	r3, r2
 8003136:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8003138:	88fb      	ldrh	r3, [r7, #6]
 800313a:	b2db      	uxtb	r3, r3
 800313c:	7bfa      	ldrb	r2, [r7, #15]
 800313e:	210a      	movs	r1, #10
 8003140:	4618      	mov	r0, r3
 8003142:	f000 fd66 	bl	8003c12 <IOE_Write>
}
 8003146:	bf00      	nop
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b084      	sub	sp, #16
 8003152:	af00      	add	r7, sp, #0
 8003154:	4603      	mov	r3, r0
 8003156:	460a      	mov	r2, r1
 8003158:	80fb      	strh	r3, [r7, #6]
 800315a:	4613      	mov	r3, r2
 800315c:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800315e:	2300      	movs	r3, #0
 8003160:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8003162:	88fb      	ldrh	r3, [r7, #6]
 8003164:	b2db      	uxtb	r3, r3
 8003166:	210a      	movs	r1, #10
 8003168:	4618      	mov	r0, r3
 800316a:	f000 fd65 	bl	8003c38 <IOE_Read>
 800316e:	4603      	mov	r3, r0
 8003170:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8003172:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003176:	43db      	mvns	r3, r3
 8003178:	b25a      	sxtb	r2, r3
 800317a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800317e:	4013      	ands	r3, r2
 8003180:	b25b      	sxtb	r3, r3
 8003182:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8003184:	88fb      	ldrh	r3, [r7, #6]
 8003186:	b2db      	uxtb	r3, r3
 8003188:	7bfa      	ldrb	r2, [r7, #15]
 800318a:	210a      	movs	r1, #10
 800318c:	4618      	mov	r0, r3
 800318e:	f000 fd40 	bl	8003c12 <IOE_Write>
}
 8003192:	bf00      	nop
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b082      	sub	sp, #8
 800319e:	af00      	add	r7, sp, #0
 80031a0:	4603      	mov	r3, r0
 80031a2:	460a      	mov	r2, r1
 80031a4:	80fb      	strh	r3, [r7, #6]
 80031a6:	4613      	mov	r3, r2
 80031a8:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	210b      	movs	r1, #11
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 fd41 	bl	8003c38 <IOE_Read>
 80031b6:	4603      	mov	r3, r0
 80031b8:	461a      	mov	r2, r3
 80031ba:	797b      	ldrb	r3, [r7, #5]
 80031bc:	4013      	ands	r3, r2
 80031be:	b2db      	uxtb	r3, r3
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	460a      	mov	r2, r1
 80031d2:	80fb      	strh	r3, [r7, #6]
 80031d4:	4613      	mov	r3, r2
 80031d6:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 80031d8:	88fb      	ldrh	r3, [r7, #6]
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	797a      	ldrb	r2, [r7, #5]
 80031de:	210b      	movs	r1, #11
 80031e0:	4618      	mov	r0, r3
 80031e2:	f000 fd16 	bl	8003c12 <IOE_Write>
}
 80031e6:	bf00      	nop
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b084      	sub	sp, #16
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	4603      	mov	r3, r0
 80031f6:	6039      	str	r1, [r7, #0]
 80031f8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80031fa:	2300      	movs	r3, #0
 80031fc:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 80031fe:	88fb      	ldrh	r3, [r7, #6]
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2117      	movs	r1, #23
 8003204:	4618      	mov	r0, r3
 8003206:	f000 fd17 	bl	8003c38 <IOE_Read>
 800320a:	4603      	mov	r3, r0
 800320c:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	b25b      	sxtb	r3, r3
 8003212:	43db      	mvns	r3, r3
 8003214:	b25a      	sxtb	r2, r3
 8003216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800321a:	4013      	ands	r3, r2
 800321c:	b25b      	sxtb	r3, r3
 800321e:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8003220:	88fb      	ldrh	r3, [r7, #6]
 8003222:	b2db      	uxtb	r3, r3
 8003224:	7bfa      	ldrb	r2, [r7, #15]
 8003226:	2117      	movs	r1, #23
 8003228:	4618      	mov	r0, r3
 800322a:	f000 fcf2 	bl	8003c12 <IOE_Write>
}
 800322e:	bf00      	nop
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b084      	sub	sp, #16
 800323a:	af00      	add	r7, sp, #0
 800323c:	4603      	mov	r3, r0
 800323e:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8003240:	88fb      	ldrh	r3, [r7, #6]
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2104      	movs	r1, #4
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fcf6 	bl	8003c38 <IOE_Read>
 800324c:	4603      	mov	r3, r0
 800324e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8003250:	7bfb      	ldrb	r3, [r7, #15]
 8003252:	f023 0304 	bic.w	r3, r3, #4
 8003256:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8003258:	88fb      	ldrh	r3, [r7, #6]
 800325a:	b2db      	uxtb	r3, r3
 800325c:	7bfa      	ldrb	r2, [r7, #15]
 800325e:	2104      	movs	r1, #4
 8003260:	4618      	mov	r0, r3
 8003262:	f000 fcd6 	bl	8003c12 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8003266:	88fb      	ldrh	r3, [r7, #6]
 8003268:	21f0      	movs	r1, #240	; 0xf0
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff ffbf 	bl	80031ee <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8003270:	7bfb      	ldrb	r3, [r7, #15]
 8003272:	f023 0303 	bic.w	r3, r3, #3
 8003276:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8003278:	88fb      	ldrh	r3, [r7, #6]
 800327a:	b2db      	uxtb	r3, r3
 800327c:	7bfa      	ldrb	r2, [r7, #15]
 800327e:	2104      	movs	r1, #4
 8003280:	4618      	mov	r0, r3
 8003282:	f000 fcc6 	bl	8003c12 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8003286:	88fb      	ldrh	r3, [r7, #6]
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2249      	movs	r2, #73	; 0x49
 800328c:	2120      	movs	r1, #32
 800328e:	4618      	mov	r0, r3
 8003290:	f000 fcbf 	bl	8003c12 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8003294:	2002      	movs	r0, #2
 8003296:	f000 fcf9 	bl	8003c8c <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 800329a:	88fb      	ldrh	r3, [r7, #6]
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2201      	movs	r2, #1
 80032a0:	2121      	movs	r1, #33	; 0x21
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 fcb5 	bl	8003c12 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 80032a8:	88fb      	ldrh	r3, [r7, #6]
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	229a      	movs	r2, #154	; 0x9a
 80032ae:	2141      	movs	r1, #65	; 0x41
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 fcae 	bl	8003c12 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 80032b6:	88fb      	ldrh	r3, [r7, #6]
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2201      	movs	r2, #1
 80032bc:	214a      	movs	r1, #74	; 0x4a
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 fca7 	bl	8003c12 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80032c4:	88fb      	ldrh	r3, [r7, #6]
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2201      	movs	r2, #1
 80032ca:	214b      	movs	r1, #75	; 0x4b
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 fca0 	bl	8003c12 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80032d2:	88fb      	ldrh	r3, [r7, #6]
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2200      	movs	r2, #0
 80032d8:	214b      	movs	r1, #75	; 0x4b
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 fc99 	bl	8003c12 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 80032e0:	88fb      	ldrh	r3, [r7, #6]
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2201      	movs	r2, #1
 80032e6:	2156      	movs	r1, #86	; 0x56
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 fc92 	bl	8003c12 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 80032ee:	88fb      	ldrh	r3, [r7, #6]
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2201      	movs	r2, #1
 80032f4:	2158      	movs	r1, #88	; 0x58
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fc8b 	bl	8003c12 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 80032fc:	88fb      	ldrh	r3, [r7, #6]
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2201      	movs	r2, #1
 8003302:	2140      	movs	r1, #64	; 0x40
 8003304:	4618      	mov	r0, r3
 8003306:	f000 fc84 	bl	8003c12 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 800330a:	88fb      	ldrh	r3, [r7, #6]
 800330c:	b2db      	uxtb	r3, r3
 800330e:	22ff      	movs	r2, #255	; 0xff
 8003310:	210b      	movs	r1, #11
 8003312:	4618      	mov	r0, r3
 8003314:	f000 fc7d 	bl	8003c12 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8003318:	2002      	movs	r0, #2
 800331a:	f000 fcb7 	bl	8003c8c <IOE_Delay>
}
 800331e:	bf00      	nop
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b084      	sub	sp, #16
 800332a:	af00      	add	r7, sp, #0
 800332c:	4603      	mov	r3, r0
 800332e:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8003330:	2300      	movs	r3, #0
 8003332:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)STMPE811_TS_CTRL_STATUS);
 8003334:	88fb      	ldrh	r3, [r7, #6]
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2140      	movs	r1, #64	; 0x40
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fc7c 	bl	8003c38 <IOE_Read>
 8003340:	4603      	mov	r3, r0
 8003342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003346:	2b80      	cmp	r3, #128	; 0x80
 8003348:	bf0c      	ite	eq
 800334a:	2301      	moveq	r3, #1
 800334c:	2300      	movne	r3, #0
 800334e:	b2db      	uxtb	r3, r3
 8003350:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8003352:	7bbb      	ldrb	r3, [r7, #14]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00b      	beq.n	8003370 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8003358:	88fb      	ldrh	r3, [r7, #6]
 800335a:	b2db      	uxtb	r3, r3
 800335c:	214c      	movs	r1, #76	; 0x4c
 800335e:	4618      	mov	r0, r3
 8003360:	f000 fc6a 	bl	8003c38 <IOE_Read>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d010      	beq.n	800338c <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 800336a:	2301      	movs	r3, #1
 800336c:	73fb      	strb	r3, [r7, #15]
 800336e:	e00d      	b.n	800338c <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003370:	88fb      	ldrh	r3, [r7, #6]
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2201      	movs	r2, #1
 8003376:	214b      	movs	r1, #75	; 0x4b
 8003378:	4618      	mov	r0, r3
 800337a:	f000 fc4a 	bl	8003c12 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800337e:	88fb      	ldrh	r3, [r7, #6]
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2200      	movs	r2, #0
 8003384:	214b      	movs	r1, #75	; 0x4b
 8003386:	4618      	mov	r0, r3
 8003388:	f000 fc43 	bl	8003c12 <IOE_Write>
  }
  
  return ret;
 800338c:	7bfb      	ldrb	r3, [r7, #15]
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b086      	sub	sp, #24
 800339a:	af00      	add	r7, sp, #0
 800339c:	4603      	mov	r3, r0
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	607a      	str	r2, [r7, #4]
 80033a2:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 80033a4:	89fb      	ldrh	r3, [r7, #14]
 80033a6:	b2d8      	uxtb	r0, r3
 80033a8:	f107 0210 	add.w	r2, r7, #16
 80033ac:	2304      	movs	r3, #4
 80033ae:	21d7      	movs	r1, #215	; 0xd7
 80033b0:	f000 fc55 	bl	8003c5e <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 80033b4:	7c3b      	ldrb	r3, [r7, #16]
 80033b6:	061a      	lsls	r2, r3, #24
 80033b8:	7c7b      	ldrb	r3, [r7, #17]
 80033ba:	041b      	lsls	r3, r3, #16
 80033bc:	431a      	orrs	r2, r3
 80033be:	7cbb      	ldrb	r3, [r7, #18]
 80033c0:	021b      	lsls	r3, r3, #8
 80033c2:	4313      	orrs	r3, r2
 80033c4:	7cfa      	ldrb	r2, [r7, #19]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	0d1b      	lsrs	r3, r3, #20
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	0a1b      	lsrs	r3, r3, #8
 80033d8:	b29b      	uxth	r3, r3
 80033da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033de:	b29a      	uxth	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80033e4:	89fb      	ldrh	r3, [r7, #14]
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2201      	movs	r2, #1
 80033ea:	214b      	movs	r1, #75	; 0x4b
 80033ec:	4618      	mov	r0, r3
 80033ee:	f000 fc10 	bl	8003c12 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80033f2:	89fb      	ldrh	r3, [r7, #14]
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2200      	movs	r2, #0
 80033f8:	214b      	movs	r1, #75	; 0x4b
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 fc09 	bl	8003c12 <IOE_Write>
}
 8003400:	bf00      	nop
 8003402:	3718      	adds	r7, #24
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8003412:	f000 fbf8 	bl	8003c06 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8003416:	88fb      	ldrh	r3, [r7, #6]
 8003418:	211f      	movs	r1, #31
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff fe76 	bl	800310c <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8003420:	88fb      	ldrh	r3, [r7, #6]
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff fe36 	bl	8003094 <stmpe811_EnableGlobalIT>
}
 8003428:	bf00      	nop
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	4603      	mov	r3, r0
 8003438:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 800343a:	88fb      	ldrh	r3, [r7, #6]
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff fe47 	bl	80030d0 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8003442:	88fb      	ldrh	r3, [r7, #6]
 8003444:	211f      	movs	r1, #31
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff fe81 	bl	800314e <stmpe811_DisableITSource>
}
 800344c:	bf00      	nop
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	4603      	mov	r3, r0
 800345c:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 800345e:	88fb      	ldrh	r3, [r7, #6]
 8003460:	211f      	movs	r1, #31
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff fe99 	bl	800319a <stmpe811_ReadGITStatus>
 8003468:	4603      	mov	r3, r0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b082      	sub	sp, #8
 8003476:	af00      	add	r7, sp, #0
 8003478:	4603      	mov	r3, r0
 800347a:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 800347c:	88fb      	ldrh	r3, [r7, #6]
 800347e:	211f      	movs	r1, #31
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff fea1 	bl	80031c8 <stmpe811_ClearGlobalIT>
}
 8003486:	bf00      	nop
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
	...

08003490 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 800349a:	2300      	movs	r3, #0
 800349c:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800349e:	2300      	movs	r3, #0
 80034a0:	73fb      	strb	r3, [r7, #15]
 80034a2:	e00b      	b.n	80034bc <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
 80034a6:	4a0a      	ldr	r2, [pc, #40]	; (80034d0 <stmpe811_GetInstance+0x40>)
 80034a8:	5cd3      	ldrb	r3, [r2, r3]
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	88fa      	ldrh	r2, [r7, #6]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d101      	bne.n	80034b6 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
 80034b4:	e006      	b.n	80034c4 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
 80034b8:	3301      	adds	r3, #1
 80034ba:	73fb      	strb	r3, [r7, #15]
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d9f0      	bls.n	80034a4 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 80034c2:	23ff      	movs	r3, #255	; 0xff
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	2000391c 	.word	0x2000391c

080034d4 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08a      	sub	sp, #40	; 0x28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	4603      	mov	r3, r0
 80034dc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80034de:	79fb      	ldrb	r3, [r7, #7]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10e      	bne.n	8003502 <BSP_LED_Init+0x2e>
 80034e4:	2300      	movs	r3, #0
 80034e6:	613b      	str	r3, [r7, #16]
 80034e8:	4b21      	ldr	r3, [pc, #132]	; (8003570 <BSP_LED_Init+0x9c>)
 80034ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ec:	4a20      	ldr	r2, [pc, #128]	; (8003570 <BSP_LED_Init+0x9c>)
 80034ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034f2:	6313      	str	r3, [r2, #48]	; 0x30
 80034f4:	4b1e      	ldr	r3, [pc, #120]	; (8003570 <BSP_LED_Init+0x9c>)
 80034f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fc:	613b      	str	r3, [r7, #16]
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	e010      	b.n	8003524 <BSP_LED_Init+0x50>
 8003502:	79fb      	ldrb	r3, [r7, #7]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d10d      	bne.n	8003524 <BSP_LED_Init+0x50>
 8003508:	2300      	movs	r3, #0
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	4b18      	ldr	r3, [pc, #96]	; (8003570 <BSP_LED_Init+0x9c>)
 800350e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003510:	4a17      	ldr	r2, [pc, #92]	; (8003570 <BSP_LED_Init+0x9c>)
 8003512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003516:	6313      	str	r3, [r2, #48]	; 0x30
 8003518:	4b15      	ldr	r3, [pc, #84]	; (8003570 <BSP_LED_Init+0x9c>)
 800351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8003524:	79fb      	ldrb	r3, [r7, #7]
 8003526:	4a13      	ldr	r2, [pc, #76]	; (8003574 <BSP_LED_Init+0xa0>)
 8003528:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800352c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800352e:	2301      	movs	r3, #1
 8003530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003532:	2301      	movs	r3, #1
 8003534:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8003536:	2302      	movs	r3, #2
 8003538:	623b      	str	r3, [r7, #32]

  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800353a:	79fb      	ldrb	r3, [r7, #7]
 800353c:	4a0e      	ldr	r2, [pc, #56]	; (8003578 <BSP_LED_Init+0xa4>)
 800353e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003542:	f107 0214 	add.w	r2, r7, #20
 8003546:	4611      	mov	r1, r2
 8003548:	4618      	mov	r0, r3
 800354a:	f002 f889 	bl	8005660 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 800354e:	79fb      	ldrb	r3, [r7, #7]
 8003550:	4a09      	ldr	r2, [pc, #36]	; (8003578 <BSP_LED_Init+0xa4>)
 8003552:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003556:	79fb      	ldrb	r3, [r7, #7]
 8003558:	4a06      	ldr	r2, [pc, #24]	; (8003574 <BSP_LED_Init+0xa0>)
 800355a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800355e:	2200      	movs	r2, #0
 8003560:	4619      	mov	r1, r3
 8003562:	f002 fb35 	bl	8005bd0 <HAL_GPIO_WritePin>
}
 8003566:	bf00      	nop
 8003568:	3728      	adds	r7, #40	; 0x28
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	40023800 	.word	0x40023800
 8003574:	08011140 	.word	0x08011140
 8003578:	20002c5c 	.word	0x20002c5c

0800357c <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b08a      	sub	sp, #40	; 0x28
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]

  I2C_HandleTypeDef *pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a33      	ldr	r2, [pc, #204]	; (8003658 <I2Cx_MspInit+0xdc>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d15f      	bne.n	800364e <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	613b      	str	r3, [r7, #16]
 8003592:	4b32      	ldr	r3, [pc, #200]	; (800365c <I2Cx_MspInit+0xe0>)
 8003594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003596:	4a31      	ldr	r2, [pc, #196]	; (800365c <I2Cx_MspInit+0xe0>)
 8003598:	f043 0304 	orr.w	r3, r3, #4
 800359c:	6313      	str	r3, [r2, #48]	; 0x30
 800359e:	4b2f      	ldr	r3, [pc, #188]	; (800365c <I2Cx_MspInit+0xe0>)
 80035a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a2:	f003 0304 	and.w	r3, r3, #4
 80035a6:	613b      	str	r3, [r7, #16]
 80035a8:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 80035aa:	2300      	movs	r3, #0
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	4b2b      	ldr	r3, [pc, #172]	; (800365c <I2Cx_MspInit+0xe0>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	4a2a      	ldr	r2, [pc, #168]	; (800365c <I2Cx_MspInit+0xe0>)
 80035b4:	f043 0301 	orr.w	r3, r3, #1
 80035b8:	6313      	str	r3, [r2, #48]	; 0x30
 80035ba:	4b28      	ldr	r3, [pc, #160]	; (800365c <I2Cx_MspInit+0xe0>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	68fb      	ldr	r3, [r7, #12]

    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 80035c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 80035cc:	2312      	movs	r3, #18
 80035ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80035d0:	2300      	movs	r3, #0
 80035d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80035d4:	2302      	movs	r3, #2
 80035d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80035d8:	2304      	movs	r3, #4
 80035da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 80035dc:	f107 0314 	add.w	r3, r7, #20
 80035e0:	4619      	mov	r1, r3
 80035e2:	481f      	ldr	r0, [pc, #124]	; (8003660 <I2Cx_MspInit+0xe4>)
 80035e4:	f002 f83c 	bl	8005660 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 80035e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035ec:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 80035ee:	f107 0314 	add.w	r3, r7, #20
 80035f2:	4619      	mov	r1, r3
 80035f4:	481b      	ldr	r0, [pc, #108]	; (8003664 <I2Cx_MspInit+0xe8>)
 80035f6:	f002 f833 	bl	8005660 <HAL_GPIO_Init>


    /* Configure the Discovery I2Cx peripheral -------------------------------*/
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 80035fa:	2300      	movs	r3, #0
 80035fc:	60bb      	str	r3, [r7, #8]
 80035fe:	4b17      	ldr	r3, [pc, #92]	; (800365c <I2Cx_MspInit+0xe0>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	4a16      	ldr	r2, [pc, #88]	; (800365c <I2Cx_MspInit+0xe0>)
 8003604:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003608:	6413      	str	r3, [r2, #64]	; 0x40
 800360a:	4b14      	ldr	r3, [pc, #80]	; (800365c <I2Cx_MspInit+0xe0>)
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003612:	60bb      	str	r3, [r7, #8]
 8003614:	68bb      	ldr	r3, [r7, #8]

    /* Force the I2C Peripheral Clock Reset */
    DISCOVERY_I2Cx_FORCE_RESET();
 8003616:	4b11      	ldr	r3, [pc, #68]	; (800365c <I2Cx_MspInit+0xe0>)
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	4a10      	ldr	r2, [pc, #64]	; (800365c <I2Cx_MspInit+0xe0>)
 800361c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003620:	6213      	str	r3, [r2, #32]

    /* Release the I2C Peripheral Clock Reset */
    DISCOVERY_I2Cx_RELEASE_RESET();
 8003622:	4b0e      	ldr	r3, [pc, #56]	; (800365c <I2Cx_MspInit+0xe0>)
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	4a0d      	ldr	r2, [pc, #52]	; (800365c <I2Cx_MspInit+0xe0>)
 8003628:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800362c:	6213      	str	r3, [r2, #32]

    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800362e:	2200      	movs	r2, #0
 8003630:	210f      	movs	r1, #15
 8003632:	2048      	movs	r0, #72	; 0x48
 8003634:	f001 fa74 	bl	8004b20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003638:	2048      	movs	r0, #72	; 0x48
 800363a:	f001 fa8d 	bl	8004b58 <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800363e:	2200      	movs	r2, #0
 8003640:	210f      	movs	r1, #15
 8003642:	2049      	movs	r0, #73	; 0x49
 8003644:	f001 fa6c 	bl	8004b20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8003648:	2049      	movs	r0, #73	; 0x49
 800364a:	f001 fa85 	bl	8004b58 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 800364e:	bf00      	nop
 8003650:	3728      	adds	r7, #40	; 0x28
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	40005c00 	.word	0x40005c00
 800365c:	40023800 	.word	0x40023800
 8003660:	40020000 	.word	0x40020000
 8003664:	40020800 	.word	0x40020800

08003668 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800366c:	4814      	ldr	r0, [pc, #80]	; (80036c0 <I2Cx_Init+0x58>)
 800366e:	f005 f8d3 	bl	8008818 <HAL_I2C_GetState>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d121      	bne.n	80036bc <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8003678:	4b11      	ldr	r3, [pc, #68]	; (80036c0 <I2Cx_Init+0x58>)
 800367a:	4a12      	ldr	r2, [pc, #72]	; (80036c4 <I2Cx_Init+0x5c>)
 800367c:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 800367e:	4b10      	ldr	r3, [pc, #64]	; (80036c0 <I2Cx_Init+0x58>)
 8003680:	4a11      	ldr	r2, [pc, #68]	; (80036c8 <I2Cx_Init+0x60>)
 8003682:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8003684:	4b0e      	ldr	r3, [pc, #56]	; (80036c0 <I2Cx_Init+0x58>)
 8003686:	2200      	movs	r2, #0
 8003688:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 800368a:	4b0d      	ldr	r3, [pc, #52]	; (80036c0 <I2Cx_Init+0x58>)
 800368c:	2200      	movs	r2, #0
 800368e:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003690:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <I2Cx_Init+0x58>)
 8003692:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003696:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8003698:	4b09      	ldr	r3, [pc, #36]	; (80036c0 <I2Cx_Init+0x58>)
 800369a:	2200      	movs	r2, #0
 800369c:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 800369e:	4b08      	ldr	r3, [pc, #32]	; (80036c0 <I2Cx_Init+0x58>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 80036a4:	4b06      	ldr	r3, [pc, #24]	; (80036c0 <I2Cx_Init+0x58>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;
 80036aa:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <I2Cx_Init+0x58>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 80036b0:	4803      	ldr	r0, [pc, #12]	; (80036c0 <I2Cx_Init+0x58>)
 80036b2:	f7ff ff63 	bl	800357c <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 80036b6:	4802      	ldr	r0, [pc, #8]	; (80036c0 <I2Cx_Init+0x58>)
 80036b8:	f004 fb10 	bl	8007cdc <HAL_I2C_Init>
  }
}
 80036bc:	bf00      	nop
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	20003920 	.word	0x20003920
 80036c4:	40005c00 	.word	0x40005c00
 80036c8:	000186a0 	.word	0x000186a0

080036cc <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 80036d2:	2300      	movs	r3, #0
 80036d4:	603b      	str	r3, [r7, #0]
 80036d6:	4b13      	ldr	r3, [pc, #76]	; (8003724 <I2Cx_ITConfig+0x58>)
 80036d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036da:	4a12      	ldr	r2, [pc, #72]	; (8003724 <I2Cx_ITConfig+0x58>)
 80036dc:	f043 0301 	orr.w	r3, r3, #1
 80036e0:	6313      	str	r3, [r2, #48]	; 0x30
 80036e2:	4b10      	ldr	r3, [pc, #64]	; (8003724 <I2Cx_ITConfig+0x58>)
 80036e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	683b      	ldr	r3, [r7, #0]

  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 80036ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80036f4:	2301      	movs	r3, #1
 80036f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80036f8:	2300      	movs	r3, #0
 80036fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 80036fc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003700:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8003702:	1d3b      	adds	r3, r7, #4
 8003704:	4619      	mov	r1, r3
 8003706:	4808      	ldr	r0, [pc, #32]	; (8003728 <I2Cx_ITConfig+0x5c>)
 8003708:	f001 ffaa 	bl	8005660 <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 800370c:	2200      	movs	r2, #0
 800370e:	210f      	movs	r1, #15
 8003710:	2028      	movs	r0, #40	; 0x28
 8003712:	f001 fa05 	bl	8004b20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8003716:	2028      	movs	r0, #40	; 0x28
 8003718:	f001 fa1e 	bl	8004b58 <HAL_NVIC_EnableIRQ>
}
 800371c:	bf00      	nop
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40023800 	.word	0x40023800
 8003728:	40020000 	.word	0x40020000

0800372c <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af04      	add	r7, sp, #16
 8003732:	4603      	mov	r3, r0
 8003734:	71fb      	strb	r3, [r7, #7]
 8003736:	460b      	mov	r3, r1
 8003738:	71bb      	strb	r3, [r7, #6]
 800373a:	4613      	mov	r3, r2
 800373c:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800373e:	2300      	movs	r3, #0
 8003740:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8003742:	79fb      	ldrb	r3, [r7, #7]
 8003744:	b299      	uxth	r1, r3
 8003746:	79bb      	ldrb	r3, [r7, #6]
 8003748:	b29a      	uxth	r2, r3
 800374a:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <I2Cx_WriteData+0x4c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	9302      	str	r3, [sp, #8]
 8003750:	2301      	movs	r3, #1
 8003752:	9301      	str	r3, [sp, #4]
 8003754:	1d7b      	adds	r3, r7, #5
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	2301      	movs	r3, #1
 800375a:	4808      	ldr	r0, [pc, #32]	; (800377c <I2Cx_WriteData+0x50>)
 800375c:	f004 fd30 	bl	80081c0 <HAL_I2C_Mem_Write>
 8003760:	4603      	mov	r3, r0
 8003762:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8003764:	7bfb      	ldrb	r3, [r7, #15]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800376a:	f000 f863 	bl	8003834 <I2Cx_Error>
  }
}
 800376e:	bf00      	nop
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	20002c64 	.word	0x20002c64
 800377c:	20003920 	.word	0x20003920

08003780 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b088      	sub	sp, #32
 8003784:	af04      	add	r7, sp, #16
 8003786:	4603      	mov	r3, r0
 8003788:	460a      	mov	r2, r1
 800378a:	71fb      	strb	r3, [r7, #7]
 800378c:	4613      	mov	r3, r2
 800378e:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003790:	2300      	movs	r3, #0
 8003792:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8003794:	2300      	movs	r3, #0
 8003796:	73bb      	strb	r3, [r7, #14]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8003798:	79fb      	ldrb	r3, [r7, #7]
 800379a:	b299      	uxth	r1, r3
 800379c:	79bb      	ldrb	r3, [r7, #6]
 800379e:	b29a      	uxth	r2, r3
 80037a0:	4b0b      	ldr	r3, [pc, #44]	; (80037d0 <I2Cx_ReadData+0x50>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	9302      	str	r3, [sp, #8]
 80037a6:	2301      	movs	r3, #1
 80037a8:	9301      	str	r3, [sp, #4]
 80037aa:	f107 030e 	add.w	r3, r7, #14
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	2301      	movs	r3, #1
 80037b2:	4808      	ldr	r0, [pc, #32]	; (80037d4 <I2Cx_ReadData+0x54>)
 80037b4:	f004 fdfe 	bl	80083b4 <HAL_I2C_Mem_Read>
 80037b8:	4603      	mov	r3, r0
 80037ba:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80037c2:	f000 f837 	bl	8003834 <I2Cx_Error>

  }
  return value;
 80037c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	20002c64 	.word	0x20002c64
 80037d4:	20003920 	.word	0x20003920

080037d8 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b088      	sub	sp, #32
 80037dc:	af04      	add	r7, sp, #16
 80037de:	603a      	str	r2, [r7, #0]
 80037e0:	461a      	mov	r2, r3
 80037e2:	4603      	mov	r3, r0
 80037e4:	71fb      	strb	r3, [r7, #7]
 80037e6:	460b      	mov	r3, r1
 80037e8:	71bb      	strb	r3, [r7, #6]
 80037ea:	4613      	mov	r3, r2
 80037ec:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037ee:	2300      	movs	r3, #0
 80037f0:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 80037f2:	79fb      	ldrb	r3, [r7, #7]
 80037f4:	b299      	uxth	r1, r3
 80037f6:	79bb      	ldrb	r3, [r7, #6]
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	4b0c      	ldr	r3, [pc, #48]	; (800382c <I2Cx_ReadBuffer+0x54>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	9302      	str	r3, [sp, #8]
 8003800:	88bb      	ldrh	r3, [r7, #4]
 8003802:	9301      	str	r3, [sp, #4]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	2301      	movs	r3, #1
 800380a:	4809      	ldr	r0, [pc, #36]	; (8003830 <I2Cx_ReadBuffer+0x58>)
 800380c:	f004 fdd2 	bl	80083b4 <HAL_I2C_Mem_Read>
 8003810:	4603      	mov	r3, r0
 8003812:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status == HAL_OK)
 8003814:	7bfb      	ldrb	r3, [r7, #15]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 800381a:	2300      	movs	r3, #0
 800381c:	e002      	b.n	8003824 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800381e:	f000 f809 	bl	8003834 <I2Cx_Error>

    return 1;
 8003822:	2301      	movs	r3, #1
  }
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	20002c64 	.word	0x20002c64
 8003830:	20003920 	.word	0x20003920

08003834 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8003838:	4803      	ldr	r0, [pc, #12]	; (8003848 <I2Cx_Error+0x14>)
 800383a:	f004 fb93 	bl	8007f64 <HAL_I2C_DeInit>

  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 800383e:	f7ff ff13 	bl	8003668 <I2Cx_Init>
}
 8003842:	bf00      	nop
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	20003920 	.word	0x20003920

0800384c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8003850:	4819      	ldr	r0, [pc, #100]	; (80038b8 <SPIx_Init+0x6c>)
 8003852:	f007 fc30 	bl	800b0b6 <HAL_SPI_GetState>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d12b      	bne.n	80038b4 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 800385c:	4b16      	ldr	r3, [pc, #88]	; (80038b8 <SPIx_Init+0x6c>)
 800385e:	4a17      	ldr	r2, [pc, #92]	; (80038bc <SPIx_Init+0x70>)
 8003860:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003862:	4b15      	ldr	r3, [pc, #84]	; (80038b8 <SPIx_Init+0x6c>)
 8003864:	2218      	movs	r2, #24
 8003866:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003868:	4b13      	ldr	r3, [pc, #76]	; (80038b8 <SPIx_Init+0x6c>)
 800386a:	2200      	movs	r2, #0
 800386c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800386e:	4b12      	ldr	r3, [pc, #72]	; (80038b8 <SPIx_Init+0x6c>)
 8003870:	2200      	movs	r2, #0
 8003872:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8003874:	4b10      	ldr	r3, [pc, #64]	; (80038b8 <SPIx_Init+0x6c>)
 8003876:	2200      	movs	r2, #0
 8003878:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800387a:	4b0f      	ldr	r3, [pc, #60]	; (80038b8 <SPIx_Init+0x6c>)
 800387c:	2200      	movs	r2, #0
 800387e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8003880:	4b0d      	ldr	r3, [pc, #52]	; (80038b8 <SPIx_Init+0x6c>)
 8003882:	2207      	movs	r2, #7
 8003884:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8003886:	4b0c      	ldr	r3, [pc, #48]	; (80038b8 <SPIx_Init+0x6c>)
 8003888:	2200      	movs	r2, #0
 800388a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800388c:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <SPIx_Init+0x6c>)
 800388e:	2200      	movs	r2, #0
 8003890:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8003892:	4b09      	ldr	r3, [pc, #36]	; (80038b8 <SPIx_Init+0x6c>)
 8003894:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003898:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800389a:	4b07      	ldr	r3, [pc, #28]	; (80038b8 <SPIx_Init+0x6c>)
 800389c:	2200      	movs	r2, #0
 800389e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80038a0:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <SPIx_Init+0x6c>)
 80038a2:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038a6:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 80038a8:	4803      	ldr	r0, [pc, #12]	; (80038b8 <SPIx_Init+0x6c>)
 80038aa:	f000 f873 	bl	8003994 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80038ae:	4802      	ldr	r0, [pc, #8]	; (80038b8 <SPIx_Init+0x6c>)
 80038b0:	f006 ff45 	bl	800a73e <HAL_SPI_Init>
  }
}
 80038b4:	bf00      	nop
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	20003974 	.word	0x20003974
 80038bc:	40015000 	.word	0x40015000

080038c0 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	4603      	mov	r3, r0
 80038c8:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;

  status = HAL_SPI_Receive(&SpiHandle, (uint8_t *) &readvalue, ReadSize, SpixTimeout);
 80038ce:	79fb      	ldrb	r3, [r7, #7]
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	4b09      	ldr	r3, [pc, #36]	; (80038f8 <SPIx_Read+0x38>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f107 0108 	add.w	r1, r7, #8
 80038da:	4808      	ldr	r0, [pc, #32]	; (80038fc <SPIx_Read+0x3c>)
 80038dc:	f007 f923 	bl	800ab26 <HAL_SPI_Receive>
 80038e0:	4603      	mov	r3, r0
 80038e2:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80038ea:	f000 f847 	bl	800397c <SPIx_Error>
  }

  return readvalue;
 80038ee:	68bb      	ldr	r3, [r7, #8]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	20002c68 	.word	0x20002c68
 80038fc:	20003974 	.word	0x20003974

08003900 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	4603      	mov	r3, r0
 8003908:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800390a:	2300      	movs	r3, #0
 800390c:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t *) &Value, 1, SpixTimeout);
 800390e:	4b09      	ldr	r3, [pc, #36]	; (8003934 <SPIx_Write+0x34>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	1db9      	adds	r1, r7, #6
 8003914:	2201      	movs	r2, #1
 8003916:	4808      	ldr	r0, [pc, #32]	; (8003938 <SPIx_Write+0x38>)
 8003918:	f006 ffc2 	bl	800a8a0 <HAL_SPI_Transmit>
 800391c:	4603      	mov	r3, r0
 800391e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8003920:	7bfb      	ldrb	r3, [r7, #15]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8003926:	f000 f829 	bl	800397c <SPIx_Error>
  }
}
 800392a:	bf00      	nop
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	20002c68 	.word	0x20002c68
 8003938:	20003974 	.word	0x20003974

0800393c <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af02      	add	r7, sp, #8
 8003942:	4603      	mov	r3, r0
 8003944:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8003946:	2300      	movs	r3, #0
 8003948:	73fb      	strb	r3, [r7, #15]

  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if (HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *) &Byte, (uint8_t *) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800394a:	4b0a      	ldr	r3, [pc, #40]	; (8003974 <SPIx_WriteRead+0x38>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f107 020f 	add.w	r2, r7, #15
 8003952:	1df9      	adds	r1, r7, #7
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	2301      	movs	r3, #1
 8003958:	4807      	ldr	r0, [pc, #28]	; (8003978 <SPIx_WriteRead+0x3c>)
 800395a:	f007 f9fc 	bl	800ad56 <HAL_SPI_TransmitReceive>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8003964:	f000 f80a 	bl	800397c <SPIx_Error>
  }

  return receivedbyte;
 8003968:	7bfb      	ldrb	r3, [r7, #15]
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	20002c68 	.word	0x20002c68
 8003978:	20003974 	.word	0x20003974

0800397c <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8003980:	4803      	ldr	r0, [pc, #12]	; (8003990 <SPIx_Error+0x14>)
 8003982:	f006 ff65 	bl	800a850 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8003986:	f7ff ff61 	bl	800384c <SPIx_Init>
}
 800398a:	bf00      	nop
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20003974 	.word	0x20003974

08003994 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b08a      	sub	sp, #40	; 0x28
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 800399c:	2300      	movs	r3, #0
 800399e:	613b      	str	r3, [r7, #16]
 80039a0:	4b17      	ldr	r3, [pc, #92]	; (8003a00 <SPIx_MspInit+0x6c>)
 80039a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a4:	4a16      	ldr	r2, [pc, #88]	; (8003a00 <SPIx_MspInit+0x6c>)
 80039a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039aa:	6453      	str	r3, [r2, #68]	; 0x44
 80039ac:	4b14      	ldr	r3, [pc, #80]	; (8003a00 <SPIx_MspInit+0x6c>)
 80039ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039b4:	613b      	str	r3, [r7, #16]
 80039b6:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80039b8:	2300      	movs	r3, #0
 80039ba:	60fb      	str	r3, [r7, #12]
 80039bc:	4b10      	ldr	r3, [pc, #64]	; (8003a00 <SPIx_MspInit+0x6c>)
 80039be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c0:	4a0f      	ldr	r2, [pc, #60]	; (8003a00 <SPIx_MspInit+0x6c>)
 80039c2:	f043 0320 	orr.w	r3, r3, #32
 80039c6:	6313      	str	r3, [r2, #48]	; 0x30
 80039c8:	4b0d      	ldr	r3, [pc, #52]	; (8003a00 <SPIx_MspInit+0x6c>)
 80039ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039cc:	f003 0320 	and.w	r3, r3, #32
 80039d0:	60fb      	str	r3, [r7, #12]
 80039d2:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80039d4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80039d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80039da:	2302      	movs	r3, #2
 80039dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80039de:	2302      	movs	r3, #2
 80039e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80039e2:	2301      	movs	r3, #1
 80039e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80039e6:	2305      	movs	r3, #5
 80039e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 80039ea:	f107 0314 	add.w	r3, r7, #20
 80039ee:	4619      	mov	r1, r3
 80039f0:	4804      	ldr	r0, [pc, #16]	; (8003a04 <SPIx_MspInit+0x70>)
 80039f2:	f001 fe35 	bl	8005660 <HAL_GPIO_Init>
}
 80039f6:	bf00      	nop
 80039f8:	3728      	adds	r7, #40	; 0x28
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	40023800 	.word	0x40023800
 8003a04:	40021400 	.word	0x40021400

08003a08 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if (Is_LCD_IO_Initialized == 0)
 8003a0e:	4b36      	ldr	r3, [pc, #216]	; (8003ae8 <LCD_IO_Init+0xe0>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d164      	bne.n	8003ae0 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8003a16:	4b34      	ldr	r3, [pc, #208]	; (8003ae8 <LCD_IO_Init+0xe0>)
 8003a18:	2201      	movs	r2, #1
 8003a1a:	701a      	strb	r2, [r3, #0]

    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	60bb      	str	r3, [r7, #8]
 8003a20:	4b32      	ldr	r3, [pc, #200]	; (8003aec <LCD_IO_Init+0xe4>)
 8003a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a24:	4a31      	ldr	r2, [pc, #196]	; (8003aec <LCD_IO_Init+0xe4>)
 8003a26:	f043 0308 	orr.w	r3, r3, #8
 8003a2a:	6313      	str	r3, [r2, #48]	; 0x30
 8003a2c:	4b2f      	ldr	r3, [pc, #188]	; (8003aec <LCD_IO_Init+0xe4>)
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	60bb      	str	r3, [r7, #8]
 8003a36:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003a38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a3c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003a46:	2302      	movs	r3, #2
 8003a48:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8003a4a:	f107 030c 	add.w	r3, r7, #12
 8003a4e:	4619      	mov	r1, r3
 8003a50:	4827      	ldr	r0, [pc, #156]	; (8003af0 <LCD_IO_Init+0xe8>)
 8003a52:	f001 fe05 	bl	8005660 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8003a56:	2300      	movs	r3, #0
 8003a58:	607b      	str	r3, [r7, #4]
 8003a5a:	4b24      	ldr	r3, [pc, #144]	; (8003aec <LCD_IO_Init+0xe4>)
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5e:	4a23      	ldr	r2, [pc, #140]	; (8003aec <LCD_IO_Init+0xe4>)
 8003a60:	f043 0308 	orr.w	r3, r3, #8
 8003a64:	6313      	str	r3, [r2, #48]	; 0x30
 8003a66:	4b21      	ldr	r3, [pc, #132]	; (8003aec <LCD_IO_Init+0xe4>)
 8003a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6a:	f003 0308 	and.w	r3, r3, #8
 8003a6e:	607b      	str	r3, [r7, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8003a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003a80:	2302      	movs	r3, #2
 8003a82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003a84:	f107 030c 	add.w	r3, r7, #12
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4819      	ldr	r0, [pc, #100]	; (8003af0 <LCD_IO_Init+0xe8>)
 8003a8c:	f001 fde8 	bl	8005660 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003a90:	2300      	movs	r3, #0
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	4b15      	ldr	r3, [pc, #84]	; (8003aec <LCD_IO_Init+0xe4>)
 8003a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a98:	4a14      	ldr	r2, [pc, #80]	; (8003aec <LCD_IO_Init+0xe4>)
 8003a9a:	f043 0304 	orr.w	r3, r3, #4
 8003a9e:	6313      	str	r3, [r2, #48]	; 0x30
 8003aa0:	4b12      	ldr	r3, [pc, #72]	; (8003aec <LCD_IO_Init+0xe4>)
 8003aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	603b      	str	r3, [r7, #0]
 8003aaa:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8003aac:	2304      	movs	r3, #4
 8003aae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003ab8:	2302      	movs	r3, #2
 8003aba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003abc:	f107 030c 	add.w	r3, r7, #12
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	480c      	ldr	r0, [pc, #48]	; (8003af4 <LCD_IO_Init+0xec>)
 8003ac4:	f001 fdcc 	bl	8005660 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003ac8:	2200      	movs	r2, #0
 8003aca:	2104      	movs	r1, #4
 8003acc:	4809      	ldr	r0, [pc, #36]	; (8003af4 <LCD_IO_Init+0xec>)
 8003ace:	f002 f87f 	bl	8005bd0 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	2104      	movs	r1, #4
 8003ad6:	4807      	ldr	r0, [pc, #28]	; (8003af4 <LCD_IO_Init+0xec>)
 8003ad8:	f002 f87a 	bl	8005bd0 <HAL_GPIO_WritePin>

    SPIx_Init();
 8003adc:	f7ff feb6 	bl	800384c <SPIx_Init>
  }
}
 8003ae0:	bf00      	nop
 8003ae2:	3720      	adds	r7, #32
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	200039cc 	.word	0x200039cc
 8003aec:	40023800 	.word	0x40023800
 8003af0:	40020c00 	.word	0x40020c00
 8003af4:	40020800 	.word	0x40020800

08003af8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	4603      	mov	r3, r0
 8003b00:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003b02:	2201      	movs	r2, #1
 8003b04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b08:	480a      	ldr	r0, [pc, #40]	; (8003b34 <LCD_IO_WriteData+0x3c>)
 8003b0a:	f002 f861 	bl	8005bd0 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8003b0e:	2200      	movs	r2, #0
 8003b10:	2104      	movs	r1, #4
 8003b12:	4809      	ldr	r0, [pc, #36]	; (8003b38 <LCD_IO_WriteData+0x40>)
 8003b14:	f002 f85c 	bl	8005bd0 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8003b18:	88fb      	ldrh	r3, [r7, #6]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff fef0 	bl	8003900 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003b20:	2201      	movs	r2, #1
 8003b22:	2104      	movs	r1, #4
 8003b24:	4804      	ldr	r0, [pc, #16]	; (8003b38 <LCD_IO_WriteData+0x40>)
 8003b26:	f002 f853 	bl	8005bd0 <HAL_GPIO_WritePin>
}
 8003b2a:	bf00      	nop
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40020c00 	.word	0x40020c00
 8003b38:	40020800 	.word	0x40020800

08003b3c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	4603      	mov	r3, r0
 8003b44:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003b46:	2200      	movs	r2, #0
 8003b48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b4c:	480a      	ldr	r0, [pc, #40]	; (8003b78 <LCD_IO_WriteReg+0x3c>)
 8003b4e:	f002 f83f 	bl	8005bd0 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8003b52:	2200      	movs	r2, #0
 8003b54:	2104      	movs	r1, #4
 8003b56:	4809      	ldr	r0, [pc, #36]	; (8003b7c <LCD_IO_WriteReg+0x40>)
 8003b58:	f002 f83a 	bl	8005bd0 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8003b5c:	79fb      	ldrb	r3, [r7, #7]
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff fecd 	bl	8003900 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003b66:	2201      	movs	r2, #1
 8003b68:	2104      	movs	r1, #4
 8003b6a:	4804      	ldr	r0, [pc, #16]	; (8003b7c <LCD_IO_WriteReg+0x40>)
 8003b6c:	f002 f830 	bl	8005bd0 <HAL_GPIO_WritePin>
}
 8003b70:	bf00      	nop
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40020c00 	.word	0x40020c00
 8003b7c:	40020800 	.word	0x40020800

08003b80 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	4603      	mov	r3, r0
 8003b88:	460a      	mov	r2, r1
 8003b8a:	80fb      	strh	r3, [r7, #6]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8003b90:	2300      	movs	r3, #0
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8003b94:	2200      	movs	r2, #0
 8003b96:	2104      	movs	r1, #4
 8003b98:	4810      	ldr	r0, [pc, #64]	; (8003bdc <LCD_IO_ReadData+0x5c>)
 8003b9a:	f002 f819 	bl	8005bd0 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ba4:	480e      	ldr	r0, [pc, #56]	; (8003be0 <LCD_IO_ReadData+0x60>)
 8003ba6:	f002 f813 	bl	8005bd0 <HAL_GPIO_WritePin>

  SPIx_Write(RegValue);
 8003baa:	88fb      	ldrh	r3, [r7, #6]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff fea7 	bl	8003900 <SPIx_Write>

  readvalue = SPIx_Read(ReadSize);
 8003bb2:	797b      	ldrb	r3, [r7, #5]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff fe83 	bl	80038c0 <SPIx_Read>
 8003bba:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bc2:	4807      	ldr	r0, [pc, #28]	; (8003be0 <LCD_IO_ReadData+0x60>)
 8003bc4:	f002 f804 	bl	8005bd0 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003bc8:	2201      	movs	r2, #1
 8003bca:	2104      	movs	r1, #4
 8003bcc:	4803      	ldr	r0, [pc, #12]	; (8003bdc <LCD_IO_ReadData+0x5c>)
 8003bce:	f001 ffff 	bl	8005bd0 <HAL_GPIO_WritePin>

  return readvalue;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40020800 	.word	0x40020800
 8003be0:	40020c00 	.word	0x40020c00

08003be4 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 febb 	bl	8004968 <HAL_Delay>
}
 8003bf2:	bf00      	nop
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8003bfe:	f7ff fd33 	bl	8003668 <I2Cx_Init>
}
 8003c02:	bf00      	nop
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8003c0a:	f7ff fd5f 	bl	80036cc <I2Cx_ITConfig>
}
 8003c0e:	bf00      	nop
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b082      	sub	sp, #8
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	4603      	mov	r3, r0
 8003c1a:	71fb      	strb	r3, [r7, #7]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	71bb      	strb	r3, [r7, #6]
 8003c20:	4613      	mov	r3, r2
 8003c22:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8003c24:	797a      	ldrb	r2, [r7, #5]
 8003c26:	79b9      	ldrb	r1, [r7, #6]
 8003c28:	79fb      	ldrb	r3, [r7, #7]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff fd7e 	bl	800372c <I2Cx_WriteData>
}
 8003c30:	bf00      	nop
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	4603      	mov	r3, r0
 8003c40:	460a      	mov	r2, r1
 8003c42:	71fb      	strb	r3, [r7, #7]
 8003c44:	4613      	mov	r3, r2
 8003c46:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8003c48:	79ba      	ldrb	r2, [r7, #6]
 8003c4a:	79fb      	ldrb	r3, [r7, #7]
 8003c4c:	4611      	mov	r1, r2
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7ff fd96 	bl	8003780 <I2Cx_ReadData>
 8003c54:	4603      	mov	r3, r0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b082      	sub	sp, #8
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	603a      	str	r2, [r7, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	4603      	mov	r3, r0
 8003c6a:	71fb      	strb	r3, [r7, #7]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	71bb      	strb	r3, [r7, #6]
 8003c70:	4613      	mov	r3, r2
 8003c72:	80bb      	strh	r3, [r7, #4]
  return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8003c74:	88bb      	ldrh	r3, [r7, #4]
 8003c76:	79b9      	ldrb	r1, [r7, #6]
 8003c78:	79f8      	ldrb	r0, [r7, #7]
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	f7ff fdac 	bl	80037d8 <I2Cx_ReadBuffer>
 8003c80:	4603      	mov	r3, r0
 8003c82:	b29b      	uxth	r3, r3
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 fe67 	bl	8004968 <HAL_Delay>
}
 8003c9a:	bf00      	nop
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
	...

08003ca4 <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b088      	sub	sp, #32
 8003ca8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */
  GYRO_CS_GPIO_CLK_ENABLE();
 8003caa:	2300      	movs	r3, #0
 8003cac:	60bb      	str	r3, [r7, #8]
 8003cae:	4b20      	ldr	r3, [pc, #128]	; (8003d30 <GYRO_IO_Init+0x8c>)
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb2:	4a1f      	ldr	r2, [pc, #124]	; (8003d30 <GYRO_IO_Init+0x8c>)
 8003cb4:	f043 0304 	orr.w	r3, r3, #4
 8003cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cba:	4b1d      	ldr	r3, [pc, #116]	; (8003d30 <GYRO_IO_Init+0x8c>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	f003 0304 	and.w	r3, r3, #4
 8003cc2:	60bb      	str	r3, [r7, #8]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8003cd6:	f107 030c 	add.w	r3, r7, #12
 8003cda:	4619      	mov	r1, r3
 8003cdc:	4815      	ldr	r0, [pc, #84]	; (8003d34 <GYRO_IO_Init+0x90>)
 8003cde:	f001 fcbf 	bl	8005660 <HAL_GPIO_Init>

  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	2102      	movs	r1, #2
 8003ce6:	4813      	ldr	r0, [pc, #76]	; (8003d34 <GYRO_IO_Init+0x90>)
 8003ce8:	f001 ff72 	bl	8005bd0 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8003cec:	2300      	movs	r3, #0
 8003cee:	607b      	str	r3, [r7, #4]
 8003cf0:	4b0f      	ldr	r3, [pc, #60]	; (8003d30 <GYRO_IO_Init+0x8c>)
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf4:	4a0e      	ldr	r2, [pc, #56]	; (8003d30 <GYRO_IO_Init+0x8c>)
 8003cf6:	f043 0301 	orr.w	r3, r3, #1
 8003cfa:	6313      	str	r3, [r2, #48]	; 0x30
 8003cfc:	4b0c      	ldr	r3, [pc, #48]	; (8003d30 <GYRO_IO_Init+0x8c>)
 8003cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	607b      	str	r3, [r7, #4]
 8003d06:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8003d08:	2306      	movs	r3, #6
 8003d0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003d10:	2302      	movs	r3, #2
 8003d12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003d14:	2300      	movs	r3, #0
 8003d16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8003d18:	f107 030c 	add.w	r3, r7, #12
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	4806      	ldr	r0, [pc, #24]	; (8003d38 <GYRO_IO_Init+0x94>)
 8003d20:	f001 fc9e 	bl	8005660 <HAL_GPIO_Init>

  SPIx_Init();
 8003d24:	f7ff fd92 	bl	800384c <SPIx_Init>
}
 8003d28:	bf00      	nop
 8003d2a:	3720      	adds	r7, #32
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40023800 	.word	0x40023800
 8003d34:	40020800 	.word	0x40020800
 8003d38:	40020000 	.word	0x40020000

08003d3c <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	460b      	mov	r3, r1
 8003d46:	70fb      	strb	r3, [r7, #3]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit:
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if (NumByteToWrite > 0x01)
 8003d4c:	883b      	ldrh	r3, [r7, #0]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d903      	bls.n	8003d5a <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8003d52:	78fb      	ldrb	r3, [r7, #3]
 8003d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d58:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	2102      	movs	r1, #2
 8003d5e:	480f      	ldr	r0, [pc, #60]	; (8003d9c <GYRO_IO_Write+0x60>)
 8003d60:	f001 ff36 	bl	8005bd0 <HAL_GPIO_WritePin>

  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8003d64:	78fb      	ldrb	r3, [r7, #3]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff fde8 	bl	800393c <SPIx_WriteRead>

  /* Send the data that will be written into the device (MSB First) */
  while (NumByteToWrite >= 0x01)
 8003d6c:	e00a      	b.n	8003d84 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff fde2 	bl	800393c <SPIx_WriteRead>
    NumByteToWrite--;
 8003d78:	883b      	ldrh	r3, [r7, #0]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	3301      	adds	r3, #1
 8003d82:	607b      	str	r3, [r7, #4]
  while (NumByteToWrite >= 0x01)
 8003d84:	883b      	ldrh	r3, [r7, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f1      	bne.n	8003d6e <GYRO_IO_Write+0x32>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	2102      	movs	r1, #2
 8003d8e:	4803      	ldr	r0, [pc, #12]	; (8003d9c <GYRO_IO_Write+0x60>)
 8003d90:	f001 ff1e 	bl	8005bd0 <HAL_GPIO_WritePin>
}
 8003d94:	bf00      	nop
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40020800 	.word	0x40020800

08003da0 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	460b      	mov	r3, r1
 8003daa:	70fb      	strb	r3, [r7, #3]
 8003dac:	4613      	mov	r3, r2
 8003dae:	803b      	strh	r3, [r7, #0]
  if (NumByteToRead > 0x01)
 8003db0:	883b      	ldrh	r3, [r7, #0]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d904      	bls.n	8003dc0 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8003db6:	78fb      	ldrb	r3, [r7, #3]
 8003db8:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8003dbc:	70fb      	strb	r3, [r7, #3]
 8003dbe:	e003      	b.n	8003dc8 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8003dc0:	78fb      	ldrb	r3, [r7, #3]
 8003dc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003dc6:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8003dc8:	2200      	movs	r2, #0
 8003dca:	2102      	movs	r1, #2
 8003dcc:	4810      	ldr	r0, [pc, #64]	; (8003e10 <GYRO_IO_Read+0x70>)
 8003dce:	f001 feff 	bl	8005bd0 <HAL_GPIO_WritePin>

  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8003dd2:	78fb      	ldrb	r3, [r7, #3]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff fdb1 	bl	800393c <SPIx_WriteRead>

  /* Receive the data that will be read from the device (MSB First) */
  while (NumByteToRead > 0x00)
 8003dda:	e00c      	b.n	8003df6 <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8003ddc:	2000      	movs	r0, #0
 8003dde:	f7ff fdad 	bl	800393c <SPIx_WriteRead>
 8003de2:	4603      	mov	r3, r0
 8003de4:	461a      	mov	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8003dea:	883b      	ldrh	r3, [r7, #0]
 8003dec:	3b01      	subs	r3, #1
 8003dee:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	3301      	adds	r3, #1
 8003df4:	607b      	str	r3, [r7, #4]
  while (NumByteToRead > 0x00)
 8003df6:	883b      	ldrh	r3, [r7, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1ef      	bne.n	8003ddc <GYRO_IO_Read+0x3c>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	2102      	movs	r1, #2
 8003e00:	4803      	ldr	r0, [pc, #12]	; (8003e10 <GYRO_IO_Read+0x70>)
 8003e02:	f001 fee5 	bl	8005bd0 <HAL_GPIO_WritePin>
}
 8003e06:	bf00      	nop
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40020800 	.word	0x40020800

08003e14 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

  /* LTDC Configuration ----------------------------------------------------*/
  LtdcHandler.Instance = LTDC;
 8003e18:	4b2d      	ldr	r3, [pc, #180]	; (8003ed0 <BSP_LCD_Init+0xbc>)
 8003e1a:	4a2e      	ldr	r2, [pc, #184]	; (8003ed4 <BSP_LCD_Init+0xc0>)
 8003e1c:	601a      	str	r2, [r3, #0]
        ActiveH=320 (323-2-2+1)
        VFP=4 (327-320-2-2+1)
    */

  /* Configure horizontal synchronization width */
  LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8003e1e:	4b2c      	ldr	r3, [pc, #176]	; (8003ed0 <BSP_LCD_Init+0xbc>)
 8003e20:	2209      	movs	r2, #9
 8003e22:	615a      	str	r2, [r3, #20]
  /* Configure vertical synchronization height */
  LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8003e24:	4b2a      	ldr	r3, [pc, #168]	; (8003ed0 <BSP_LCD_Init+0xbc>)
 8003e26:	2201      	movs	r2, #1
 8003e28:	619a      	str	r2, [r3, #24]
  /* Configure accumulated horizontal back porch */
  LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8003e2a:	4b29      	ldr	r3, [pc, #164]	; (8003ed0 <BSP_LCD_Init+0xbc>)
 8003e2c:	221d      	movs	r2, #29
 8003e2e:	61da      	str	r2, [r3, #28]
  /* Configure accumulated vertical back porch */
  LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8003e30:	4b27      	ldr	r3, [pc, #156]	; (8003ed0 <BSP_LCD_Init+0xbc>)
 8003e32:	2203      	movs	r2, #3
 8003e34:	621a      	str	r2, [r3, #32]
  /* Configure accumulated active width */
  LtdcHandler.Init.AccumulatedActiveW = 269;
 8003e36:	4b26      	ldr	r3, [pc, #152]	; (8003ed0 <BSP_LCD_Init+0xbc>)
 8003e38:	f240 120d 	movw	r2, #269	; 0x10d
 8003e3c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Configure accumulated active height */
  LtdcHandler.Init.AccumulatedActiveH = 323;
 8003e3e:	4b24      	ldr	r3, [pc, #144]	; (8003ed0 <BSP_LCD_Init+0xbc>)
 8003e40:	f240 1243 	movw	r2, #323	; 0x143
 8003e44:	629a      	str	r2, [r3, #40]	; 0x28
  /* Configure total width */
  LtdcHandler.Init.TotalWidth = 279;
 8003e46:	4b22      	ldr	r3, [pc, #136]	; (8003ed0 <BSP_LCD_Init+0xbc>)
 8003e48:	f240 1217 	movw	r2, #279	; 0x117
 8003e4c:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Configure total height */
  LtdcHandler.Init.TotalHeigh = 327;
 8003e4e:	4b20      	ldr	r3, [pc, #128]	; (8003ed0 <BSP_LCD_Init+0xbc>)
 8003e50:	f240 1247 	movw	r2, #327	; 0x147
 8003e54:	631a      	str	r2, [r3, #48]	; 0x30

  /* Configure R,G,B component values for LCD background color */
  LtdcHandler.Init.Backcolor.Red = 0;
 8003e56:	4b1e      	ldr	r3, [pc, #120]	; (8003ed0 <BSP_LCD_Init+0xbc>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  LtdcHandler.Init.Backcolor.Blue = 0;
 8003e5e:	4b1c      	ldr	r3, [pc, #112]	; (8003ed0 <BSP_LCD_Init+0xbc>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  LtdcHandler.Init.Backcolor.Green = 0;
 8003e66:	4b1a      	ldr	r3, [pc, #104]	; (8003ed0 <BSP_LCD_Init+0xbc>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003e6e:	4b1a      	ldr	r3, [pc, #104]	; (8003ed8 <BSP_LCD_Init+0xc4>)
 8003e70:	2208      	movs	r2, #8
 8003e72:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8003e74:	4b18      	ldr	r3, [pc, #96]	; (8003ed8 <BSP_LCD_Init+0xc4>)
 8003e76:	22c0      	movs	r2, #192	; 0xc0
 8003e78:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8003e7a:	4b17      	ldr	r3, [pc, #92]	; (8003ed8 <BSP_LCD_Init+0xc4>)
 8003e7c:	2204      	movs	r2, #4
 8003e7e:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003e80:	4b15      	ldr	r3, [pc, #84]	; (8003ed8 <BSP_LCD_Init+0xc4>)
 8003e82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e86:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8003e88:	4813      	ldr	r0, [pc, #76]	; (8003ed8 <BSP_LCD_Init+0xc4>)
 8003e8a:	f006 fa07 	bl	800a29c <HAL_RCCEx_PeriphCLKConfig>

  /* Polarity */
  LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003e8e:	4b10      	ldr	r3, [pc, #64]	; (8003ed0 <BSP_LCD_Init+0xbc>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	605a      	str	r2, [r3, #4]
  LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003e94:	4b0e      	ldr	r3, [pc, #56]	; (8003ed0 <BSP_LCD_Init+0xbc>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	609a      	str	r2, [r3, #8]
  LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003e9a:	4b0d      	ldr	r3, [pc, #52]	; (8003ed0 <BSP_LCD_Init+0xbc>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	60da      	str	r2, [r3, #12]
  LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003ea0:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <BSP_LCD_Init+0xbc>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	611a      	str	r2, [r3, #16]

  BSP_LCD_MspInit();
 8003ea6:	f000 f8fd 	bl	80040a4 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&LtdcHandler);
 8003eaa:	4809      	ldr	r0, [pc, #36]	; (8003ed0 <BSP_LCD_Init+0xbc>)
 8003eac:	f005 f974 	bl	8009198 <HAL_LTDC_Init>

  /* Select the device */
  LcdDrv = &ili9341_drv;
 8003eb0:	4b0a      	ldr	r3, [pc, #40]	; (8003edc <BSP_LCD_Init+0xc8>)
 8003eb2:	4a0b      	ldr	r2, [pc, #44]	; (8003ee0 <BSP_LCD_Init+0xcc>)
 8003eb4:	601a      	str	r2, [r3, #0]

  /* LCD Init */
  LcdDrv->Init();
 8003eb6:	4b09      	ldr	r3, [pc, #36]	; (8003edc <BSP_LCD_Init+0xc8>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4798      	blx	r3

  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8003ebe:	f000 fa5b 	bl	8004378 <BSP_SDRAM_Init>

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003ec2:	4808      	ldr	r0, [pc, #32]	; (8003ee4 <BSP_LCD_Init+0xd0>)
 8003ec4:	f000 f89c 	bl	8004000 <BSP_LCD_SetFont>

  return LCD_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	200039d0 	.word	0x200039d0
 8003ed4:	40016800 	.word	0x40016800
 8003ed8:	20003acc 	.word	0x20003acc
 8003edc:	20003b18 	.word	0x20003b18
 8003ee0:	20002bfc 	.word	0x20002bfc
 8003ee4:	20002c6c 	.word	0x20002c6c

08003ee8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8003eec:	4b03      	ldr	r3, [pc, #12]	; (8003efc <BSP_LCD_GetXSize+0x14>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef2:	4798      	blx	r3
 8003ef4:	4603      	mov	r3, r0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	20003b18 	.word	0x20003b18

08003f00 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8003f04:	4b03      	ldr	r3, [pc, #12]	; (8003f14 <BSP_LCD_GetYSize+0x14>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0a:	4798      	blx	r3
 8003f0c:	4603      	mov	r3, r0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	20003b18 	.word	0x20003b18

08003f18 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background.
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b090      	sub	sp, #64	; 0x40
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	6039      	str	r1, [r7, #0]
 8003f22:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8003f24:	2300      	movs	r3, #0
 8003f26:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8003f28:	f7ff ffde 	bl	8003ee8 <BSP_LCD_GetXSize>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8003f30:	2300      	movs	r3, #0
 8003f32:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize();
 8003f34:	f7ff ffe4 	bl	8003f00 <BSP_LCD_GetYSize>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8003f44:	23ff      	movs	r3, #255	; 0xff
 8003f46:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8003f52:	2300      	movs	r3, #0
 8003f54:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003f5e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003f62:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003f64:	2307      	movs	r3, #7
 8003f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8003f68:	f7ff ffbe 	bl	8003ee8 <BSP_LCD_GetXSize>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8003f70:	f7ff ffc6 	bl	8003f00 <BSP_LCD_GetYSize>
 8003f74:	4603      	mov	r3, r0
 8003f76:	63bb      	str	r3, [r7, #56]	; 0x38

  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex);
 8003f78:	88fa      	ldrh	r2, [r7, #6]
 8003f7a:	f107 030c 	add.w	r3, r7, #12
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4814      	ldr	r0, [pc, #80]	; (8003fd4 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003f82:	f005 fac1 	bl	8009508 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003f86:	88fa      	ldrh	r2, [r7, #6]
 8003f88:	4913      	ldr	r1, [pc, #76]	; (8003fd8 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	4413      	add	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	440b      	add	r3, r1
 8003f94:	3304      	adds	r3, #4
 8003f96:	f04f 32ff 	mov.w	r2, #4294967295
 8003f9a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003f9c:	88fa      	ldrh	r2, [r7, #6]
 8003f9e:	490e      	ldr	r1, [pc, #56]	; (8003fd8 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	4413      	add	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	3308      	adds	r3, #8
 8003fac:	4a0b      	ldr	r2, [pc, #44]	; (8003fdc <BSP_LCD_LayerDefaultInit+0xc4>)
 8003fae:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8003fb0:	88fa      	ldrh	r2, [r7, #6]
 8003fb2:	4909      	ldr	r1, [pc, #36]	; (8003fd8 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	4413      	add	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8003fc2:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8003fc4:	4803      	ldr	r0, [pc, #12]	; (8003fd4 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003fc6:	f005 fadd 	bl	8009584 <HAL_LTDC_EnableDither>
}
 8003fca:	bf00      	nop
 8003fcc:	3740      	adds	r7, #64	; 0x40
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	200039d0 	.word	0x200039d0
 8003fd8:	20003b00 	.word	0x20003b00
 8003fdc:	20002c6c 	.word	0x20002c6c

08003fe0 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003fe8:	4a04      	ldr	r2, [pc, #16]	; (8003ffc <BSP_LCD_SelectLayer+0x1c>)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6013      	str	r3, [r2, #0]
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	20003afc 	.word	0x20003afc

08004000 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8004008:	4b08      	ldr	r3, [pc, #32]	; (800402c <BSP_LCD_SetFont+0x2c>)
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	4908      	ldr	r1, [pc, #32]	; (8004030 <BSP_LCD_SetFont+0x30>)
 800400e:	4613      	mov	r3, r2
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	4413      	add	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	440b      	add	r3, r1
 8004018:	3308      	adds	r3, #8
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	601a      	str	r2, [r3, #0]
}
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	20003afc 	.word	0x20003afc
 8004030:	20003b00 	.word	0x20003b00

08004034 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8004034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004036:	b085      	sub	sp, #20
 8004038:	af02      	add	r7, sp, #8
 800403a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(),
 800403c:	4b0f      	ldr	r3, [pc, #60]	; (800407c <BSP_LCD_Clear+0x48>)
 800403e:	681c      	ldr	r4, [r3, #0]
 8004040:	4b0e      	ldr	r3, [pc, #56]	; (800407c <BSP_LCD_Clear+0x48>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a0e      	ldr	r2, [pc, #56]	; (8004080 <BSP_LCD_Clear+0x4c>)
 8004046:	2134      	movs	r1, #52	; 0x34
 8004048:	fb01 f303 	mul.w	r3, r1, r3
 800404c:	4413      	add	r3, r2
 800404e:	335c      	adds	r3, #92	; 0x5c
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	461e      	mov	r6, r3
 8004054:	f7ff ff48 	bl	8003ee8 <BSP_LCD_GetXSize>
 8004058:	4605      	mov	r5, r0
 800405a:	f7ff ff51 	bl	8003f00 <BSP_LCD_GetYSize>
 800405e:	4602      	mov	r2, r0
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	9301      	str	r3, [sp, #4]
 8004064:	2300      	movs	r3, #0
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	4613      	mov	r3, r2
 800406a:	462a      	mov	r2, r5
 800406c:	4631      	mov	r1, r6
 800406e:	4620      	mov	r0, r4
 8004070:	f000 f8ee 	bl	8004250 <FillBuffer>
             BSP_LCD_GetYSize(), 0, Color);
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800407c:	20003afc 	.word	0x20003afc
 8004080:	200039d0 	.word	0x200039d0

08004084 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  if (LcdDrv->DisplayOn != NULL)
 8004088:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <BSP_LCD_DisplayOn+0x1c>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8004092:	4b03      	ldr	r3, [pc, #12]	; (80040a0 <BSP_LCD_DisplayOn+0x1c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	4798      	blx	r3
  }
}
 800409a:	bf00      	nop
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	20003b18 	.word	0x20003b18

080040a4 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b08e      	sub	sp, #56	; 0x38
 80040a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80040aa:	2300      	movs	r3, #0
 80040ac:	623b      	str	r3, [r7, #32]
 80040ae:	4b61      	ldr	r3, [pc, #388]	; (8004234 <BSP_LCD_MspInit+0x190>)
 80040b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b2:	4a60      	ldr	r2, [pc, #384]	; (8004234 <BSP_LCD_MspInit+0x190>)
 80040b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040b8:	6453      	str	r3, [r2, #68]	; 0x44
 80040ba:	4b5e      	ldr	r3, [pc, #376]	; (8004234 <BSP_LCD_MspInit+0x190>)
 80040bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040c2:	623b      	str	r3, [r7, #32]
 80040c4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80040c6:	2300      	movs	r3, #0
 80040c8:	61fb      	str	r3, [r7, #28]
 80040ca:	4b5a      	ldr	r3, [pc, #360]	; (8004234 <BSP_LCD_MspInit+0x190>)
 80040cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ce:	4a59      	ldr	r2, [pc, #356]	; (8004234 <BSP_LCD_MspInit+0x190>)
 80040d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80040d4:	6313      	str	r3, [r2, #48]	; 0x30
 80040d6:	4b57      	ldr	r3, [pc, #348]	; (8004234 <BSP_LCD_MspInit+0x190>)
 80040d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040de:	61fb      	str	r3, [r7, #28]
 80040e0:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040e2:	2300      	movs	r3, #0
 80040e4:	61bb      	str	r3, [r7, #24]
 80040e6:	4b53      	ldr	r3, [pc, #332]	; (8004234 <BSP_LCD_MspInit+0x190>)
 80040e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ea:	4a52      	ldr	r2, [pc, #328]	; (8004234 <BSP_LCD_MspInit+0x190>)
 80040ec:	f043 0301 	orr.w	r3, r3, #1
 80040f0:	6313      	str	r3, [r2, #48]	; 0x30
 80040f2:	4b50      	ldr	r3, [pc, #320]	; (8004234 <BSP_LCD_MspInit+0x190>)
 80040f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	61bb      	str	r3, [r7, #24]
 80040fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040fe:	2300      	movs	r3, #0
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	4b4c      	ldr	r3, [pc, #304]	; (8004234 <BSP_LCD_MspInit+0x190>)
 8004104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004106:	4a4b      	ldr	r2, [pc, #300]	; (8004234 <BSP_LCD_MspInit+0x190>)
 8004108:	f043 0302 	orr.w	r3, r3, #2
 800410c:	6313      	str	r3, [r2, #48]	; 0x30
 800410e:	4b49      	ldr	r3, [pc, #292]	; (8004234 <BSP_LCD_MspInit+0x190>)
 8004110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800411a:	2300      	movs	r3, #0
 800411c:	613b      	str	r3, [r7, #16]
 800411e:	4b45      	ldr	r3, [pc, #276]	; (8004234 <BSP_LCD_MspInit+0x190>)
 8004120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004122:	4a44      	ldr	r2, [pc, #272]	; (8004234 <BSP_LCD_MspInit+0x190>)
 8004124:	f043 0304 	orr.w	r3, r3, #4
 8004128:	6313      	str	r3, [r2, #48]	; 0x30
 800412a:	4b42      	ldr	r3, [pc, #264]	; (8004234 <BSP_LCD_MspInit+0x190>)
 800412c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412e:	f003 0304 	and.w	r3, r3, #4
 8004132:	613b      	str	r3, [r7, #16]
 8004134:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004136:	2300      	movs	r3, #0
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	4b3e      	ldr	r3, [pc, #248]	; (8004234 <BSP_LCD_MspInit+0x190>)
 800413c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413e:	4a3d      	ldr	r2, [pc, #244]	; (8004234 <BSP_LCD_MspInit+0x190>)
 8004140:	f043 0308 	orr.w	r3, r3, #8
 8004144:	6313      	str	r3, [r2, #48]	; 0x30
 8004146:	4b3b      	ldr	r3, [pc, #236]	; (8004234 <BSP_LCD_MspInit+0x190>)
 8004148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414a:	f003 0308 	and.w	r3, r3, #8
 800414e:	60fb      	str	r3, [r7, #12]
 8004150:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004152:	2300      	movs	r3, #0
 8004154:	60bb      	str	r3, [r7, #8]
 8004156:	4b37      	ldr	r3, [pc, #220]	; (8004234 <BSP_LCD_MspInit+0x190>)
 8004158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415a:	4a36      	ldr	r2, [pc, #216]	; (8004234 <BSP_LCD_MspInit+0x190>)
 800415c:	f043 0320 	orr.w	r3, r3, #32
 8004160:	6313      	str	r3, [r2, #48]	; 0x30
 8004162:	4b34      	ldr	r3, [pc, #208]	; (8004234 <BSP_LCD_MspInit+0x190>)
 8004164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004166:	f003 0320 	and.w	r3, r3, #32
 800416a:	60bb      	str	r3, [r7, #8]
 800416c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800416e:	2300      	movs	r3, #0
 8004170:	607b      	str	r3, [r7, #4]
 8004172:	4b30      	ldr	r3, [pc, #192]	; (8004234 <BSP_LCD_MspInit+0x190>)
 8004174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004176:	4a2f      	ldr	r2, [pc, #188]	; (8004234 <BSP_LCD_MspInit+0x190>)
 8004178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800417c:	6313      	str	r3, [r2, #48]	; 0x30
 800417e:	4b2d      	ldr	r3, [pc, #180]	; (8004234 <BSP_LCD_MspInit+0x190>)
 8004180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004186:	607b      	str	r3, [r7, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800418a:	f641 0358 	movw	r3, #6232	; 0x1858
 800418e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8004190:	2302      	movs	r3, #2
 8004192:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8004194:	2300      	movs	r3, #0
 8004196:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8004198:	2302      	movs	r3, #2
 800419a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate = GPIO_AF14_LTDC;
 800419c:	230e      	movs	r3, #14
 800419e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80041a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041a4:	4619      	mov	r1, r3
 80041a6:	4824      	ldr	r0, [pc, #144]	; (8004238 <BSP_LCD_MspInit+0x194>)
 80041a8:	f001 fa5a 	bl	8005660 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80041ac:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80041b0:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80041b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041b6:	4619      	mov	r1, r3
 80041b8:	4820      	ldr	r0, [pc, #128]	; (800423c <BSP_LCD_MspInit+0x198>)
 80041ba:	f001 fa51 	bl	8005660 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80041be:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80041c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80041c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041c8:	4619      	mov	r1, r3
 80041ca:	481d      	ldr	r0, [pc, #116]	; (8004240 <BSP_LCD_MspInit+0x19c>)
 80041cc:	f001 fa48 	bl	8005660 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80041d0:	2348      	movs	r3, #72	; 0x48
 80041d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80041d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041d8:	4619      	mov	r1, r3
 80041da:	481a      	ldr	r0, [pc, #104]	; (8004244 <BSP_LCD_MspInit+0x1a0>)
 80041dc:	f001 fa40 	bl	8005660 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80041e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80041e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041ea:	4619      	mov	r1, r3
 80041ec:	4816      	ldr	r0, [pc, #88]	; (8004248 <BSP_LCD_MspInit+0x1a4>)
 80041ee:	f001 fa37 	bl	8005660 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80041f2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80041f6:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80041f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041fc:	4619      	mov	r1, r3
 80041fe:	4813      	ldr	r0, [pc, #76]	; (800424c <BSP_LCD_MspInit+0x1a8>)
 8004200:	f001 fa2e 	bl	8005660 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8004204:	2303      	movs	r3, #3
 8004206:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate = GPIO_AF9_LTDC;
 8004208:	2309      	movs	r3, #9
 800420a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800420c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004210:	4619      	mov	r1, r3
 8004212:	480a      	ldr	r0, [pc, #40]	; (800423c <BSP_LCD_MspInit+0x198>)
 8004214:	f001 fa24 	bl	8005660 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8004218:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800421c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800421e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004222:	4619      	mov	r1, r3
 8004224:	4809      	ldr	r0, [pc, #36]	; (800424c <BSP_LCD_MspInit+0x1a8>)
 8004226:	f001 fa1b 	bl	8005660 <HAL_GPIO_Init>
}
 800422a:	bf00      	nop
 800422c:	3738      	adds	r7, #56	; 0x38
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40023800 	.word	0x40023800
 8004238:	40020000 	.word	0x40020000
 800423c:	40020400 	.word	0x40020400
 8004240:	40020800 	.word	0x40020800
 8004244:	40020c00 	.word	0x40020c00
 8004248:	40021400 	.word	0x40021400
 800424c:	40021800 	.word	0x40021800

08004250 <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index
  */
static void FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine,
                       uint32_t ColorIndex)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af02      	add	r7, sp, #8
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
 800425c:	603b      	str	r3, [r7, #0]

  /* Register to memory mode with ARGB8888 as color Mode */
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 800425e:	4b16      	ldr	r3, [pc, #88]	; (80042b8 <FillBuffer+0x68>)
 8004260:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004264:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004266:	4b14      	ldr	r3, [pc, #80]	; (80042b8 <FillBuffer+0x68>)
 8004268:	2200      	movs	r2, #0
 800426a:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;
 800426c:	4a12      	ldr	r2, [pc, #72]	; (80042b8 <FillBuffer+0x68>)
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	60d3      	str	r3, [r2, #12]

  Dma2dHandler.Instance = DMA2D;
 8004272:	4b11      	ldr	r3, [pc, #68]	; (80042b8 <FillBuffer+0x68>)
 8004274:	4a11      	ldr	r2, [pc, #68]	; (80042bc <FillBuffer+0x6c>)
 8004276:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK)
 8004278:	480f      	ldr	r0, [pc, #60]	; (80042b8 <FillBuffer+0x68>)
 800427a:	f000 fe55 	bl	8004f28 <HAL_DMA2D_Init>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d115      	bne.n	80042b0 <FillBuffer+0x60>
  {
    if (HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK)
 8004284:	68f9      	ldr	r1, [r7, #12]
 8004286:	480c      	ldr	r0, [pc, #48]	; (80042b8 <FillBuffer+0x68>)
 8004288:	f001 f8bc 	bl	8005404 <HAL_DMA2D_ConfigLayer>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10e      	bne.n	80042b0 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	69f9      	ldr	r1, [r7, #28]
 800429c:	4806      	ldr	r0, [pc, #24]	; (80042b8 <FillBuffer+0x68>)
 800429e:	f000 fe8c 	bl	8004fba <HAL_DMA2D_Start>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d103      	bne.n	80042b0 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80042a8:	210a      	movs	r1, #10
 80042aa:	4803      	ldr	r0, [pc, #12]	; (80042b8 <FillBuffer+0x68>)
 80042ac:	f000 feb0 	bl	8005010 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80042b0:	bf00      	nop
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	20003a8c 	.word	0x20003a8c
 80042bc:	4002b000 	.word	0x4002b000

080042c0 <BSP_LCD_DrawBitmap_RGB565>:
    }
  }
}

void BSP_LCD_DrawBitmap_RGB565(uint32_t X, uint32_t Y, uint8_t *pBmp, uint32_t width, uint32_t height)
{
 80042c0:	b590      	push	{r4, r7, lr}
 80042c2:	b08b      	sub	sp, #44	; 0x2c
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
 80042cc:	603b      	str	r3, [r7, #0]
	uint32_t address;
	    uint16_t *dest_ptr;
	    uint32_t index = 0;
 80042ce:	2300      	movs	r3, #0
 80042d0:	623b      	str	r3, [r7, #32]

	    /* Set Address */
	    address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + ((BSP_LCD_GetXSize() * Y) + X) * 2; // Each pixel takes 2 bytes
 80042d2:	4b27      	ldr	r3, [pc, #156]	; (8004370 <BSP_LCD_DrawBitmap_RGB565+0xb0>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a27      	ldr	r2, [pc, #156]	; (8004374 <BSP_LCD_DrawBitmap_RGB565+0xb4>)
 80042d8:	2134      	movs	r1, #52	; 0x34
 80042da:	fb01 f303 	mul.w	r3, r1, r3
 80042de:	4413      	add	r3, r2
 80042e0:	335c      	adds	r3, #92	; 0x5c
 80042e2:	681c      	ldr	r4, [r3, #0]
 80042e4:	f7ff fe00 	bl	8003ee8 <BSP_LCD_GetXSize>
 80042e8:	4602      	mov	r2, r0
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	fb03 f202 	mul.w	r2, r3, r2
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	4413      	add	r3, r2
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	4423      	add	r3, r4
 80042f8:	617b      	str	r3, [r7, #20]

	    /* Draw the bitmap */
	    for (uint32_t y = 0; y < height; y++)
 80042fa:	2300      	movs	r3, #0
 80042fc:	61fb      	str	r3, [r7, #28]
 80042fe:	e02d      	b.n	800435c <BSP_LCD_DrawBitmap_RGB565+0x9c>
	    {
	        dest_ptr = (uint16_t *)(address + y * BSP_LCD_GetXSize() * 2);
 8004300:	f7ff fdf2 	bl	8003ee8 <BSP_LCD_GetXSize>
 8004304:	4602      	mov	r2, r0
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	fb02 f303 	mul.w	r3, r2, r3
 800430c:	005a      	lsls	r2, r3, #1
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	4413      	add	r3, r2
 8004312:	627b      	str	r3, [r7, #36]	; 0x24
	        for (uint32_t x = 0; x < width; x++)
 8004314:	2300      	movs	r3, #0
 8004316:	61bb      	str	r3, [r7, #24]
 8004318:	e019      	b.n	800434e <BSP_LCD_DrawBitmap_RGB565+0x8e>
	        {
	            // Pobierz dane piksela RGB565 (2 bajty na piksel)
	            uint16_t pixel_data = pBmp[index] | (pBmp[index + 1] << 8);
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6a3b      	ldr	r3, [r7, #32]
 800431e:	4413      	add	r3, r2
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	b21a      	sxth	r2, r3
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	3301      	adds	r3, #1
 8004328:	6879      	ldr	r1, [r7, #4]
 800432a:	440b      	add	r3, r1
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	021b      	lsls	r3, r3, #8
 8004330:	b21b      	sxth	r3, r3
 8004332:	4313      	orrs	r3, r2
 8004334:	b21b      	sxth	r3, r3
 8004336:	827b      	strh	r3, [r7, #18]

	            // Zapisz dane piksela do bufora ramki
	            *dest_ptr++ = pixel_data;
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	1c9a      	adds	r2, r3, #2
 800433c:	627a      	str	r2, [r7, #36]	; 0x24
 800433e:	8a7a      	ldrh	r2, [r7, #18]
 8004340:	801a      	strh	r2, [r3, #0]

	            // Przejdź do następnego piksela
	            index += 2;
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	3302      	adds	r3, #2
 8004346:	623b      	str	r3, [r7, #32]
	        for (uint32_t x = 0; x < width; x++)
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	3301      	adds	r3, #1
 800434c:	61bb      	str	r3, [r7, #24]
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	429a      	cmp	r2, r3
 8004354:	d3e1      	bcc.n	800431a <BSP_LCD_DrawBitmap_RGB565+0x5a>
	    for (uint32_t y = 0; y < height; y++)
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	3301      	adds	r3, #1
 800435a:	61fb      	str	r3, [r7, #28]
 800435c:	69fa      	ldr	r2, [r7, #28]
 800435e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004360:	429a      	cmp	r2, r3
 8004362:	d3cd      	bcc.n	8004300 <BSP_LCD_DrawBitmap_RGB565+0x40>
	        }
	    }
	}
 8004364:	bf00      	nop
 8004366:	bf00      	nop
 8004368:	372c      	adds	r7, #44	; 0x2c
 800436a:	46bd      	mov	sp, r7
 800436c:	bd90      	pop	{r4, r7, pc}
 800436e:	bf00      	nop
 8004370:	20003afc 	.word	0x20003afc
 8004374:	200039d0 	.word	0x200039d0

08004378 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 800437c:	4b29      	ldr	r3, [pc, #164]	; (8004424 <BSP_SDRAM_Init+0xac>)
 800437e:	4a2a      	ldr	r2, [pc, #168]	; (8004428 <BSP_SDRAM_Init+0xb0>)
 8004380:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8004382:	4b2a      	ldr	r3, [pc, #168]	; (800442c <BSP_SDRAM_Init+0xb4>)
 8004384:	2202      	movs	r2, #2
 8004386:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8004388:	4b28      	ldr	r3, [pc, #160]	; (800442c <BSP_SDRAM_Init+0xb4>)
 800438a:	2207      	movs	r2, #7
 800438c:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800438e:	4b27      	ldr	r3, [pc, #156]	; (800442c <BSP_SDRAM_Init+0xb4>)
 8004390:	2204      	movs	r2, #4
 8004392:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8004394:	4b25      	ldr	r3, [pc, #148]	; (800442c <BSP_SDRAM_Init+0xb4>)
 8004396:	2207      	movs	r2, #7
 8004398:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800439a:	4b24      	ldr	r3, [pc, #144]	; (800442c <BSP_SDRAM_Init+0xb4>)
 800439c:	2202      	movs	r2, #2
 800439e:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80043a0:	4b22      	ldr	r3, [pc, #136]	; (800442c <BSP_SDRAM_Init+0xb4>)
 80043a2:	2202      	movs	r2, #2
 80043a4:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80043a6:	4b21      	ldr	r3, [pc, #132]	; (800442c <BSP_SDRAM_Init+0xb4>)
 80043a8:	2202      	movs	r2, #2
 80043aa:	619a      	str	r2, [r3, #24]

  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80043ac:	4b1d      	ldr	r3, [pc, #116]	; (8004424 <BSP_SDRAM_Init+0xac>)
 80043ae:	2201      	movs	r2, #1
 80043b0:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80043b2:	4b1c      	ldr	r3, [pc, #112]	; (8004424 <BSP_SDRAM_Init+0xac>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80043b8:	4b1a      	ldr	r3, [pc, #104]	; (8004424 <BSP_SDRAM_Init+0xac>)
 80043ba:	2204      	movs	r2, #4
 80043bc:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80043be:	4b19      	ldr	r3, [pc, #100]	; (8004424 <BSP_SDRAM_Init+0xac>)
 80043c0:	2210      	movs	r2, #16
 80043c2:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80043c4:	4b17      	ldr	r3, [pc, #92]	; (8004424 <BSP_SDRAM_Init+0xac>)
 80043c6:	2240      	movs	r2, #64	; 0x40
 80043c8:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80043ca:	4b16      	ldr	r3, [pc, #88]	; (8004424 <BSP_SDRAM_Init+0xac>)
 80043cc:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80043d0:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80043d2:	4b14      	ldr	r3, [pc, #80]	; (8004424 <BSP_SDRAM_Init+0xac>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80043d8:	4b12      	ldr	r3, [pc, #72]	; (8004424 <BSP_SDRAM_Init+0xac>)
 80043da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043de:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80043e0:	4b10      	ldr	r3, [pc, #64]	; (8004424 <BSP_SDRAM_Init+0xac>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80043e6:	4b0f      	ldr	r3, [pc, #60]	; (8004424 <BSP_SDRAM_Init+0xac>)
 80043e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80043ee:	2100      	movs	r1, #0
 80043f0:	480c      	ldr	r0, [pc, #48]	; (8004424 <BSP_SDRAM_Init+0xac>)
 80043f2:	f000 f87f 	bl	80044f4 <BSP_SDRAM_MspInit>
  if (HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80043f6:	490d      	ldr	r1, [pc, #52]	; (800442c <BSP_SDRAM_Init+0xb4>)
 80043f8:	480a      	ldr	r0, [pc, #40]	; (8004424 <BSP_SDRAM_Init+0xac>)
 80043fa:	f006 f90f 	bl	800a61c <HAL_SDRAM_Init>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004404:	4b0a      	ldr	r3, [pc, #40]	; (8004430 <BSP_SDRAM_Init+0xb8>)
 8004406:	2201      	movs	r2, #1
 8004408:	701a      	strb	r2, [r3, #0]
 800440a:	e002      	b.n	8004412 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800440c:	4b08      	ldr	r3, [pc, #32]	; (8004430 <BSP_SDRAM_Init+0xb8>)
 800440e:	2200      	movs	r2, #0
 8004410:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004412:	f240 506a 	movw	r0, #1386	; 0x56a
 8004416:	f000 f80d 	bl	8004434 <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 800441a:	4b05      	ldr	r3, [pc, #20]	; (8004430 <BSP_SDRAM_Init+0xb8>)
 800441c:	781b      	ldrb	r3, [r3, #0]
}
 800441e:	4618      	mov	r0, r3
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20003b1c 	.word	0x20003b1c
 8004428:	a0000140 	.word	0xa0000140
 800442c:	20003b50 	.word	0x20003b50
 8004430:	20002c74 	.word	0x20002c74

08004434 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 800443c:	2300      	movs	r3, #0
 800443e:	60fb      	str	r3, [r7, #12]

  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8004440:	4b2a      	ldr	r3, [pc, #168]	; (80044ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004442:	2201      	movs	r2, #1
 8004444:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004446:	4b29      	ldr	r3, [pc, #164]	; (80044ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004448:	2208      	movs	r2, #8
 800444a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800444c:	4b27      	ldr	r3, [pc, #156]	; (80044ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 800444e:	2201      	movs	r2, #1
 8004450:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004452:	4b26      	ldr	r3, [pc, #152]	; (80044ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004454:	2200      	movs	r2, #0
 8004456:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004458:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800445c:	4923      	ldr	r1, [pc, #140]	; (80044ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 800445e:	4824      	ldr	r0, [pc, #144]	; (80044f0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004460:	f006 f910 	bl	800a684 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004464:	2001      	movs	r0, #1
 8004466:	f000 fa7f 	bl	8004968 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800446a:	4b20      	ldr	r3, [pc, #128]	; (80044ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 800446c:	2202      	movs	r2, #2
 800446e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004470:	4b1e      	ldr	r3, [pc, #120]	; (80044ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004472:	2208      	movs	r2, #8
 8004474:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004476:	4b1d      	ldr	r3, [pc, #116]	; (80044ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004478:	2201      	movs	r2, #1
 800447a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800447c:	4b1b      	ldr	r3, [pc, #108]	; (80044ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 800447e:	2200      	movs	r2, #0
 8004480:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004482:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004486:	4919      	ldr	r1, [pc, #100]	; (80044ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004488:	4819      	ldr	r0, [pc, #100]	; (80044f0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800448a:	f006 f8fb 	bl	800a684 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800448e:	4b17      	ldr	r3, [pc, #92]	; (80044ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004490:	2203      	movs	r2, #3
 8004492:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004494:	4b15      	ldr	r3, [pc, #84]	; (80044ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004496:	2208      	movs	r2, #8
 8004498:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800449a:	4b14      	ldr	r3, [pc, #80]	; (80044ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 800449c:	2204      	movs	r2, #4
 800449e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80044a0:	4b12      	ldr	r3, [pc, #72]	; (80044ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80044a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044aa:	4910      	ldr	r1, [pc, #64]	; (80044ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044ac:	4810      	ldr	r0, [pc, #64]	; (80044f0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80044ae:	f006 f8e9 	bl	800a684 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80044b2:	f44f 730c 	mov.w	r3, #560	; 0x230
 80044b6:	60fb      	str	r3, [r7, #12]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
           SDRAM_MODEREG_CAS_LATENCY_3           |
           SDRAM_MODEREG_OPERATING_MODE_STANDARD |
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80044b8:	4b0c      	ldr	r3, [pc, #48]	; (80044ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044ba:	2204      	movs	r2, #4
 80044bc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80044be:	4b0b      	ldr	r3, [pc, #44]	; (80044ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044c0:	2208      	movs	r2, #8
 80044c2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80044c4:	4b09      	ldr	r3, [pc, #36]	; (80044ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044c6:	2201      	movs	r2, #1
 80044c8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	4a07      	ldr	r2, [pc, #28]	; (80044ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044ce:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80044d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044d4:	4905      	ldr	r1, [pc, #20]	; (80044ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044d6:	4806      	ldr	r0, [pc, #24]	; (80044f0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80044d8:	f006 f8d4 	bl	800a684 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount);
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	4804      	ldr	r0, [pc, #16]	; (80044f0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80044e0:	f006 f905 	bl	800a6ee <HAL_SDRAM_ProgramRefreshRate>
}
 80044e4:	bf00      	nop
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	20003b6c 	.word	0x20003b6c
 80044f0:	20003b1c 	.word	0x20003b1c

080044f4 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b090      	sub	sp, #64	; 0x40
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if (hsdram != (SDRAM_HandleTypeDef *)NULL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 80ec 	beq.w	80046de <BSP_SDRAM_MspInit+0x1ea>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 8004506:	2300      	movs	r3, #0
 8004508:	62bb      	str	r3, [r7, #40]	; 0x28
 800450a:	4b77      	ldr	r3, [pc, #476]	; (80046e8 <BSP_SDRAM_MspInit+0x1f4>)
 800450c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450e:	4a76      	ldr	r2, [pc, #472]	; (80046e8 <BSP_SDRAM_MspInit+0x1f4>)
 8004510:	f043 0301 	orr.w	r3, r3, #1
 8004514:	6393      	str	r3, [r2, #56]	; 0x38
 8004516:	4b74      	ldr	r3, [pc, #464]	; (80046e8 <BSP_SDRAM_MspInit+0x1f4>)
 8004518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004520:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 8004522:	2300      	movs	r3, #0
 8004524:	627b      	str	r3, [r7, #36]	; 0x24
 8004526:	4b70      	ldr	r3, [pc, #448]	; (80046e8 <BSP_SDRAM_MspInit+0x1f4>)
 8004528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452a:	4a6f      	ldr	r2, [pc, #444]	; (80046e8 <BSP_SDRAM_MspInit+0x1f4>)
 800452c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004530:	6313      	str	r3, [r2, #48]	; 0x30
 8004532:	4b6d      	ldr	r3, [pc, #436]	; (80046e8 <BSP_SDRAM_MspInit+0x1f4>)
 8004534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800453a:	627b      	str	r3, [r7, #36]	; 0x24
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800453e:	2300      	movs	r3, #0
 8004540:	623b      	str	r3, [r7, #32]
 8004542:	4b69      	ldr	r3, [pc, #420]	; (80046e8 <BSP_SDRAM_MspInit+0x1f4>)
 8004544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004546:	4a68      	ldr	r2, [pc, #416]	; (80046e8 <BSP_SDRAM_MspInit+0x1f4>)
 8004548:	f043 0302 	orr.w	r3, r3, #2
 800454c:	6313      	str	r3, [r2, #48]	; 0x30
 800454e:	4b66      	ldr	r3, [pc, #408]	; (80046e8 <BSP_SDRAM_MspInit+0x1f4>)
 8004550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	623b      	str	r3, [r7, #32]
 8004558:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800455a:	2300      	movs	r3, #0
 800455c:	61fb      	str	r3, [r7, #28]
 800455e:	4b62      	ldr	r3, [pc, #392]	; (80046e8 <BSP_SDRAM_MspInit+0x1f4>)
 8004560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004562:	4a61      	ldr	r2, [pc, #388]	; (80046e8 <BSP_SDRAM_MspInit+0x1f4>)
 8004564:	f043 0304 	orr.w	r3, r3, #4
 8004568:	6313      	str	r3, [r2, #48]	; 0x30
 800456a:	4b5f      	ldr	r3, [pc, #380]	; (80046e8 <BSP_SDRAM_MspInit+0x1f4>)
 800456c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456e:	f003 0304 	and.w	r3, r3, #4
 8004572:	61fb      	str	r3, [r7, #28]
 8004574:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004576:	2300      	movs	r3, #0
 8004578:	61bb      	str	r3, [r7, #24]
 800457a:	4b5b      	ldr	r3, [pc, #364]	; (80046e8 <BSP_SDRAM_MspInit+0x1f4>)
 800457c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457e:	4a5a      	ldr	r2, [pc, #360]	; (80046e8 <BSP_SDRAM_MspInit+0x1f4>)
 8004580:	f043 0308 	orr.w	r3, r3, #8
 8004584:	6313      	str	r3, [r2, #48]	; 0x30
 8004586:	4b58      	ldr	r3, [pc, #352]	; (80046e8 <BSP_SDRAM_MspInit+0x1f4>)
 8004588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	61bb      	str	r3, [r7, #24]
 8004590:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004592:	2300      	movs	r3, #0
 8004594:	617b      	str	r3, [r7, #20]
 8004596:	4b54      	ldr	r3, [pc, #336]	; (80046e8 <BSP_SDRAM_MspInit+0x1f4>)
 8004598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459a:	4a53      	ldr	r2, [pc, #332]	; (80046e8 <BSP_SDRAM_MspInit+0x1f4>)
 800459c:	f043 0310 	orr.w	r3, r3, #16
 80045a0:	6313      	str	r3, [r2, #48]	; 0x30
 80045a2:	4b51      	ldr	r3, [pc, #324]	; (80046e8 <BSP_SDRAM_MspInit+0x1f4>)
 80045a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a6:	f003 0310 	and.w	r3, r3, #16
 80045aa:	617b      	str	r3, [r7, #20]
 80045ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80045ae:	2300      	movs	r3, #0
 80045b0:	613b      	str	r3, [r7, #16]
 80045b2:	4b4d      	ldr	r3, [pc, #308]	; (80046e8 <BSP_SDRAM_MspInit+0x1f4>)
 80045b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b6:	4a4c      	ldr	r2, [pc, #304]	; (80046e8 <BSP_SDRAM_MspInit+0x1f4>)
 80045b8:	f043 0320 	orr.w	r3, r3, #32
 80045bc:	6313      	str	r3, [r2, #48]	; 0x30
 80045be:	4b4a      	ldr	r3, [pc, #296]	; (80046e8 <BSP_SDRAM_MspInit+0x1f4>)
 80045c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c2:	f003 0320 	and.w	r3, r3, #32
 80045c6:	613b      	str	r3, [r7, #16]
 80045c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80045ca:	2300      	movs	r3, #0
 80045cc:	60fb      	str	r3, [r7, #12]
 80045ce:	4b46      	ldr	r3, [pc, #280]	; (80046e8 <BSP_SDRAM_MspInit+0x1f4>)
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	4a45      	ldr	r2, [pc, #276]	; (80046e8 <BSP_SDRAM_MspInit+0x1f4>)
 80045d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045d8:	6313      	str	r3, [r2, #48]	; 0x30
 80045da:	4b43      	ldr	r3, [pc, #268]	; (80046e8 <BSP_SDRAM_MspInit+0x1f4>)
 80045dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e2:	60fb      	str	r3, [r7, #12]
 80045e4:	68fb      	ldr	r3, [r7, #12]
     +-------------------+

    */

    /* Common GPIO configuration */
    GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80045e6:	2302      	movs	r3, #2
 80045e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80045ea:	2302      	movs	r3, #2
 80045ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80045ee:	2300      	movs	r3, #0
 80045f0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80045f2:	230c      	movs	r3, #12
 80045f4:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* GPIOB configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80045f6:	2360      	movs	r3, #96	; 0x60
 80045f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80045fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045fe:	4619      	mov	r1, r3
 8004600:	483a      	ldr	r0, [pc, #232]	; (80046ec <BSP_SDRAM_MspInit+0x1f8>)
 8004602:	f001 f82d 	bl	8005660 <HAL_GPIO_Init>

    /* GPIOC configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0;
 8004606:	2301      	movs	r3, #1
 8004608:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800460a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800460e:	4619      	mov	r1, r3
 8004610:	4837      	ldr	r0, [pc, #220]	; (80046f0 <BSP_SDRAM_MspInit+0x1fc>)
 8004612:	f001 f825 	bl	8005660 <HAL_GPIO_Init>

    /* GPIOD configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8004616:	f24c 7303 	movw	r3, #50947	; 0xc703
 800461a:	62fb      	str	r3, [r7, #44]	; 0x2c
                             GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                             GPIO_PIN_15;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800461c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004620:	4619      	mov	r1, r3
 8004622:	4834      	ldr	r0, [pc, #208]	; (80046f4 <BSP_SDRAM_MspInit+0x200>)
 8004624:	f001 f81c 	bl	8005660 <HAL_GPIO_Init>

    /* GPIOE configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8004628:	f64f 7383 	movw	r3, #65411	; 0xff83
 800462c:	62fb      	str	r3, [r7, #44]	; 0x2c
                             GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800462e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004632:	4619      	mov	r1, r3
 8004634:	4830      	ldr	r0, [pc, #192]	; (80046f8 <BSP_SDRAM_MspInit+0x204>)
 8004636:	f001 f813 	bl	8005660 <HAL_GPIO_Init>

    /* GPIOF configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 |
 800463a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800463e:	62fb      	str	r3, [r7, #44]	; 0x2c
                             GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8004640:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004644:	4619      	mov	r1, r3
 8004646:	482d      	ldr	r0, [pc, #180]	; (80046fc <BSP_SDRAM_MspInit+0x208>)
 8004648:	f001 f80a 	bl	8005660 <HAL_GPIO_Init>

    /* GPIOG configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 800464c:	f248 1333 	movw	r3, #33075	; 0x8133
 8004650:	62fb      	str	r3, [r7, #44]	; 0x2c
                             GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004652:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004656:	4619      	mov	r1, r3
 8004658:	4829      	ldr	r0, [pc, #164]	; (8004700 <BSP_SDRAM_MspInit+0x20c>)
 800465a:	f001 f801 	bl	8005660 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800465e:	4b29      	ldr	r3, [pc, #164]	; (8004704 <BSP_SDRAM_MspInit+0x210>)
 8004660:	2200      	movs	r2, #0
 8004662:	605a      	str	r2, [r3, #4]
    dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004664:	4b27      	ldr	r3, [pc, #156]	; (8004704 <BSP_SDRAM_MspInit+0x210>)
 8004666:	2280      	movs	r2, #128	; 0x80
 8004668:	609a      	str	r2, [r3, #8]
    dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800466a:	4b26      	ldr	r3, [pc, #152]	; (8004704 <BSP_SDRAM_MspInit+0x210>)
 800466c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004670:	60da      	str	r2, [r3, #12]
    dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8004672:	4b24      	ldr	r3, [pc, #144]	; (8004704 <BSP_SDRAM_MspInit+0x210>)
 8004674:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004678:	611a      	str	r2, [r3, #16]
    dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800467a:	4b22      	ldr	r3, [pc, #136]	; (8004704 <BSP_SDRAM_MspInit+0x210>)
 800467c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004680:	615a      	str	r2, [r3, #20]
    dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004682:	4b20      	ldr	r3, [pc, #128]	; (8004704 <BSP_SDRAM_MspInit+0x210>)
 8004684:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004688:	619a      	str	r2, [r3, #24]
    dmaHandle.Init.Mode                = DMA_NORMAL;
 800468a:	4b1e      	ldr	r3, [pc, #120]	; (8004704 <BSP_SDRAM_MspInit+0x210>)
 800468c:	2200      	movs	r2, #0
 800468e:	61da      	str	r2, [r3, #28]
    dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004690:	4b1c      	ldr	r3, [pc, #112]	; (8004704 <BSP_SDRAM_MspInit+0x210>)
 8004692:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004696:	621a      	str	r2, [r3, #32]
    dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004698:	4b1a      	ldr	r3, [pc, #104]	; (8004704 <BSP_SDRAM_MspInit+0x210>)
 800469a:	2200      	movs	r2, #0
 800469c:	625a      	str	r2, [r3, #36]	; 0x24
    dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800469e:	4b19      	ldr	r3, [pc, #100]	; (8004704 <BSP_SDRAM_MspInit+0x210>)
 80046a0:	2203      	movs	r2, #3
 80046a2:	629a      	str	r2, [r3, #40]	; 0x28
    dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80046a4:	4b17      	ldr	r3, [pc, #92]	; (8004704 <BSP_SDRAM_MspInit+0x210>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	62da      	str	r2, [r3, #44]	; 0x2c
    dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 80046aa:	4b16      	ldr	r3, [pc, #88]	; (8004704 <BSP_SDRAM_MspInit+0x210>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	631a      	str	r2, [r3, #48]	; 0x30

    dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80046b0:	4b14      	ldr	r3, [pc, #80]	; (8004704 <BSP_SDRAM_MspInit+0x210>)
 80046b2:	4a15      	ldr	r2, [pc, #84]	; (8004708 <BSP_SDRAM_MspInit+0x214>)
 80046b4:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a12      	ldr	r2, [pc, #72]	; (8004704 <BSP_SDRAM_MspInit+0x210>)
 80046ba:	631a      	str	r2, [r3, #48]	; 0x30
 80046bc:	4a11      	ldr	r2, [pc, #68]	; (8004704 <BSP_SDRAM_MspInit+0x210>)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dmaHandle);
 80046c2:	4810      	ldr	r0, [pc, #64]	; (8004704 <BSP_SDRAM_MspInit+0x210>)
 80046c4:	f000 fb20 	bl	8004d08 <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dmaHandle);
 80046c8:	480e      	ldr	r0, [pc, #56]	; (8004704 <BSP_SDRAM_MspInit+0x210>)
 80046ca:	f000 fa6f 	bl	8004bac <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80046ce:	2200      	movs	r2, #0
 80046d0:	210f      	movs	r1, #15
 80046d2:	2038      	movs	r0, #56	; 0x38
 80046d4:	f000 fa24 	bl	8004b20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80046d8:	2038      	movs	r0, #56	; 0x38
 80046da:	f000 fa3d 	bl	8004b58 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80046de:	bf00      	nop
 80046e0:	3740      	adds	r7, #64	; 0x40
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	40023800 	.word	0x40023800
 80046ec:	40020400 	.word	0x40020400
 80046f0:	40020800 	.word	0x40020800
 80046f4:	40020c00 	.word	0x40020c00
 80046f8:	40021000 	.word	0x40021000
 80046fc:	40021400 	.word	0x40021400
 8004700:	40021800 	.word	0x40021800
 8004704:	20003b7c 	.word	0x20003b7c
 8004708:	40026410 	.word	0x40026410

0800470c <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	4603      	mov	r3, r0
 8004714:	460a      	mov	r2, r1
 8004716:	80fb      	strh	r3, [r7, #6]
 8004718:	4613      	mov	r3, r2
 800471a:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8004720:	4a13      	ldr	r2, [pc, #76]	; (8004770 <BSP_TS_Init+0x64>)
 8004722:	88fb      	ldrh	r3, [r7, #6]
 8004724:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8004726:	4a13      	ldr	r2, [pc, #76]	; (8004774 <BSP_TS_Init+0x68>)
 8004728:	88bb      	ldrh	r3, [r7, #4]
 800472a:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 800472c:	4b12      	ldr	r3, [pc, #72]	; (8004778 <BSP_TS_Init+0x6c>)
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	2082      	movs	r0, #130	; 0x82
 8004732:	4798      	blx	r3
 8004734:	4603      	mov	r3, r0
 8004736:	461a      	mov	r2, r3
 8004738:	f640 0311 	movw	r3, #2065	; 0x811
 800473c:	429a      	cmp	r2, r3
 800473e:	d104      	bne.n	800474a <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8004740:	4b0e      	ldr	r3, [pc, #56]	; (800477c <BSP_TS_Init+0x70>)
 8004742:	4a0d      	ldr	r2, [pc, #52]	; (8004778 <BSP_TS_Init+0x6c>)
 8004744:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8004746:	2300      	movs	r3, #0
 8004748:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == TS_OK)
 800474a:	7bfb      	ldrb	r3, [r7, #15]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d109      	bne.n	8004764 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8004750:	4b0a      	ldr	r3, [pc, #40]	; (800477c <BSP_TS_Init+0x70>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2082      	movs	r0, #130	; 0x82
 8004758:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 800475a:	4b08      	ldr	r3, [pc, #32]	; (800477c <BSP_TS_Init+0x70>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	2082      	movs	r0, #130	; 0x82
 8004762:	4798      	blx	r3
  }

  return ret;
 8004764:	7bfb      	ldrb	r3, [r7, #15]
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	20003be0 	.word	0x20003be0
 8004774:	20003be2 	.word	0x20003be2
 8004778:	20002c34 	.word	0x20002c34
 800477c:	20003bdc 	.word	0x20003bdc

08004780 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef *TsState)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff, x, y, xr, yr;

  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8004788:	4b4f      	ldr	r3, [pc, #316]	; (80048c8 <BSP_TS_GetState+0x148>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	2082      	movs	r0, #130	; 0x82
 8004790:	4798      	blx	r3
 8004792:	4603      	mov	r3, r0
 8004794:	b29a      	uxth	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	801a      	strh	r2, [r3, #0]

  if (TsState->TouchDetected)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f000 808d 	beq.w	80048be <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 80047a4:	4b48      	ldr	r3, [pc, #288]	; (80048c8 <BSP_TS_GetState+0x148>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	f107 020c 	add.w	r2, r7, #12
 80047ae:	f107 010e 	add.w	r1, r7, #14
 80047b2:	2082      	movs	r0, #130	; 0x82
 80047b4:	4798      	blx	r3
    /* Y value first correction */
    y = 3700 - y;
#else

    /* Y value first correction */
    y -= 360;
 80047b6:	89bb      	ldrh	r3, [r7, #12]
 80047b8:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80047bc:	b29b      	uxth	r3, r3
 80047be:	81bb      	strh	r3, [r7, #12]

#endif

    /* Y value second correction */
    yr = y / 11;
 80047c0:	89bb      	ldrh	r3, [r7, #12]
 80047c2:	4a42      	ldr	r2, [pc, #264]	; (80048cc <BSP_TS_GetState+0x14c>)
 80047c4:	fba2 2303 	umull	r2, r3, r2, r3
 80047c8:	08db      	lsrs	r3, r3, #3
 80047ca:	82bb      	strh	r3, [r7, #20]

    /* Return y position value */
    if (yr <= 0)
 80047cc:	8abb      	ldrh	r3, [r7, #20]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d102      	bne.n	80047d8 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 80047d2:	2300      	movs	r3, #0
 80047d4:	82bb      	strh	r3, [r7, #20]
 80047d6:	e008      	b.n	80047ea <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 80047d8:	4b3d      	ldr	r3, [pc, #244]	; (80048d0 <BSP_TS_GetState+0x150>)
 80047da:	881b      	ldrh	r3, [r3, #0]
 80047dc:	8aba      	ldrh	r2, [r7, #20]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d903      	bls.n	80047ea <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 80047e2:	4b3b      	ldr	r3, [pc, #236]	; (80048d0 <BSP_TS_GetState+0x150>)
 80047e4:	881b      	ldrh	r3, [r3, #0]
 80047e6:	3b01      	subs	r3, #1
 80047e8:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 80047ea:	8abb      	ldrh	r3, [r7, #20]
 80047ec:	81bb      	strh	r3, [r7, #12]

    /* X value first correction */
    if (x <= 3000)
 80047ee:	89fb      	ldrh	r3, [r7, #14]
 80047f0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d806      	bhi.n	8004806 <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 80047f8:	89fb      	ldrh	r3, [r7, #14]
 80047fa:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 80047fe:	330e      	adds	r3, #14
 8004800:	b29b      	uxth	r3, r3
 8004802:	81fb      	strh	r3, [r7, #14]
 8004804:	e005      	b.n	8004812 <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8004806:	89fb      	ldrh	r3, [r7, #14]
 8004808:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 800480c:	3308      	adds	r3, #8
 800480e:	b29b      	uxth	r3, r3
 8004810:	81fb      	strh	r3, [r7, #14]
    }

    /* X value second correction */
    xr = x / 15;
 8004812:	89fb      	ldrh	r3, [r7, #14]
 8004814:	4a2f      	ldr	r2, [pc, #188]	; (80048d4 <BSP_TS_GetState+0x154>)
 8004816:	fba2 2303 	umull	r2, r3, r2, r3
 800481a:	08db      	lsrs	r3, r3, #3
 800481c:	82fb      	strh	r3, [r7, #22]

    /* Return X position value */
    if (xr <= 0)
 800481e:	8afb      	ldrh	r3, [r7, #22]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d102      	bne.n	800482a <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8004824:	2300      	movs	r3, #0
 8004826:	82fb      	strh	r3, [r7, #22]
 8004828:	e008      	b.n	800483c <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 800482a:	4b2b      	ldr	r3, [pc, #172]	; (80048d8 <BSP_TS_GetState+0x158>)
 800482c:	881b      	ldrh	r3, [r3, #0]
 800482e:	8afa      	ldrh	r2, [r7, #22]
 8004830:	429a      	cmp	r2, r3
 8004832:	d903      	bls.n	800483c <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8004834:	4b28      	ldr	r3, [pc, #160]	; (80048d8 <BSP_TS_GetState+0x158>)
 8004836:	881b      	ldrh	r3, [r3, #0]
 8004838:	3b01      	subs	r3, #1
 800483a:	82fb      	strh	r3, [r7, #22]
    }
    else
    {}

    x = xr;
 800483c:	8afb      	ldrh	r3, [r7, #22]
 800483e:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x ? (x - _x): (_x - x);
 8004840:	89fb      	ldrh	r3, [r7, #14]
 8004842:	461a      	mov	r2, r3
 8004844:	4b25      	ldr	r3, [pc, #148]	; (80048dc <BSP_TS_GetState+0x15c>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	429a      	cmp	r2, r3
 800484a:	d906      	bls.n	800485a <BSP_TS_GetState+0xda>
 800484c:	89fa      	ldrh	r2, [r7, #14]
 800484e:	4b23      	ldr	r3, [pc, #140]	; (80048dc <BSP_TS_GetState+0x15c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	b29b      	uxth	r3, r3
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	b29b      	uxth	r3, r3
 8004858:	e005      	b.n	8004866 <BSP_TS_GetState+0xe6>
 800485a:	4b20      	ldr	r3, [pc, #128]	; (80048dc <BSP_TS_GetState+0x15c>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	b29a      	uxth	r2, r3
 8004860:	89fb      	ldrh	r3, [r7, #14]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	b29b      	uxth	r3, r3
 8004866:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y ? (y - _y) : (_y - y);
 8004868:	89bb      	ldrh	r3, [r7, #12]
 800486a:	461a      	mov	r2, r3
 800486c:	4b1c      	ldr	r3, [pc, #112]	; (80048e0 <BSP_TS_GetState+0x160>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	429a      	cmp	r2, r3
 8004872:	d906      	bls.n	8004882 <BSP_TS_GetState+0x102>
 8004874:	89ba      	ldrh	r2, [r7, #12]
 8004876:	4b1a      	ldr	r3, [pc, #104]	; (80048e0 <BSP_TS_GetState+0x160>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	b29b      	uxth	r3, r3
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	b29b      	uxth	r3, r3
 8004880:	e005      	b.n	800488e <BSP_TS_GetState+0x10e>
 8004882:	4b17      	ldr	r3, [pc, #92]	; (80048e0 <BSP_TS_GetState+0x160>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	b29a      	uxth	r2, r3
 8004888:	89bb      	ldrh	r3, [r7, #12]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	b29b      	uxth	r3, r3
 800488e:	823b      	strh	r3, [r7, #16]

    if (xDiff + yDiff > 5)
 8004890:	8a7a      	ldrh	r2, [r7, #18]
 8004892:	8a3b      	ldrh	r3, [r7, #16]
 8004894:	4413      	add	r3, r2
 8004896:	2b05      	cmp	r3, #5
 8004898:	dd07      	ble.n	80048aa <BSP_TS_GetState+0x12a>
    {
      _x = x;
 800489a:	89fb      	ldrh	r3, [r7, #14]
 800489c:	461a      	mov	r2, r3
 800489e:	4b0f      	ldr	r3, [pc, #60]	; (80048dc <BSP_TS_GetState+0x15c>)
 80048a0:	601a      	str	r2, [r3, #0]
      _y = y;
 80048a2:	89bb      	ldrh	r3, [r7, #12]
 80048a4:	461a      	mov	r2, r3
 80048a6:	4b0e      	ldr	r3, [pc, #56]	; (80048e0 <BSP_TS_GetState+0x160>)
 80048a8:	601a      	str	r2, [r3, #0]
    }

    /* Update the X position */
    TsState->X = _x;
 80048aa:	4b0c      	ldr	r3, [pc, #48]	; (80048dc <BSP_TS_GetState+0x15c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	805a      	strh	r2, [r3, #2]

    /* Update the Y position */
    TsState->Y = _y;
 80048b4:	4b0a      	ldr	r3, [pc, #40]	; (80048e0 <BSP_TS_GetState+0x160>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	809a      	strh	r2, [r3, #4]
  }
}
 80048be:	bf00      	nop
 80048c0:	3718      	adds	r7, #24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	20003bdc 	.word	0x20003bdc
 80048cc:	ba2e8ba3 	.word	0xba2e8ba3
 80048d0:	20003be2 	.word	0x20003be2
 80048d4:	88888889 	.word	0x88888889
 80048d8:	20003be0 	.word	0x20003be0
 80048dc:	20003be4 	.word	0x20003be4
 80048e0:	20003be8 	.word	0x20003be8

080048e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80048e8:	4b0e      	ldr	r3, [pc, #56]	; (8004924 <HAL_Init+0x40>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a0d      	ldr	r2, [pc, #52]	; (8004924 <HAL_Init+0x40>)
 80048ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80048f4:	4b0b      	ldr	r3, [pc, #44]	; (8004924 <HAL_Init+0x40>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a0a      	ldr	r2, [pc, #40]	; (8004924 <HAL_Init+0x40>)
 80048fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004900:	4b08      	ldr	r3, [pc, #32]	; (8004924 <HAL_Init+0x40>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a07      	ldr	r2, [pc, #28]	; (8004924 <HAL_Init+0x40>)
 8004906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800490a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800490c:	2003      	movs	r0, #3
 800490e:	f000 f8fc 	bl	8004b0a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004912:	200f      	movs	r0, #15
 8004914:	f7fd fe2a 	bl	800256c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004918:	f7fd fe00 	bl	800251c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	40023c00 	.word	0x40023c00

08004928 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800492c:	4b06      	ldr	r3, [pc, #24]	; (8004948 <HAL_IncTick+0x20>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	461a      	mov	r2, r3
 8004932:	4b06      	ldr	r3, [pc, #24]	; (800494c <HAL_IncTick+0x24>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4413      	add	r3, r2
 8004938:	4a04      	ldr	r2, [pc, #16]	; (800494c <HAL_IncTick+0x24>)
 800493a:	6013      	str	r3, [r2, #0]
}
 800493c:	bf00      	nop
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	20002c7c 	.word	0x20002c7c
 800494c:	20003bec 	.word	0x20003bec

08004950 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004950:	b480      	push	{r7}
 8004952:	af00      	add	r7, sp, #0
  return uwTick;
 8004954:	4b03      	ldr	r3, [pc, #12]	; (8004964 <HAL_GetTick+0x14>)
 8004956:	681b      	ldr	r3, [r3, #0]
}
 8004958:	4618      	mov	r0, r3
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	20003bec 	.word	0x20003bec

08004968 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004970:	f7ff ffee 	bl	8004950 <HAL_GetTick>
 8004974:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004980:	d005      	beq.n	800498e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004982:	4b0a      	ldr	r3, [pc, #40]	; (80049ac <HAL_Delay+0x44>)
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	461a      	mov	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4413      	add	r3, r2
 800498c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800498e:	bf00      	nop
 8004990:	f7ff ffde 	bl	8004950 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	429a      	cmp	r2, r3
 800499e:	d8f7      	bhi.n	8004990 <HAL_Delay+0x28>
  {
  }
}
 80049a0:	bf00      	nop
 80049a2:	bf00      	nop
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	20002c7c 	.word	0x20002c7c

080049b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f003 0307 	and.w	r3, r3, #7
 80049be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049c0:	4b0c      	ldr	r3, [pc, #48]	; (80049f4 <__NVIC_SetPriorityGrouping+0x44>)
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049cc:	4013      	ands	r3, r2
 80049ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80049dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049e2:	4a04      	ldr	r2, [pc, #16]	; (80049f4 <__NVIC_SetPriorityGrouping+0x44>)
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	60d3      	str	r3, [r2, #12]
}
 80049e8:	bf00      	nop
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	e000ed00 	.word	0xe000ed00

080049f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049fc:	4b04      	ldr	r3, [pc, #16]	; (8004a10 <__NVIC_GetPriorityGrouping+0x18>)
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	0a1b      	lsrs	r3, r3, #8
 8004a02:	f003 0307 	and.w	r3, r3, #7
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	e000ed00 	.word	0xe000ed00

08004a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	db0b      	blt.n	8004a3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a26:	79fb      	ldrb	r3, [r7, #7]
 8004a28:	f003 021f 	and.w	r2, r3, #31
 8004a2c:	4907      	ldr	r1, [pc, #28]	; (8004a4c <__NVIC_EnableIRQ+0x38>)
 8004a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a32:	095b      	lsrs	r3, r3, #5
 8004a34:	2001      	movs	r0, #1
 8004a36:	fa00 f202 	lsl.w	r2, r0, r2
 8004a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a3e:	bf00      	nop
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	e000e100 	.word	0xe000e100

08004a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	4603      	mov	r3, r0
 8004a58:	6039      	str	r1, [r7, #0]
 8004a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	db0a      	blt.n	8004a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	b2da      	uxtb	r2, r3
 8004a68:	490c      	ldr	r1, [pc, #48]	; (8004a9c <__NVIC_SetPriority+0x4c>)
 8004a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a6e:	0112      	lsls	r2, r2, #4
 8004a70:	b2d2      	uxtb	r2, r2
 8004a72:	440b      	add	r3, r1
 8004a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a78:	e00a      	b.n	8004a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	4908      	ldr	r1, [pc, #32]	; (8004aa0 <__NVIC_SetPriority+0x50>)
 8004a80:	79fb      	ldrb	r3, [r7, #7]
 8004a82:	f003 030f 	and.w	r3, r3, #15
 8004a86:	3b04      	subs	r3, #4
 8004a88:	0112      	lsls	r2, r2, #4
 8004a8a:	b2d2      	uxtb	r2, r2
 8004a8c:	440b      	add	r3, r1
 8004a8e:	761a      	strb	r2, [r3, #24]
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	e000e100 	.word	0xe000e100
 8004aa0:	e000ed00 	.word	0xe000ed00

08004aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b089      	sub	sp, #36	; 0x24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f003 0307 	and.w	r3, r3, #7
 8004ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	f1c3 0307 	rsb	r3, r3, #7
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	bf28      	it	cs
 8004ac2:	2304      	movcs	r3, #4
 8004ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	3304      	adds	r3, #4
 8004aca:	2b06      	cmp	r3, #6
 8004acc:	d902      	bls.n	8004ad4 <NVIC_EncodePriority+0x30>
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	3b03      	subs	r3, #3
 8004ad2:	e000      	b.n	8004ad6 <NVIC_EncodePriority+0x32>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae2:	43da      	mvns	r2, r3
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	401a      	ands	r2, r3
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004aec:	f04f 31ff 	mov.w	r1, #4294967295
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	fa01 f303 	lsl.w	r3, r1, r3
 8004af6:	43d9      	mvns	r1, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004afc:	4313      	orrs	r3, r2
         );
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3724      	adds	r7, #36	; 0x24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b082      	sub	sp, #8
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f7ff ff4c 	bl	80049b0 <__NVIC_SetPriorityGrouping>
}
 8004b18:	bf00      	nop
 8004b1a:	3708      	adds	r7, #8
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	4603      	mov	r3, r0
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
 8004b2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b32:	f7ff ff61 	bl	80049f8 <__NVIC_GetPriorityGrouping>
 8004b36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	68b9      	ldr	r1, [r7, #8]
 8004b3c:	6978      	ldr	r0, [r7, #20]
 8004b3e:	f7ff ffb1 	bl	8004aa4 <NVIC_EncodePriority>
 8004b42:	4602      	mov	r2, r0
 8004b44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b48:	4611      	mov	r1, r2
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7ff ff80 	bl	8004a50 <__NVIC_SetPriority>
}
 8004b50:	bf00      	nop
 8004b52:	3718      	adds	r7, #24
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	4603      	mov	r3, r0
 8004b60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7ff ff54 	bl	8004a14 <__NVIC_EnableIRQ>
}
 8004b6c:	bf00      	nop
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e00e      	b.n	8004ba4 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	795b      	ldrb	r3, [r3, #5]
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d105      	bne.n	8004b9c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7fb ff50 	bl	8000a3c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004bb8:	f7ff feca 	bl	8004950 <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e099      	b.n	8004cfc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 0201 	bic.w	r2, r2, #1
 8004be6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004be8:	e00f      	b.n	8004c0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bea:	f7ff feb1 	bl	8004950 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b05      	cmp	r3, #5
 8004bf6:	d908      	bls.n	8004c0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2203      	movs	r2, #3
 8004c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e078      	b.n	8004cfc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1e8      	bne.n	8004bea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	4b38      	ldr	r3, [pc, #224]	; (8004d04 <HAL_DMA_Init+0x158>)
 8004c24:	4013      	ands	r3, r2
 8004c26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c60:	2b04      	cmp	r3, #4
 8004c62:	d107      	bne.n	8004c74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	f023 0307 	bic.w	r3, r3, #7
 8004c8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	d117      	bne.n	8004cce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00e      	beq.n	8004cce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f8bd 	bl	8004e30 <DMA_CheckFifoParam>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d008      	beq.n	8004cce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2240      	movs	r2, #64	; 0x40
 8004cc0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e016      	b.n	8004cfc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f874 	bl	8004dc4 <DMA_CalcBaseAndBitshift>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce4:	223f      	movs	r2, #63	; 0x3f
 8004ce6:	409a      	lsls	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3718      	adds	r7, #24
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	f010803f 	.word	0xf010803f

08004d08 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e050      	b.n	8004dbc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d101      	bne.n	8004d2a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004d26:	2302      	movs	r3, #2
 8004d28:	e048      	b.n	8004dbc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 0201 	bic.w	r2, r2, #1
 8004d38:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2200      	movs	r2, #0
 8004d48:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2200      	movs	r2, #0
 8004d58:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2221      	movs	r2, #33	; 0x21
 8004d68:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f82a 	bl	8004dc4 <DMA_CalcBaseAndBitshift>
 8004d70:	4603      	mov	r3, r0
 8004d72:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d9c:	223f      	movs	r2, #63	; 0x3f
 8004d9e:	409a      	lsls	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	3b10      	subs	r3, #16
 8004dd4:	4a14      	ldr	r2, [pc, #80]	; (8004e28 <DMA_CalcBaseAndBitshift+0x64>)
 8004dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dda:	091b      	lsrs	r3, r3, #4
 8004ddc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004dde:	4a13      	ldr	r2, [pc, #76]	; (8004e2c <DMA_CalcBaseAndBitshift+0x68>)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	4413      	add	r3, r2
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	461a      	mov	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2b03      	cmp	r3, #3
 8004df0:	d909      	bls.n	8004e06 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004dfa:	f023 0303 	bic.w	r3, r3, #3
 8004dfe:	1d1a      	adds	r2, r3, #4
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	659a      	str	r2, [r3, #88]	; 0x58
 8004e04:	e007      	b.n	8004e16 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e0e:	f023 0303 	bic.w	r3, r3, #3
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	aaaaaaab 	.word	0xaaaaaaab
 8004e2c:	08012bfc 	.word	0x08012bfc

08004e30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d11f      	bne.n	8004e8a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	2b03      	cmp	r3, #3
 8004e4e:	d856      	bhi.n	8004efe <DMA_CheckFifoParam+0xce>
 8004e50:	a201      	add	r2, pc, #4	; (adr r2, 8004e58 <DMA_CheckFifoParam+0x28>)
 8004e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e56:	bf00      	nop
 8004e58:	08004e69 	.word	0x08004e69
 8004e5c:	08004e7b 	.word	0x08004e7b
 8004e60:	08004e69 	.word	0x08004e69
 8004e64:	08004eff 	.word	0x08004eff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d046      	beq.n	8004f02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e78:	e043      	b.n	8004f02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e82:	d140      	bne.n	8004f06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e88:	e03d      	b.n	8004f06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e92:	d121      	bne.n	8004ed8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	2b03      	cmp	r3, #3
 8004e98:	d837      	bhi.n	8004f0a <DMA_CheckFifoParam+0xda>
 8004e9a:	a201      	add	r2, pc, #4	; (adr r2, 8004ea0 <DMA_CheckFifoParam+0x70>)
 8004e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea0:	08004eb1 	.word	0x08004eb1
 8004ea4:	08004eb7 	.word	0x08004eb7
 8004ea8:	08004eb1 	.word	0x08004eb1
 8004eac:	08004ec9 	.word	0x08004ec9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8004eb4:	e030      	b.n	8004f18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d025      	beq.n	8004f0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ec6:	e022      	b.n	8004f0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ecc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ed0:	d11f      	bne.n	8004f12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004ed6:	e01c      	b.n	8004f12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d903      	bls.n	8004ee6 <DMA_CheckFifoParam+0xb6>
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	2b03      	cmp	r3, #3
 8004ee2:	d003      	beq.n	8004eec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ee4:	e018      	b.n	8004f18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	73fb      	strb	r3, [r7, #15]
      break;
 8004eea:	e015      	b.n	8004f18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00e      	beq.n	8004f16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	73fb      	strb	r3, [r7, #15]
      break;
 8004efc:	e00b      	b.n	8004f16 <DMA_CheckFifoParam+0xe6>
      break;
 8004efe:	bf00      	nop
 8004f00:	e00a      	b.n	8004f18 <DMA_CheckFifoParam+0xe8>
      break;
 8004f02:	bf00      	nop
 8004f04:	e008      	b.n	8004f18 <DMA_CheckFifoParam+0xe8>
      break;
 8004f06:	bf00      	nop
 8004f08:	e006      	b.n	8004f18 <DMA_CheckFifoParam+0xe8>
      break;
 8004f0a:	bf00      	nop
 8004f0c:	e004      	b.n	8004f18 <DMA_CheckFifoParam+0xe8>
      break;
 8004f0e:	bf00      	nop
 8004f10:	e002      	b.n	8004f18 <DMA_CheckFifoParam+0xe8>
      break;   
 8004f12:	bf00      	nop
 8004f14:	e000      	b.n	8004f18 <DMA_CheckFifoParam+0xe8>
      break;
 8004f16:	bf00      	nop
    }
  } 
  
  return status; 
 8004f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop

08004f28 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e03b      	b.n	8004fb2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d106      	bne.n	8004f54 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7fb fdc8 	bl	8000ae4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2202      	movs	r2, #2
 8004f58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f78:	f023 0107 	bic.w	r1, r3, #7
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689a      	ldr	r2, [r3, #8]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	430a      	orrs	r2, r1
 8004f86:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004f92:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	68d1      	ldr	r1, [r2, #12]
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	6812      	ldr	r2, [r2, #0]
 8004f9e:	430b      	orrs	r3, r1
 8004fa0:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b086      	sub	sp, #24
 8004fbe:	af02      	add	r7, sp, #8
 8004fc0:	60f8      	str	r0, [r7, #12]
 8004fc2:	60b9      	str	r1, [r7, #8]
 8004fc4:	607a      	str	r2, [r7, #4]
 8004fc6:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d101      	bne.n	8004fd6 <HAL_DMA2D_Start+0x1c>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	e018      	b.n	8005008 <HAL_DMA2D_Start+0x4e>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2202      	movs	r2, #2
 8004fe2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	68b9      	ldr	r1, [r7, #8]
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f000 fa99 	bl	8005528 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f042 0201 	orr.w	r2, r2, #1
 8005004:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800501a:	2300      	movs	r3, #0
 800501c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	2b00      	cmp	r3, #0
 800502a:	d056      	beq.n	80050da <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800502c:	f7ff fc90 	bl	8004950 <HAL_GetTick>
 8005030:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005032:	e04b      	b.n	80050cc <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005042:	2b00      	cmp	r3, #0
 8005044:	d023      	beq.n	800508e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f003 0320 	and.w	r3, r3, #32
 800504c:	2b00      	cmp	r3, #0
 800504e:	d005      	beq.n	800505c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005054:	f043 0202 	orr.w	r2, r3, #2
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	2b00      	cmp	r3, #0
 8005064:	d005      	beq.n	8005072 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800506a:	f043 0201 	orr.w	r2, r3, #1
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2221      	movs	r2, #33	; 0x21
 8005078:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2204      	movs	r2, #4
 800507e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e0a5      	b.n	80051da <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005094:	d01a      	beq.n	80050cc <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005096:	f7ff fc5b 	bl	8004950 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d302      	bcc.n	80050ac <HAL_DMA2D_PollForTransfer+0x9c>
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10f      	bne.n	80050cc <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b0:	f043 0220 	orr.w	r2, r3, #32
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2203      	movs	r2, #3
 80050bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e086      	b.n	80051da <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d0ac      	beq.n	8005034 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	69db      	ldr	r3, [r3, #28]
 80050e0:	f003 0320 	and.w	r3, r3, #32
 80050e4:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ec:	f003 0320 	and.w	r3, r3, #32
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d061      	beq.n	80051c0 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80050fc:	f7ff fc28 	bl	8004950 <HAL_GetTick>
 8005100:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005102:	e056      	b.n	80051b2 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005112:	2b00      	cmp	r3, #0
 8005114:	d02e      	beq.n	8005174 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f003 0308 	and.w	r3, r3, #8
 800511c:	2b00      	cmp	r3, #0
 800511e:	d005      	beq.n	800512c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005124:	f043 0204 	orr.w	r2, r3, #4
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f003 0320 	and.w	r3, r3, #32
 8005132:	2b00      	cmp	r3, #0
 8005134:	d005      	beq.n	8005142 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800513a:	f043 0202 	orr.w	r2, r3, #2
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	2b00      	cmp	r3, #0
 800514a:	d005      	beq.n	8005158 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005150:	f043 0201 	orr.w	r2, r3, #1
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2229      	movs	r2, #41	; 0x29
 800515e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2204      	movs	r2, #4
 8005164:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e032      	b.n	80051da <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517a:	d01a      	beq.n	80051b2 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800517c:	f7ff fbe8 	bl	8004950 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	429a      	cmp	r2, r3
 800518a:	d302      	bcc.n	8005192 <HAL_DMA2D_PollForTransfer+0x182>
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10f      	bne.n	80051b2 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005196:	f043 0220 	orr.w	r2, r3, #32
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2203      	movs	r2, #3
 80051a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e013      	b.n	80051da <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f003 0310 	and.w	r3, r3, #16
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d0a1      	beq.n	8005104 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2212      	movs	r2, #18
 80051c6:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3718      	adds	r7, #24
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b084      	sub	sp, #16
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	2b00      	cmp	r3, #0
 8005202:	d026      	beq.n	8005252 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800520a:	2b00      	cmp	r3, #0
 800520c:	d021      	beq.n	8005252 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800521c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005222:	f043 0201 	orr.w	r2, r3, #1
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2201      	movs	r2, #1
 8005230:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2204      	movs	r2, #4
 8005236:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f003 0320 	and.w	r3, r3, #32
 8005258:	2b00      	cmp	r3, #0
 800525a:	d026      	beq.n	80052aa <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d021      	beq.n	80052aa <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005274:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2220      	movs	r2, #32
 800527c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005282:	f043 0202 	orr.w	r2, r3, #2
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2204      	movs	r2, #4
 800528e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d003      	beq.n	80052aa <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f003 0308 	and.w	r3, r3, #8
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d026      	beq.n	8005302 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d021      	beq.n	8005302 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052cc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2208      	movs	r2, #8
 80052d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052da:	f043 0204 	orr.w	r2, r3, #4
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2204      	movs	r2, #4
 80052e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f003 0304 	and.w	r3, r3, #4
 8005308:	2b00      	cmp	r3, #0
 800530a:	d013      	beq.n	8005334 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00e      	beq.n	8005334 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005324:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2204      	movs	r2, #4
 800532c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f853 	bl	80053da <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d024      	beq.n	8005388 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005344:	2b00      	cmp	r3, #0
 8005346:	d01f      	beq.n	8005388 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005356:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2202      	movs	r2, #2
 800535e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d003      	beq.n	8005388 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f003 0310 	and.w	r3, r3, #16
 800538e:	2b00      	cmp	r3, #0
 8005390:	d01f      	beq.n	80053d2 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d01a      	beq.n	80053d2 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80053aa:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2210      	movs	r2, #16
 80053b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 f80e 	bl	80053ee <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80053d2:	bf00      	nop
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80053da:	b480      	push	{r7}
 80053dc:	b083      	sub	sp, #12
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80053e2:	bf00      	nop
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b083      	sub	sp, #12
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80053f6:	bf00      	nop
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
	...

08005404 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005404:	b480      	push	{r7}
 8005406:	b087      	sub	sp, #28
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800541c:	2b01      	cmp	r3, #1
 800541e:	d101      	bne.n	8005424 <HAL_DMA2D_ConfigLayer+0x20>
 8005420:	2302      	movs	r3, #2
 8005422:	e079      	b.n	8005518 <HAL_DMA2D_ConfigLayer+0x114>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2202      	movs	r2, #2
 8005430:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	011b      	lsls	r3, r3, #4
 8005438:	3318      	adds	r3, #24
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	4413      	add	r3, r2
 800543e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	041b      	lsls	r3, r3, #16
 800544a:	4313      	orrs	r3, r2
 800544c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800544e:	4b35      	ldr	r3, [pc, #212]	; (8005524 <HAL_DMA2D_ConfigLayer+0x120>)
 8005450:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	2b0a      	cmp	r3, #10
 8005458:	d003      	beq.n	8005462 <HAL_DMA2D_ConfigLayer+0x5e>
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	2b09      	cmp	r3, #9
 8005460:	d107      	bne.n	8005472 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	4313      	orrs	r3, r2
 800546e:	617b      	str	r3, [r7, #20]
 8005470:	e005      	b.n	800547e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	061b      	lsls	r3, r3, #24
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	4313      	orrs	r3, r2
 800547c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d120      	bne.n	80054c6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	43db      	mvns	r3, r3
 800548e:	ea02 0103 	and.w	r1, r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	430a      	orrs	r2, r1
 800549a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	6812      	ldr	r2, [r2, #0]
 80054a4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	2b0a      	cmp	r3, #10
 80054ac:	d003      	beq.n	80054b6 <HAL_DMA2D_ConfigLayer+0xb2>
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	2b09      	cmp	r3, #9
 80054b4:	d127      	bne.n	8005506 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	68da      	ldr	r2, [r3, #12]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80054c2:	629a      	str	r2, [r3, #40]	; 0x28
 80054c4:	e01f      	b.n	8005506 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	69da      	ldr	r2, [r3, #28]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	43db      	mvns	r3, r3
 80054d0:	ea02 0103 	and.w	r1, r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	430a      	orrs	r2, r1
 80054dc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	693a      	ldr	r2, [r7, #16]
 80054e4:	6812      	ldr	r2, [r2, #0]
 80054e6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	2b0a      	cmp	r3, #10
 80054ee:	d003      	beq.n	80054f8 <HAL_DMA2D_ConfigLayer+0xf4>
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	2b09      	cmp	r3, #9
 80054f6:	d106      	bne.n	8005506 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	68da      	ldr	r2, [r3, #12]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005504:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	371c      	adds	r7, #28
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr
 8005524:	ff03000f 	.word	0xff03000f

08005528 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005528:	b480      	push	{r7}
 800552a:	b08b      	sub	sp, #44	; 0x2c
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
 8005534:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800553c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	041a      	lsls	r2, r3, #16
 8005544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005546:	431a      	orrs	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	430a      	orrs	r2, r1
 800554e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005560:	d174      	bne.n	800564c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005568:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005570:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005578:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	b2db      	uxtb	r3, r3
 800557e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d108      	bne.n	800559a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005588:	69ba      	ldr	r2, [r7, #24]
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	431a      	orrs	r2, r3
 800558e:	6a3b      	ldr	r3, [r7, #32]
 8005590:	4313      	orrs	r3, r2
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	4313      	orrs	r3, r2
 8005596:	627b      	str	r3, [r7, #36]	; 0x24
 8005598:	e053      	b.n	8005642 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d106      	bne.n	80055b0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	627b      	str	r3, [r7, #36]	; 0x24
 80055ae:	e048      	b.n	8005642 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d111      	bne.n	80055dc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	0cdb      	lsrs	r3, r3, #19
 80055bc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	0a9b      	lsrs	r3, r3, #10
 80055c2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	08db      	lsrs	r3, r3, #3
 80055c8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	02db      	lsls	r3, r3, #11
 80055d2:	4313      	orrs	r3, r2
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	627b      	str	r3, [r7, #36]	; 0x24
 80055da:	e032      	b.n	8005642 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	2b03      	cmp	r3, #3
 80055e2:	d117      	bne.n	8005614 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	0fdb      	lsrs	r3, r3, #31
 80055e8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	0cdb      	lsrs	r3, r3, #19
 80055ee:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	0adb      	lsrs	r3, r3, #11
 80055f4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	08db      	lsrs	r3, r3, #3
 80055fa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	015a      	lsls	r2, r3, #5
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	029b      	lsls	r3, r3, #10
 8005604:	431a      	orrs	r2, r3
 8005606:	6a3b      	ldr	r3, [r7, #32]
 8005608:	03db      	lsls	r3, r3, #15
 800560a:	4313      	orrs	r3, r2
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	4313      	orrs	r3, r2
 8005610:	627b      	str	r3, [r7, #36]	; 0x24
 8005612:	e016      	b.n	8005642 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005614:	6a3b      	ldr	r3, [r7, #32]
 8005616:	0f1b      	lsrs	r3, r3, #28
 8005618:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	0d1b      	lsrs	r3, r3, #20
 800561e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	0b1b      	lsrs	r3, r3, #12
 8005624:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	091b      	lsrs	r3, r3, #4
 800562a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	011a      	lsls	r2, r3, #4
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	021b      	lsls	r3, r3, #8
 8005634:	431a      	orrs	r2, r3
 8005636:	6a3b      	ldr	r3, [r7, #32]
 8005638:	031b      	lsls	r3, r3, #12
 800563a:	4313      	orrs	r3, r2
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	4313      	orrs	r3, r2
 8005640:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005648:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800564a:	e003      	b.n	8005654 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	60da      	str	r2, [r3, #12]
}
 8005654:	bf00      	nop
 8005656:	372c      	adds	r7, #44	; 0x2c
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005660:	b480      	push	{r7}
 8005662:	b089      	sub	sp, #36	; 0x24
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800566a:	2300      	movs	r3, #0
 800566c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800566e:	2300      	movs	r3, #0
 8005670:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005672:	2300      	movs	r3, #0
 8005674:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005676:	2300      	movs	r3, #0
 8005678:	61fb      	str	r3, [r7, #28]
 800567a:	e177      	b.n	800596c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800567c:	2201      	movs	r2, #1
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	fa02 f303 	lsl.w	r3, r2, r3
 8005684:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	4013      	ands	r3, r2
 800568e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	429a      	cmp	r2, r3
 8005696:	f040 8166 	bne.w	8005966 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f003 0303 	and.w	r3, r3, #3
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d005      	beq.n	80056b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d130      	bne.n	8005714 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	005b      	lsls	r3, r3, #1
 80056bc:	2203      	movs	r2, #3
 80056be:	fa02 f303 	lsl.w	r3, r2, r3
 80056c2:	43db      	mvns	r3, r3
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	4013      	ands	r3, r2
 80056c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	68da      	ldr	r2, [r3, #12]
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	005b      	lsls	r3, r3, #1
 80056d2:	fa02 f303 	lsl.w	r3, r2, r3
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	4313      	orrs	r3, r2
 80056da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056e8:	2201      	movs	r2, #1
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	fa02 f303 	lsl.w	r3, r2, r3
 80056f0:	43db      	mvns	r3, r3
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	4013      	ands	r3, r2
 80056f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	091b      	lsrs	r3, r3, #4
 80056fe:	f003 0201 	and.w	r2, r3, #1
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	fa02 f303 	lsl.w	r3, r2, r3
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	4313      	orrs	r3, r2
 800570c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f003 0303 	and.w	r3, r3, #3
 800571c:	2b03      	cmp	r3, #3
 800571e:	d017      	beq.n	8005750 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	005b      	lsls	r3, r3, #1
 800572a:	2203      	movs	r2, #3
 800572c:	fa02 f303 	lsl.w	r3, r2, r3
 8005730:	43db      	mvns	r3, r3
 8005732:	69ba      	ldr	r2, [r7, #24]
 8005734:	4013      	ands	r3, r2
 8005736:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	689a      	ldr	r2, [r3, #8]
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	005b      	lsls	r3, r3, #1
 8005740:	fa02 f303 	lsl.w	r3, r2, r3
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	4313      	orrs	r3, r2
 8005748:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f003 0303 	and.w	r3, r3, #3
 8005758:	2b02      	cmp	r3, #2
 800575a:	d123      	bne.n	80057a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	08da      	lsrs	r2, r3, #3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	3208      	adds	r2, #8
 8005764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005768:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	f003 0307 	and.w	r3, r3, #7
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	220f      	movs	r2, #15
 8005774:	fa02 f303 	lsl.w	r3, r2, r3
 8005778:	43db      	mvns	r3, r3
 800577a:	69ba      	ldr	r2, [r7, #24]
 800577c:	4013      	ands	r3, r2
 800577e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	691a      	ldr	r2, [r3, #16]
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	f003 0307 	and.w	r3, r3, #7
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	fa02 f303 	lsl.w	r3, r2, r3
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	4313      	orrs	r3, r2
 8005794:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	08da      	lsrs	r2, r3, #3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	3208      	adds	r2, #8
 800579e:	69b9      	ldr	r1, [r7, #24]
 80057a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	005b      	lsls	r3, r3, #1
 80057ae:	2203      	movs	r2, #3
 80057b0:	fa02 f303 	lsl.w	r3, r2, r3
 80057b4:	43db      	mvns	r3, r3
 80057b6:	69ba      	ldr	r2, [r7, #24]
 80057b8:	4013      	ands	r3, r2
 80057ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	f003 0203 	and.w	r2, r3, #3
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	005b      	lsls	r3, r3, #1
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f000 80c0 	beq.w	8005966 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057e6:	2300      	movs	r3, #0
 80057e8:	60fb      	str	r3, [r7, #12]
 80057ea:	4b66      	ldr	r3, [pc, #408]	; (8005984 <HAL_GPIO_Init+0x324>)
 80057ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ee:	4a65      	ldr	r2, [pc, #404]	; (8005984 <HAL_GPIO_Init+0x324>)
 80057f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057f4:	6453      	str	r3, [r2, #68]	; 0x44
 80057f6:	4b63      	ldr	r3, [pc, #396]	; (8005984 <HAL_GPIO_Init+0x324>)
 80057f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057fe:	60fb      	str	r3, [r7, #12]
 8005800:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005802:	4a61      	ldr	r2, [pc, #388]	; (8005988 <HAL_GPIO_Init+0x328>)
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	089b      	lsrs	r3, r3, #2
 8005808:	3302      	adds	r3, #2
 800580a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800580e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	f003 0303 	and.w	r3, r3, #3
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	220f      	movs	r2, #15
 800581a:	fa02 f303 	lsl.w	r3, r2, r3
 800581e:	43db      	mvns	r3, r3
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	4013      	ands	r3, r2
 8005824:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a58      	ldr	r2, [pc, #352]	; (800598c <HAL_GPIO_Init+0x32c>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d037      	beq.n	800589e <HAL_GPIO_Init+0x23e>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a57      	ldr	r2, [pc, #348]	; (8005990 <HAL_GPIO_Init+0x330>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d031      	beq.n	800589a <HAL_GPIO_Init+0x23a>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a56      	ldr	r2, [pc, #344]	; (8005994 <HAL_GPIO_Init+0x334>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d02b      	beq.n	8005896 <HAL_GPIO_Init+0x236>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a55      	ldr	r2, [pc, #340]	; (8005998 <HAL_GPIO_Init+0x338>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d025      	beq.n	8005892 <HAL_GPIO_Init+0x232>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a54      	ldr	r2, [pc, #336]	; (800599c <HAL_GPIO_Init+0x33c>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d01f      	beq.n	800588e <HAL_GPIO_Init+0x22e>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a53      	ldr	r2, [pc, #332]	; (80059a0 <HAL_GPIO_Init+0x340>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d019      	beq.n	800588a <HAL_GPIO_Init+0x22a>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a52      	ldr	r2, [pc, #328]	; (80059a4 <HAL_GPIO_Init+0x344>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d013      	beq.n	8005886 <HAL_GPIO_Init+0x226>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a51      	ldr	r2, [pc, #324]	; (80059a8 <HAL_GPIO_Init+0x348>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d00d      	beq.n	8005882 <HAL_GPIO_Init+0x222>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a50      	ldr	r2, [pc, #320]	; (80059ac <HAL_GPIO_Init+0x34c>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d007      	beq.n	800587e <HAL_GPIO_Init+0x21e>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a4f      	ldr	r2, [pc, #316]	; (80059b0 <HAL_GPIO_Init+0x350>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d101      	bne.n	800587a <HAL_GPIO_Init+0x21a>
 8005876:	2309      	movs	r3, #9
 8005878:	e012      	b.n	80058a0 <HAL_GPIO_Init+0x240>
 800587a:	230a      	movs	r3, #10
 800587c:	e010      	b.n	80058a0 <HAL_GPIO_Init+0x240>
 800587e:	2308      	movs	r3, #8
 8005880:	e00e      	b.n	80058a0 <HAL_GPIO_Init+0x240>
 8005882:	2307      	movs	r3, #7
 8005884:	e00c      	b.n	80058a0 <HAL_GPIO_Init+0x240>
 8005886:	2306      	movs	r3, #6
 8005888:	e00a      	b.n	80058a0 <HAL_GPIO_Init+0x240>
 800588a:	2305      	movs	r3, #5
 800588c:	e008      	b.n	80058a0 <HAL_GPIO_Init+0x240>
 800588e:	2304      	movs	r3, #4
 8005890:	e006      	b.n	80058a0 <HAL_GPIO_Init+0x240>
 8005892:	2303      	movs	r3, #3
 8005894:	e004      	b.n	80058a0 <HAL_GPIO_Init+0x240>
 8005896:	2302      	movs	r3, #2
 8005898:	e002      	b.n	80058a0 <HAL_GPIO_Init+0x240>
 800589a:	2301      	movs	r3, #1
 800589c:	e000      	b.n	80058a0 <HAL_GPIO_Init+0x240>
 800589e:	2300      	movs	r3, #0
 80058a0:	69fa      	ldr	r2, [r7, #28]
 80058a2:	f002 0203 	and.w	r2, r2, #3
 80058a6:	0092      	lsls	r2, r2, #2
 80058a8:	4093      	lsls	r3, r2
 80058aa:	69ba      	ldr	r2, [r7, #24]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80058b0:	4935      	ldr	r1, [pc, #212]	; (8005988 <HAL_GPIO_Init+0x328>)
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	089b      	lsrs	r3, r3, #2
 80058b6:	3302      	adds	r3, #2
 80058b8:	69ba      	ldr	r2, [r7, #24]
 80058ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80058be:	4b3d      	ldr	r3, [pc, #244]	; (80059b4 <HAL_GPIO_Init+0x354>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	43db      	mvns	r3, r3
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	4013      	ands	r3, r2
 80058cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80058da:	69ba      	ldr	r2, [r7, #24]
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	4313      	orrs	r3, r2
 80058e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80058e2:	4a34      	ldr	r2, [pc, #208]	; (80059b4 <HAL_GPIO_Init+0x354>)
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80058e8:	4b32      	ldr	r3, [pc, #200]	; (80059b4 <HAL_GPIO_Init+0x354>)
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	43db      	mvns	r3, r3
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	4013      	ands	r3, r2
 80058f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d003      	beq.n	800590c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	4313      	orrs	r3, r2
 800590a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800590c:	4a29      	ldr	r2, [pc, #164]	; (80059b4 <HAL_GPIO_Init+0x354>)
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005912:	4b28      	ldr	r3, [pc, #160]	; (80059b4 <HAL_GPIO_Init+0x354>)
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	43db      	mvns	r3, r3
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	4013      	ands	r3, r2
 8005920:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800592e:	69ba      	ldr	r2, [r7, #24]
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	4313      	orrs	r3, r2
 8005934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005936:	4a1f      	ldr	r2, [pc, #124]	; (80059b4 <HAL_GPIO_Init+0x354>)
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800593c:	4b1d      	ldr	r3, [pc, #116]	; (80059b4 <HAL_GPIO_Init+0x354>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	43db      	mvns	r3, r3
 8005946:	69ba      	ldr	r2, [r7, #24]
 8005948:	4013      	ands	r3, r2
 800594a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d003      	beq.n	8005960 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	4313      	orrs	r3, r2
 800595e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005960:	4a14      	ldr	r2, [pc, #80]	; (80059b4 <HAL_GPIO_Init+0x354>)
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	3301      	adds	r3, #1
 800596a:	61fb      	str	r3, [r7, #28]
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	2b0f      	cmp	r3, #15
 8005970:	f67f ae84 	bls.w	800567c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005974:	bf00      	nop
 8005976:	bf00      	nop
 8005978:	3724      	adds	r7, #36	; 0x24
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	40023800 	.word	0x40023800
 8005988:	40013800 	.word	0x40013800
 800598c:	40020000 	.word	0x40020000
 8005990:	40020400 	.word	0x40020400
 8005994:	40020800 	.word	0x40020800
 8005998:	40020c00 	.word	0x40020c00
 800599c:	40021000 	.word	0x40021000
 80059a0:	40021400 	.word	0x40021400
 80059a4:	40021800 	.word	0x40021800
 80059a8:	40021c00 	.word	0x40021c00
 80059ac:	40022000 	.word	0x40022000
 80059b0:	40022400 	.word	0x40022400
 80059b4:	40013c00 	.word	0x40013c00

080059b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b087      	sub	sp, #28
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80059c6:	2300      	movs	r3, #0
 80059c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80059ca:	2300      	movs	r3, #0
 80059cc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059ce:	2300      	movs	r3, #0
 80059d0:	617b      	str	r3, [r7, #20]
 80059d2:	e0d9      	b.n	8005b88 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80059d4:	2201      	movs	r2, #1
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	fa02 f303 	lsl.w	r3, r2, r3
 80059dc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80059de:	683a      	ldr	r2, [r7, #0]
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	4013      	ands	r3, r2
 80059e4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	f040 80c9 	bne.w	8005b82 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80059f0:	4a6b      	ldr	r2, [pc, #428]	; (8005ba0 <HAL_GPIO_DeInit+0x1e8>)
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	089b      	lsrs	r3, r3, #2
 80059f6:	3302      	adds	r3, #2
 80059f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059fc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f003 0303 	and.w	r3, r3, #3
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	220f      	movs	r2, #15
 8005a08:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	4013      	ands	r3, r2
 8005a10:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a63      	ldr	r2, [pc, #396]	; (8005ba4 <HAL_GPIO_DeInit+0x1ec>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d037      	beq.n	8005a8a <HAL_GPIO_DeInit+0xd2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a62      	ldr	r2, [pc, #392]	; (8005ba8 <HAL_GPIO_DeInit+0x1f0>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d031      	beq.n	8005a86 <HAL_GPIO_DeInit+0xce>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a61      	ldr	r2, [pc, #388]	; (8005bac <HAL_GPIO_DeInit+0x1f4>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d02b      	beq.n	8005a82 <HAL_GPIO_DeInit+0xca>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a60      	ldr	r2, [pc, #384]	; (8005bb0 <HAL_GPIO_DeInit+0x1f8>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d025      	beq.n	8005a7e <HAL_GPIO_DeInit+0xc6>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a5f      	ldr	r2, [pc, #380]	; (8005bb4 <HAL_GPIO_DeInit+0x1fc>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d01f      	beq.n	8005a7a <HAL_GPIO_DeInit+0xc2>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a5e      	ldr	r2, [pc, #376]	; (8005bb8 <HAL_GPIO_DeInit+0x200>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d019      	beq.n	8005a76 <HAL_GPIO_DeInit+0xbe>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a5d      	ldr	r2, [pc, #372]	; (8005bbc <HAL_GPIO_DeInit+0x204>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d013      	beq.n	8005a72 <HAL_GPIO_DeInit+0xba>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a5c      	ldr	r2, [pc, #368]	; (8005bc0 <HAL_GPIO_DeInit+0x208>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d00d      	beq.n	8005a6e <HAL_GPIO_DeInit+0xb6>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a5b      	ldr	r2, [pc, #364]	; (8005bc4 <HAL_GPIO_DeInit+0x20c>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d007      	beq.n	8005a6a <HAL_GPIO_DeInit+0xb2>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a5a      	ldr	r2, [pc, #360]	; (8005bc8 <HAL_GPIO_DeInit+0x210>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d101      	bne.n	8005a66 <HAL_GPIO_DeInit+0xae>
 8005a62:	2309      	movs	r3, #9
 8005a64:	e012      	b.n	8005a8c <HAL_GPIO_DeInit+0xd4>
 8005a66:	230a      	movs	r3, #10
 8005a68:	e010      	b.n	8005a8c <HAL_GPIO_DeInit+0xd4>
 8005a6a:	2308      	movs	r3, #8
 8005a6c:	e00e      	b.n	8005a8c <HAL_GPIO_DeInit+0xd4>
 8005a6e:	2307      	movs	r3, #7
 8005a70:	e00c      	b.n	8005a8c <HAL_GPIO_DeInit+0xd4>
 8005a72:	2306      	movs	r3, #6
 8005a74:	e00a      	b.n	8005a8c <HAL_GPIO_DeInit+0xd4>
 8005a76:	2305      	movs	r3, #5
 8005a78:	e008      	b.n	8005a8c <HAL_GPIO_DeInit+0xd4>
 8005a7a:	2304      	movs	r3, #4
 8005a7c:	e006      	b.n	8005a8c <HAL_GPIO_DeInit+0xd4>
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e004      	b.n	8005a8c <HAL_GPIO_DeInit+0xd4>
 8005a82:	2302      	movs	r3, #2
 8005a84:	e002      	b.n	8005a8c <HAL_GPIO_DeInit+0xd4>
 8005a86:	2301      	movs	r3, #1
 8005a88:	e000      	b.n	8005a8c <HAL_GPIO_DeInit+0xd4>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	f002 0203 	and.w	r2, r2, #3
 8005a92:	0092      	lsls	r2, r2, #2
 8005a94:	4093      	lsls	r3, r2
 8005a96:	68ba      	ldr	r2, [r7, #8]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d132      	bne.n	8005b02 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005a9c:	4b4b      	ldr	r3, [pc, #300]	; (8005bcc <HAL_GPIO_DeInit+0x214>)
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	43db      	mvns	r3, r3
 8005aa4:	4949      	ldr	r1, [pc, #292]	; (8005bcc <HAL_GPIO_DeInit+0x214>)
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005aaa:	4b48      	ldr	r3, [pc, #288]	; (8005bcc <HAL_GPIO_DeInit+0x214>)
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	43db      	mvns	r3, r3
 8005ab2:	4946      	ldr	r1, [pc, #280]	; (8005bcc <HAL_GPIO_DeInit+0x214>)
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005ab8:	4b44      	ldr	r3, [pc, #272]	; (8005bcc <HAL_GPIO_DeInit+0x214>)
 8005aba:	68da      	ldr	r2, [r3, #12]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	43db      	mvns	r3, r3
 8005ac0:	4942      	ldr	r1, [pc, #264]	; (8005bcc <HAL_GPIO_DeInit+0x214>)
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005ac6:	4b41      	ldr	r3, [pc, #260]	; (8005bcc <HAL_GPIO_DeInit+0x214>)
 8005ac8:	689a      	ldr	r2, [r3, #8]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	43db      	mvns	r3, r3
 8005ace:	493f      	ldr	r1, [pc, #252]	; (8005bcc <HAL_GPIO_DeInit+0x214>)
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	f003 0303 	and.w	r3, r3, #3
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	220f      	movs	r2, #15
 8005ade:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005ae4:	4a2e      	ldr	r2, [pc, #184]	; (8005ba0 <HAL_GPIO_DeInit+0x1e8>)
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	089b      	lsrs	r3, r3, #2
 8005aea:	3302      	adds	r3, #2
 8005aec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	43da      	mvns	r2, r3
 8005af4:	482a      	ldr	r0, [pc, #168]	; (8005ba0 <HAL_GPIO_DeInit+0x1e8>)
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	089b      	lsrs	r3, r3, #2
 8005afa:	400a      	ands	r2, r1
 8005afc:	3302      	adds	r3, #2
 8005afe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	005b      	lsls	r3, r3, #1
 8005b0a:	2103      	movs	r1, #3
 8005b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b10:	43db      	mvns	r3, r3
 8005b12:	401a      	ands	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	08da      	lsrs	r2, r3, #3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	3208      	adds	r2, #8
 8005b20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	f003 0307 	and.w	r3, r3, #7
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	220f      	movs	r2, #15
 8005b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b32:	43db      	mvns	r3, r3
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	08d2      	lsrs	r2, r2, #3
 8005b38:	4019      	ands	r1, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	3208      	adds	r2, #8
 8005b3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68da      	ldr	r2, [r3, #12]
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	005b      	lsls	r3, r3, #1
 8005b4a:	2103      	movs	r1, #3
 8005b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b50:	43db      	mvns	r3, r3
 8005b52:	401a      	ands	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685a      	ldr	r2, [r3, #4]
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	fa01 f303 	lsl.w	r3, r1, r3
 8005b64:	43db      	mvns	r3, r3
 8005b66:	401a      	ands	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	689a      	ldr	r2, [r3, #8]
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	005b      	lsls	r3, r3, #1
 8005b74:	2103      	movs	r1, #3
 8005b76:	fa01 f303 	lsl.w	r3, r1, r3
 8005b7a:	43db      	mvns	r3, r3
 8005b7c:	401a      	ands	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	3301      	adds	r3, #1
 8005b86:	617b      	str	r3, [r7, #20]
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	2b0f      	cmp	r3, #15
 8005b8c:	f67f af22 	bls.w	80059d4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005b90:	bf00      	nop
 8005b92:	bf00      	nop
 8005b94:	371c      	adds	r7, #28
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	40013800 	.word	0x40013800
 8005ba4:	40020000 	.word	0x40020000
 8005ba8:	40020400 	.word	0x40020400
 8005bac:	40020800 	.word	0x40020800
 8005bb0:	40020c00 	.word	0x40020c00
 8005bb4:	40021000 	.word	0x40021000
 8005bb8:	40021400 	.word	0x40021400
 8005bbc:	40021800 	.word	0x40021800
 8005bc0:	40021c00 	.word	0x40021c00
 8005bc4:	40022000 	.word	0x40022000
 8005bc8:	40022400 	.word	0x40022400
 8005bcc:	40013c00 	.word	0x40013c00

08005bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	460b      	mov	r3, r1
 8005bda:	807b      	strh	r3, [r7, #2]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005be0:	787b      	ldrb	r3, [r7, #1]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d003      	beq.n	8005bee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005be6:	887a      	ldrh	r2, [r7, #2]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005bec:	e003      	b.n	8005bf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005bee:	887b      	ldrh	r3, [r7, #2]
 8005bf0:	041a      	lsls	r2, r3, #16
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	619a      	str	r2, [r3, #24]
}
 8005bf6:	bf00      	nop
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8005c02:	b590      	push	{r4, r7, lr}
 8005c04:	b08b      	sub	sp, #44	; 0x2c
 8005c06:	af04      	add	r7, sp, #16
 8005c08:	6078      	str	r0, [r7, #4]
 8005c0a:	4608      	mov	r0, r1
 8005c0c:	4611      	mov	r1, r2
 8005c0e:	461a      	mov	r2, r3
 8005c10:	4603      	mov	r3, r0
 8005c12:	70fb      	strb	r3, [r7, #3]
 8005c14:	460b      	mov	r3, r1
 8005c16:	70bb      	strb	r3, [r7, #2]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8005c1c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005c1e:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d101      	bne.n	8005c2e <HAL_HCD_HC_Init+0x2c>
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	e09d      	b.n	8005d6a <HAL_HCD_HC_Init+0x168>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8005c36:	78fa      	ldrb	r2, [r7, #3]
 8005c38:	6879      	ldr	r1, [r7, #4]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	011b      	lsls	r3, r3, #4
 8005c3e:	1a9b      	subs	r3, r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	440b      	add	r3, r1
 8005c44:	3319      	adds	r3, #25
 8005c46:	2200      	movs	r2, #0
 8005c48:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8005c4a:	78fa      	ldrb	r2, [r7, #3]
 8005c4c:	6879      	ldr	r1, [r7, #4]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	011b      	lsls	r3, r3, #4
 8005c52:	1a9b      	subs	r3, r3, r2
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	440b      	add	r3, r1
 8005c58:	3314      	adds	r3, #20
 8005c5a:	787a      	ldrb	r2, [r7, #1]
 8005c5c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005c5e:	78fa      	ldrb	r2, [r7, #3]
 8005c60:	6879      	ldr	r1, [r7, #4]
 8005c62:	4613      	mov	r3, r2
 8005c64:	011b      	lsls	r3, r3, #4
 8005c66:	1a9b      	subs	r3, r3, r2
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	440b      	add	r3, r1
 8005c6c:	3315      	adds	r3, #21
 8005c6e:	78fa      	ldrb	r2, [r7, #3]
 8005c70:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8005c72:	78fa      	ldrb	r2, [r7, #3]
 8005c74:	6879      	ldr	r1, [r7, #4]
 8005c76:	4613      	mov	r3, r2
 8005c78:	011b      	lsls	r3, r3, #4
 8005c7a:	1a9b      	subs	r3, r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	440b      	add	r3, r1
 8005c80:	3326      	adds	r3, #38	; 0x26
 8005c82:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8005c86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005c88:	78fa      	ldrb	r2, [r7, #3]
 8005c8a:	78bb      	ldrb	r3, [r7, #2]
 8005c8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c90:	b2d8      	uxtb	r0, r3
 8005c92:	6879      	ldr	r1, [r7, #4]
 8005c94:	4613      	mov	r3, r2
 8005c96:	011b      	lsls	r3, r3, #4
 8005c98:	1a9b      	subs	r3, r3, r2
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	440b      	add	r3, r1
 8005c9e:	3316      	adds	r3, #22
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8005ca4:	78fb      	ldrb	r3, [r7, #3]
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 fb82 	bl	80063b2 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8005cae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	da0a      	bge.n	8005ccc <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005cb6:	78fa      	ldrb	r2, [r7, #3]
 8005cb8:	6879      	ldr	r1, [r7, #4]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	011b      	lsls	r3, r3, #4
 8005cbe:	1a9b      	subs	r3, r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	440b      	add	r3, r1
 8005cc4:	3317      	adds	r3, #23
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	701a      	strb	r2, [r3, #0]
 8005cca:	e009      	b.n	8005ce0 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8005ccc:	78fa      	ldrb	r2, [r7, #3]
 8005cce:	6879      	ldr	r1, [r7, #4]
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	011b      	lsls	r3, r3, #4
 8005cd4:	1a9b      	subs	r3, r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	440b      	add	r3, r1
 8005cda:	3317      	adds	r3, #23
 8005cdc:	2200      	movs	r2, #0
 8005cde:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f006 fd85 	bl	800c7f4 <USB_GetHostSpeed>
 8005cea:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8005cec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d10b      	bne.n	8005d0c <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8005cf4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d107      	bne.n	8005d0c <HAL_HCD_HC_Init+0x10a>
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d104      	bne.n	8005d0c <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	2bbc      	cmp	r3, #188	; 0xbc
 8005d06:	d901      	bls.n	8005d0c <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8005d08:	23bc      	movs	r3, #188	; 0xbc
 8005d0a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8005d0c:	78fa      	ldrb	r2, [r7, #3]
 8005d0e:	6879      	ldr	r1, [r7, #4]
 8005d10:	4613      	mov	r3, r2
 8005d12:	011b      	lsls	r3, r3, #4
 8005d14:	1a9b      	subs	r3, r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	440b      	add	r3, r1
 8005d1a:	3318      	adds	r3, #24
 8005d1c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8005d20:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8005d22:	78fa      	ldrb	r2, [r7, #3]
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	b298      	uxth	r0, r3
 8005d28:	6879      	ldr	r1, [r7, #4]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	011b      	lsls	r3, r3, #4
 8005d2e:	1a9b      	subs	r3, r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	440b      	add	r3, r1
 8005d34:	3328      	adds	r3, #40	; 0x28
 8005d36:	4602      	mov	r2, r0
 8005d38:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6818      	ldr	r0, [r3, #0]
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	787c      	ldrb	r4, [r7, #1]
 8005d44:	78ba      	ldrb	r2, [r7, #2]
 8005d46:	78f9      	ldrb	r1, [r7, #3]
 8005d48:	9302      	str	r3, [sp, #8]
 8005d4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005d4e:	9301      	str	r3, [sp, #4]
 8005d50:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	4623      	mov	r3, r4
 8005d58:	f006 fd64 	bl	800c824 <USB_HC_Init>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8005d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	371c      	adds	r7, #28
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd90      	pop	{r4, r7, pc}
	...

08005d74 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	4608      	mov	r0, r1
 8005d7e:	4611      	mov	r1, r2
 8005d80:	461a      	mov	r2, r3
 8005d82:	4603      	mov	r3, r0
 8005d84:	70fb      	strb	r3, [r7, #3]
 8005d86:	460b      	mov	r3, r1
 8005d88:	70bb      	strb	r3, [r7, #2]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8005d8e:	78fa      	ldrb	r2, [r7, #3]
 8005d90:	6879      	ldr	r1, [r7, #4]
 8005d92:	4613      	mov	r3, r2
 8005d94:	011b      	lsls	r3, r3, #4
 8005d96:	1a9b      	subs	r3, r3, r2
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	440b      	add	r3, r1
 8005d9c:	3317      	adds	r3, #23
 8005d9e:	78ba      	ldrb	r2, [r7, #2]
 8005da0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005da2:	78fa      	ldrb	r2, [r7, #3]
 8005da4:	6879      	ldr	r1, [r7, #4]
 8005da6:	4613      	mov	r3, r2
 8005da8:	011b      	lsls	r3, r3, #4
 8005daa:	1a9b      	subs	r3, r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	440b      	add	r3, r1
 8005db0:	3326      	adds	r3, #38	; 0x26
 8005db2:	787a      	ldrb	r2, [r7, #1]
 8005db4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005db6:	7c3b      	ldrb	r3, [r7, #16]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d114      	bne.n	8005de6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8005dbc:	78fa      	ldrb	r2, [r7, #3]
 8005dbe:	6879      	ldr	r1, [r7, #4]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	011b      	lsls	r3, r3, #4
 8005dc4:	1a9b      	subs	r3, r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	440b      	add	r3, r1
 8005dca:	332a      	adds	r3, #42	; 0x2a
 8005dcc:	2203      	movs	r2, #3
 8005dce:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005dd0:	78fa      	ldrb	r2, [r7, #3]
 8005dd2:	6879      	ldr	r1, [r7, #4]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	011b      	lsls	r3, r3, #4
 8005dd8:	1a9b      	subs	r3, r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	440b      	add	r3, r1
 8005dde:	3319      	adds	r3, #25
 8005de0:	7f3a      	ldrb	r2, [r7, #28]
 8005de2:	701a      	strb	r2, [r3, #0]
 8005de4:	e009      	b.n	8005dfa <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005de6:	78fa      	ldrb	r2, [r7, #3]
 8005de8:	6879      	ldr	r1, [r7, #4]
 8005dea:	4613      	mov	r3, r2
 8005dec:	011b      	lsls	r3, r3, #4
 8005dee:	1a9b      	subs	r3, r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	440b      	add	r3, r1
 8005df4:	332a      	adds	r3, #42	; 0x2a
 8005df6:	2202      	movs	r2, #2
 8005df8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8005dfa:	787b      	ldrb	r3, [r7, #1]
 8005dfc:	2b03      	cmp	r3, #3
 8005dfe:	f200 8102 	bhi.w	8006006 <HAL_HCD_HC_SubmitRequest+0x292>
 8005e02:	a201      	add	r2, pc, #4	; (adr r2, 8005e08 <HAL_HCD_HC_SubmitRequest+0x94>)
 8005e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e08:	08005e19 	.word	0x08005e19
 8005e0c:	08005ff1 	.word	0x08005ff1
 8005e10:	08005edd 	.word	0x08005edd
 8005e14:	08005f67 	.word	0x08005f67
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8005e18:	7c3b      	ldrb	r3, [r7, #16]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	f040 80f5 	bne.w	800600a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8005e20:	78bb      	ldrb	r3, [r7, #2]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d12d      	bne.n	8005e82 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8005e26:	8b3b      	ldrh	r3, [r7, #24]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d109      	bne.n	8005e40 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8005e2c:	78fa      	ldrb	r2, [r7, #3]
 8005e2e:	6879      	ldr	r1, [r7, #4]
 8005e30:	4613      	mov	r3, r2
 8005e32:	011b      	lsls	r3, r3, #4
 8005e34:	1a9b      	subs	r3, r3, r2
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	440b      	add	r3, r1
 8005e3a:	333d      	adds	r3, #61	; 0x3d
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8005e40:	78fa      	ldrb	r2, [r7, #3]
 8005e42:	6879      	ldr	r1, [r7, #4]
 8005e44:	4613      	mov	r3, r2
 8005e46:	011b      	lsls	r3, r3, #4
 8005e48:	1a9b      	subs	r3, r3, r2
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	440b      	add	r3, r1
 8005e4e:	333d      	adds	r3, #61	; 0x3d
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10a      	bne.n	8005e6c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005e56:	78fa      	ldrb	r2, [r7, #3]
 8005e58:	6879      	ldr	r1, [r7, #4]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	011b      	lsls	r3, r3, #4
 8005e5e:	1a9b      	subs	r3, r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	440b      	add	r3, r1
 8005e64:	332a      	adds	r3, #42	; 0x2a
 8005e66:	2200      	movs	r2, #0
 8005e68:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8005e6a:	e0ce      	b.n	800600a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005e6c:	78fa      	ldrb	r2, [r7, #3]
 8005e6e:	6879      	ldr	r1, [r7, #4]
 8005e70:	4613      	mov	r3, r2
 8005e72:	011b      	lsls	r3, r3, #4
 8005e74:	1a9b      	subs	r3, r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	440b      	add	r3, r1
 8005e7a:	332a      	adds	r3, #42	; 0x2a
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	701a      	strb	r2, [r3, #0]
      break;
 8005e80:	e0c3      	b.n	800600a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8005e82:	78fa      	ldrb	r2, [r7, #3]
 8005e84:	6879      	ldr	r1, [r7, #4]
 8005e86:	4613      	mov	r3, r2
 8005e88:	011b      	lsls	r3, r3, #4
 8005e8a:	1a9b      	subs	r3, r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	440b      	add	r3, r1
 8005e90:	331a      	adds	r3, #26
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	f040 80b8 	bne.w	800600a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8005e9a:	78fa      	ldrb	r2, [r7, #3]
 8005e9c:	6879      	ldr	r1, [r7, #4]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	011b      	lsls	r3, r3, #4
 8005ea2:	1a9b      	subs	r3, r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	440b      	add	r3, r1
 8005ea8:	333c      	adds	r3, #60	; 0x3c
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10a      	bne.n	8005ec6 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005eb0:	78fa      	ldrb	r2, [r7, #3]
 8005eb2:	6879      	ldr	r1, [r7, #4]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	011b      	lsls	r3, r3, #4
 8005eb8:	1a9b      	subs	r3, r3, r2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	440b      	add	r3, r1
 8005ebe:	332a      	adds	r3, #42	; 0x2a
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	701a      	strb	r2, [r3, #0]
      break;
 8005ec4:	e0a1      	b.n	800600a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005ec6:	78fa      	ldrb	r2, [r7, #3]
 8005ec8:	6879      	ldr	r1, [r7, #4]
 8005eca:	4613      	mov	r3, r2
 8005ecc:	011b      	lsls	r3, r3, #4
 8005ece:	1a9b      	subs	r3, r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	440b      	add	r3, r1
 8005ed4:	332a      	adds	r3, #42	; 0x2a
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	701a      	strb	r2, [r3, #0]
      break;
 8005eda:	e096      	b.n	800600a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005edc:	78bb      	ldrb	r3, [r7, #2]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d120      	bne.n	8005f24 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005ee2:	78fa      	ldrb	r2, [r7, #3]
 8005ee4:	6879      	ldr	r1, [r7, #4]
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	011b      	lsls	r3, r3, #4
 8005eea:	1a9b      	subs	r3, r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	440b      	add	r3, r1
 8005ef0:	333d      	adds	r3, #61	; 0x3d
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10a      	bne.n	8005f0e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005ef8:	78fa      	ldrb	r2, [r7, #3]
 8005efa:	6879      	ldr	r1, [r7, #4]
 8005efc:	4613      	mov	r3, r2
 8005efe:	011b      	lsls	r3, r3, #4
 8005f00:	1a9b      	subs	r3, r3, r2
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	440b      	add	r3, r1
 8005f06:	332a      	adds	r3, #42	; 0x2a
 8005f08:	2200      	movs	r2, #0
 8005f0a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005f0c:	e07e      	b.n	800600c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005f0e:	78fa      	ldrb	r2, [r7, #3]
 8005f10:	6879      	ldr	r1, [r7, #4]
 8005f12:	4613      	mov	r3, r2
 8005f14:	011b      	lsls	r3, r3, #4
 8005f16:	1a9b      	subs	r3, r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	440b      	add	r3, r1
 8005f1c:	332a      	adds	r3, #42	; 0x2a
 8005f1e:	2202      	movs	r2, #2
 8005f20:	701a      	strb	r2, [r3, #0]
      break;
 8005f22:	e073      	b.n	800600c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005f24:	78fa      	ldrb	r2, [r7, #3]
 8005f26:	6879      	ldr	r1, [r7, #4]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	011b      	lsls	r3, r3, #4
 8005f2c:	1a9b      	subs	r3, r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	440b      	add	r3, r1
 8005f32:	333c      	adds	r3, #60	; 0x3c
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10a      	bne.n	8005f50 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005f3a:	78fa      	ldrb	r2, [r7, #3]
 8005f3c:	6879      	ldr	r1, [r7, #4]
 8005f3e:	4613      	mov	r3, r2
 8005f40:	011b      	lsls	r3, r3, #4
 8005f42:	1a9b      	subs	r3, r3, r2
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	440b      	add	r3, r1
 8005f48:	332a      	adds	r3, #42	; 0x2a
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	701a      	strb	r2, [r3, #0]
      break;
 8005f4e:	e05d      	b.n	800600c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005f50:	78fa      	ldrb	r2, [r7, #3]
 8005f52:	6879      	ldr	r1, [r7, #4]
 8005f54:	4613      	mov	r3, r2
 8005f56:	011b      	lsls	r3, r3, #4
 8005f58:	1a9b      	subs	r3, r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	440b      	add	r3, r1
 8005f5e:	332a      	adds	r3, #42	; 0x2a
 8005f60:	2202      	movs	r2, #2
 8005f62:	701a      	strb	r2, [r3, #0]
      break;
 8005f64:	e052      	b.n	800600c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8005f66:	78bb      	ldrb	r3, [r7, #2]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d120      	bne.n	8005fae <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005f6c:	78fa      	ldrb	r2, [r7, #3]
 8005f6e:	6879      	ldr	r1, [r7, #4]
 8005f70:	4613      	mov	r3, r2
 8005f72:	011b      	lsls	r3, r3, #4
 8005f74:	1a9b      	subs	r3, r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	440b      	add	r3, r1
 8005f7a:	333d      	adds	r3, #61	; 0x3d
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10a      	bne.n	8005f98 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005f82:	78fa      	ldrb	r2, [r7, #3]
 8005f84:	6879      	ldr	r1, [r7, #4]
 8005f86:	4613      	mov	r3, r2
 8005f88:	011b      	lsls	r3, r3, #4
 8005f8a:	1a9b      	subs	r3, r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	440b      	add	r3, r1
 8005f90:	332a      	adds	r3, #42	; 0x2a
 8005f92:	2200      	movs	r2, #0
 8005f94:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005f96:	e039      	b.n	800600c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005f98:	78fa      	ldrb	r2, [r7, #3]
 8005f9a:	6879      	ldr	r1, [r7, #4]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	011b      	lsls	r3, r3, #4
 8005fa0:	1a9b      	subs	r3, r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	440b      	add	r3, r1
 8005fa6:	332a      	adds	r3, #42	; 0x2a
 8005fa8:	2202      	movs	r2, #2
 8005faa:	701a      	strb	r2, [r3, #0]
      break;
 8005fac:	e02e      	b.n	800600c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005fae:	78fa      	ldrb	r2, [r7, #3]
 8005fb0:	6879      	ldr	r1, [r7, #4]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	011b      	lsls	r3, r3, #4
 8005fb6:	1a9b      	subs	r3, r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	440b      	add	r3, r1
 8005fbc:	333c      	adds	r3, #60	; 0x3c
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d10a      	bne.n	8005fda <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005fc4:	78fa      	ldrb	r2, [r7, #3]
 8005fc6:	6879      	ldr	r1, [r7, #4]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	011b      	lsls	r3, r3, #4
 8005fcc:	1a9b      	subs	r3, r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	440b      	add	r3, r1
 8005fd2:	332a      	adds	r3, #42	; 0x2a
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	701a      	strb	r2, [r3, #0]
      break;
 8005fd8:	e018      	b.n	800600c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005fda:	78fa      	ldrb	r2, [r7, #3]
 8005fdc:	6879      	ldr	r1, [r7, #4]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	011b      	lsls	r3, r3, #4
 8005fe2:	1a9b      	subs	r3, r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	440b      	add	r3, r1
 8005fe8:	332a      	adds	r3, #42	; 0x2a
 8005fea:	2202      	movs	r2, #2
 8005fec:	701a      	strb	r2, [r3, #0]
      break;
 8005fee:	e00d      	b.n	800600c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005ff0:	78fa      	ldrb	r2, [r7, #3]
 8005ff2:	6879      	ldr	r1, [r7, #4]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	011b      	lsls	r3, r3, #4
 8005ff8:	1a9b      	subs	r3, r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	440b      	add	r3, r1
 8005ffe:	332a      	adds	r3, #42	; 0x2a
 8006000:	2200      	movs	r2, #0
 8006002:	701a      	strb	r2, [r3, #0]
      break;
 8006004:	e002      	b.n	800600c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8006006:	bf00      	nop
 8006008:	e000      	b.n	800600c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800600a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800600c:	78fa      	ldrb	r2, [r7, #3]
 800600e:	6879      	ldr	r1, [r7, #4]
 8006010:	4613      	mov	r3, r2
 8006012:	011b      	lsls	r3, r3, #4
 8006014:	1a9b      	subs	r3, r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	440b      	add	r3, r1
 800601a:	332c      	adds	r3, #44	; 0x2c
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8006020:	78fa      	ldrb	r2, [r7, #3]
 8006022:	8b39      	ldrh	r1, [r7, #24]
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	4613      	mov	r3, r2
 8006028:	011b      	lsls	r3, r3, #4
 800602a:	1a9b      	subs	r3, r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4403      	add	r3, r0
 8006030:	3334      	adds	r3, #52	; 0x34
 8006032:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8006034:	78fa      	ldrb	r2, [r7, #3]
 8006036:	6879      	ldr	r1, [r7, #4]
 8006038:	4613      	mov	r3, r2
 800603a:	011b      	lsls	r3, r3, #4
 800603c:	1a9b      	subs	r3, r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	440b      	add	r3, r1
 8006042:	334c      	adds	r3, #76	; 0x4c
 8006044:	2200      	movs	r2, #0
 8006046:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8006048:	78fa      	ldrb	r2, [r7, #3]
 800604a:	6879      	ldr	r1, [r7, #4]
 800604c:	4613      	mov	r3, r2
 800604e:	011b      	lsls	r3, r3, #4
 8006050:	1a9b      	subs	r3, r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	440b      	add	r3, r1
 8006056:	3338      	adds	r3, #56	; 0x38
 8006058:	2200      	movs	r2, #0
 800605a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800605c:	78fa      	ldrb	r2, [r7, #3]
 800605e:	6879      	ldr	r1, [r7, #4]
 8006060:	4613      	mov	r3, r2
 8006062:	011b      	lsls	r3, r3, #4
 8006064:	1a9b      	subs	r3, r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	440b      	add	r3, r1
 800606a:	3315      	adds	r3, #21
 800606c:	78fa      	ldrb	r2, [r7, #3]
 800606e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8006070:	78fa      	ldrb	r2, [r7, #3]
 8006072:	6879      	ldr	r1, [r7, #4]
 8006074:	4613      	mov	r3, r2
 8006076:	011b      	lsls	r3, r3, #4
 8006078:	1a9b      	subs	r3, r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	440b      	add	r3, r1
 800607e:	334d      	adds	r3, #77	; 0x4d
 8006080:	2200      	movs	r2, #0
 8006082:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6818      	ldr	r0, [r3, #0]
 8006088:	78fa      	ldrb	r2, [r7, #3]
 800608a:	4613      	mov	r3, r2
 800608c:	011b      	lsls	r3, r3, #4
 800608e:	1a9b      	subs	r3, r3, r2
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	3310      	adds	r3, #16
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	4413      	add	r3, r2
 8006098:	1d19      	adds	r1, r3, #4
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	799b      	ldrb	r3, [r3, #6]
 800609e:	461a      	mov	r2, r3
 80060a0:	f006 fcec 	bl	800ca7c <USB_HC_StartXfer>
 80060a4:	4603      	mov	r3, r0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop

080060b0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f006 fae6 	bl	800c698 <USB_GetMode>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	f040 80fb 	bne.w	80062ca <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4618      	mov	r0, r3
 80060da:	f006 faa9 	bl	800c630 <USB_ReadInterrupts>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f000 80f1 	beq.w	80062c8 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f006 faa0 	bl	800c630 <USB_ReadInterrupts>
 80060f0:	4603      	mov	r3, r0
 80060f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060fa:	d104      	bne.n	8006106 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006104:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4618      	mov	r0, r3
 800610c:	f006 fa90 	bl	800c630 <USB_ReadInterrupts>
 8006110:	4603      	mov	r3, r0
 8006112:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006116:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800611a:	d104      	bne.n	8006126 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006124:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4618      	mov	r0, r3
 800612c:	f006 fa80 	bl	800c630 <USB_ReadInterrupts>
 8006130:	4603      	mov	r3, r0
 8006132:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006136:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800613a:	d104      	bne.n	8006146 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006144:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4618      	mov	r0, r3
 800614c:	f006 fa70 	bl	800c630 <USB_ReadInterrupts>
 8006150:	4603      	mov	r3, r0
 8006152:	f003 0302 	and.w	r3, r3, #2
 8006156:	2b02      	cmp	r3, #2
 8006158:	d103      	bne.n	8006162 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2202      	movs	r2, #2
 8006160:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4618      	mov	r0, r3
 8006168:	f006 fa62 	bl	800c630 <USB_ReadInterrupts>
 800616c:	4603      	mov	r3, r0
 800616e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006172:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006176:	d120      	bne.n	80061ba <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006180:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	2b00      	cmp	r3, #0
 8006190:	d113      	bne.n	80061ba <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8006192:	2110      	movs	r1, #16
 8006194:	6938      	ldr	r0, [r7, #16]
 8006196:	f006 f955 	bl	800c444 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800619a:	6938      	ldr	r0, [r7, #16]
 800619c:	f006 f984 	bl	800c4a8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	7a5b      	ldrb	r3, [r3, #9]
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d105      	bne.n	80061b4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2101      	movs	r1, #1
 80061ae:	4618      	mov	r0, r3
 80061b0:	f006 fa80 	bl	800c6b4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f008 fcab 	bl	800eb10 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4618      	mov	r0, r3
 80061c0:	f006 fa36 	bl	800c630 <USB_ReadInterrupts>
 80061c4:	4603      	mov	r3, r0
 80061c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061ce:	d102      	bne.n	80061d6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f001 fd10 	bl	8007bf6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4618      	mov	r0, r3
 80061dc:	f006 fa28 	bl	800c630 <USB_ReadInterrupts>
 80061e0:	4603      	mov	r3, r0
 80061e2:	f003 0308 	and.w	r3, r3, #8
 80061e6:	2b08      	cmp	r3, #8
 80061e8:	d106      	bne.n	80061f8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f008 fc74 	bl	800ead8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2208      	movs	r2, #8
 80061f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4618      	mov	r0, r3
 80061fe:	f006 fa17 	bl	800c630 <USB_ReadInterrupts>
 8006202:	4603      	mov	r3, r0
 8006204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006208:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800620c:	d139      	bne.n	8006282 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4618      	mov	r0, r3
 8006214:	f006 feac 	bl	800cf70 <USB_HC_ReadInterrupt>
 8006218:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800621a:	2300      	movs	r3, #0
 800621c:	617b      	str	r3, [r7, #20]
 800621e:	e025      	b.n	800626c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	f003 030f 	and.w	r3, r3, #15
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	fa22 f303 	lsr.w	r3, r2, r3
 800622c:	f003 0301 	and.w	r3, r3, #1
 8006230:	2b00      	cmp	r3, #0
 8006232:	d018      	beq.n	8006266 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	015a      	lsls	r2, r3, #5
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	4413      	add	r3, r2
 800623c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006246:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800624a:	d106      	bne.n	800625a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	b2db      	uxtb	r3, r3
 8006250:	4619      	mov	r1, r3
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f8e2 	bl	800641c <HCD_HC_IN_IRQHandler>
 8006258:	e005      	b.n	8006266 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	b2db      	uxtb	r3, r3
 800625e:	4619      	mov	r1, r3
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 ff44 	bl	80070ee <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	3301      	adds	r3, #1
 800626a:	617b      	str	r3, [r7, #20]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	795b      	ldrb	r3, [r3, #5]
 8006270:	461a      	mov	r2, r3
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	4293      	cmp	r3, r2
 8006276:	d3d3      	bcc.n	8006220 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006280:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4618      	mov	r0, r3
 8006288:	f006 f9d2 	bl	800c630 <USB_ReadInterrupts>
 800628c:	4603      	mov	r3, r0
 800628e:	f003 0310 	and.w	r3, r3, #16
 8006292:	2b10      	cmp	r3, #16
 8006294:	d101      	bne.n	800629a <HAL_HCD_IRQHandler+0x1ea>
 8006296:	2301      	movs	r3, #1
 8006298:	e000      	b.n	800629c <HAL_HCD_IRQHandler+0x1ec>
 800629a:	2300      	movs	r3, #0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d014      	beq.n	80062ca <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	699a      	ldr	r2, [r3, #24]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f022 0210 	bic.w	r2, r2, #16
 80062ae:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f001 fbc1 	bl	8007a38 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	699a      	ldr	r2, [r3, #24]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f042 0210 	orr.w	r2, r2, #16
 80062c4:	619a      	str	r2, [r3, #24]
 80062c6:	e000      	b.n	80062ca <HAL_HCD_IRQHandler+0x21a>
      return;
 80062c8:	bf00      	nop
    }
  }
}
 80062ca:	3718      	adds	r7, #24
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d101      	bne.n	80062e6 <HAL_HCD_Start+0x16>
 80062e2:	2302      	movs	r3, #2
 80062e4:	e013      	b.n	800630e <HAL_HCD_Start+0x3e>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2101      	movs	r1, #1
 80062f4:	4618      	mov	r0, r3
 80062f6:	f006 fa44 	bl	800c782 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4618      	mov	r0, r3
 8006300:	f006 f87e 	bl	800c400 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3708      	adds	r7, #8
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b082      	sub	sp, #8
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8006324:	2b01      	cmp	r3, #1
 8006326:	d101      	bne.n	800632c <HAL_HCD_Stop+0x16>
 8006328:	2302      	movs	r3, #2
 800632a:	e00d      	b.n	8006348 <HAL_HCD_Stop+0x32>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4618      	mov	r0, r3
 800633a:	f006 ff87 	bl	800d24c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3708      	adds	r7, #8
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4618      	mov	r0, r3
 800635e:	f006 f9e6 	bl	800c72e <USB_ResetPort>
 8006362:	4603      	mov	r3, r0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3708      	adds	r7, #8
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	460b      	mov	r3, r1
 8006376:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8006378:	78fa      	ldrb	r2, [r7, #3]
 800637a:	6879      	ldr	r1, [r7, #4]
 800637c:	4613      	mov	r3, r2
 800637e:	011b      	lsls	r3, r3, #4
 8006380:	1a9b      	subs	r3, r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	440b      	add	r3, r1
 8006386:	334c      	adds	r3, #76	; 0x4c
 8006388:	781b      	ldrb	r3, [r3, #0]
}
 800638a:	4618      	mov	r0, r3
 800638c:	370c      	adds	r7, #12
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b082      	sub	sp, #8
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f006 fa26 	bl	800c7f4 <USB_GetHostSpeed>
 80063a8:	4603      	mov	r3, r0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3708      	adds	r7, #8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b083      	sub	sp, #12
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
 80063ba:	460b      	mov	r3, r1
 80063bc:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80063be:	78fa      	ldrb	r2, [r7, #3]
 80063c0:	6879      	ldr	r1, [r7, #4]
 80063c2:	4613      	mov	r3, r2
 80063c4:	011b      	lsls	r3, r3, #4
 80063c6:	1a9b      	subs	r3, r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	440b      	add	r3, r1
 80063cc:	331a      	adds	r3, #26
 80063ce:	2200      	movs	r2, #0
 80063d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80063d2:	78fa      	ldrb	r2, [r7, #3]
 80063d4:	6879      	ldr	r1, [r7, #4]
 80063d6:	4613      	mov	r3, r2
 80063d8:	011b      	lsls	r3, r3, #4
 80063da:	1a9b      	subs	r3, r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	440b      	add	r3, r1
 80063e0:	331b      	adds	r3, #27
 80063e2:	2200      	movs	r2, #0
 80063e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80063e6:	78fa      	ldrb	r2, [r7, #3]
 80063e8:	6879      	ldr	r1, [r7, #4]
 80063ea:	4613      	mov	r3, r2
 80063ec:	011b      	lsls	r3, r3, #4
 80063ee:	1a9b      	subs	r3, r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	440b      	add	r3, r1
 80063f4:	3325      	adds	r3, #37	; 0x25
 80063f6:	2200      	movs	r2, #0
 80063f8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80063fa:	78fa      	ldrb	r2, [r7, #3]
 80063fc:	6879      	ldr	r1, [r7, #4]
 80063fe:	4613      	mov	r3, r2
 8006400:	011b      	lsls	r3, r3, #4
 8006402:	1a9b      	subs	r3, r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	440b      	add	r3, r1
 8006408:	3324      	adds	r3, #36	; 0x24
 800640a:	2200      	movs	r2, #0
 800640c:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	460b      	mov	r3, r1
 8006426:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	78fa      	ldrb	r2, [r7, #3]
 8006438:	4611      	mov	r1, r2
 800643a:	4618      	mov	r0, r3
 800643c:	f006 f90b 	bl	800c656 <USB_ReadChInterrupts>
 8006440:	4603      	mov	r3, r0
 8006442:	f003 0304 	and.w	r3, r3, #4
 8006446:	2b04      	cmp	r3, #4
 8006448:	d11a      	bne.n	8006480 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800644a:	78fb      	ldrb	r3, [r7, #3]
 800644c:	015a      	lsls	r2, r3, #5
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	4413      	add	r3, r2
 8006452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006456:	461a      	mov	r2, r3
 8006458:	2304      	movs	r3, #4
 800645a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800645c:	78fa      	ldrb	r2, [r7, #3]
 800645e:	6879      	ldr	r1, [r7, #4]
 8006460:	4613      	mov	r3, r2
 8006462:	011b      	lsls	r3, r3, #4
 8006464:	1a9b      	subs	r3, r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	440b      	add	r3, r1
 800646a:	334d      	adds	r3, #77	; 0x4d
 800646c:	2207      	movs	r2, #7
 800646e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	78fa      	ldrb	r2, [r7, #3]
 8006476:	4611      	mov	r1, r2
 8006478:	4618      	mov	r0, r3
 800647a:	f006 fd8a 	bl	800cf92 <USB_HC_Halt>
 800647e:	e09e      	b.n	80065be <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	78fa      	ldrb	r2, [r7, #3]
 8006486:	4611      	mov	r1, r2
 8006488:	4618      	mov	r0, r3
 800648a:	f006 f8e4 	bl	800c656 <USB_ReadChInterrupts>
 800648e:	4603      	mov	r3, r0
 8006490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006498:	d11b      	bne.n	80064d2 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800649a:	78fb      	ldrb	r3, [r7, #3]
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a6:	461a      	mov	r2, r3
 80064a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80064ae:	78fa      	ldrb	r2, [r7, #3]
 80064b0:	6879      	ldr	r1, [r7, #4]
 80064b2:	4613      	mov	r3, r2
 80064b4:	011b      	lsls	r3, r3, #4
 80064b6:	1a9b      	subs	r3, r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	440b      	add	r3, r1
 80064bc:	334d      	adds	r3, #77	; 0x4d
 80064be:	2208      	movs	r2, #8
 80064c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	78fa      	ldrb	r2, [r7, #3]
 80064c8:	4611      	mov	r1, r2
 80064ca:	4618      	mov	r0, r3
 80064cc:	f006 fd61 	bl	800cf92 <USB_HC_Halt>
 80064d0:	e075      	b.n	80065be <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	78fa      	ldrb	r2, [r7, #3]
 80064d8:	4611      	mov	r1, r2
 80064da:	4618      	mov	r0, r3
 80064dc:	f006 f8bb 	bl	800c656 <USB_ReadChInterrupts>
 80064e0:	4603      	mov	r3, r0
 80064e2:	f003 0308 	and.w	r3, r3, #8
 80064e6:	2b08      	cmp	r3, #8
 80064e8:	d11a      	bne.n	8006520 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80064ea:	78fb      	ldrb	r3, [r7, #3]
 80064ec:	015a      	lsls	r2, r3, #5
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f6:	461a      	mov	r2, r3
 80064f8:	2308      	movs	r3, #8
 80064fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80064fc:	78fa      	ldrb	r2, [r7, #3]
 80064fe:	6879      	ldr	r1, [r7, #4]
 8006500:	4613      	mov	r3, r2
 8006502:	011b      	lsls	r3, r3, #4
 8006504:	1a9b      	subs	r3, r3, r2
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	440b      	add	r3, r1
 800650a:	334d      	adds	r3, #77	; 0x4d
 800650c:	2206      	movs	r2, #6
 800650e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	78fa      	ldrb	r2, [r7, #3]
 8006516:	4611      	mov	r1, r2
 8006518:	4618      	mov	r0, r3
 800651a:	f006 fd3a 	bl	800cf92 <USB_HC_Halt>
 800651e:	e04e      	b.n	80065be <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	78fa      	ldrb	r2, [r7, #3]
 8006526:	4611      	mov	r1, r2
 8006528:	4618      	mov	r0, r3
 800652a:	f006 f894 	bl	800c656 <USB_ReadChInterrupts>
 800652e:	4603      	mov	r3, r0
 8006530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006538:	d11b      	bne.n	8006572 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800653a:	78fb      	ldrb	r3, [r7, #3]
 800653c:	015a      	lsls	r2, r3, #5
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	4413      	add	r3, r2
 8006542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006546:	461a      	mov	r2, r3
 8006548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800654c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800654e:	78fa      	ldrb	r2, [r7, #3]
 8006550:	6879      	ldr	r1, [r7, #4]
 8006552:	4613      	mov	r3, r2
 8006554:	011b      	lsls	r3, r3, #4
 8006556:	1a9b      	subs	r3, r3, r2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	440b      	add	r3, r1
 800655c:	334d      	adds	r3, #77	; 0x4d
 800655e:	2209      	movs	r2, #9
 8006560:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	78fa      	ldrb	r2, [r7, #3]
 8006568:	4611      	mov	r1, r2
 800656a:	4618      	mov	r0, r3
 800656c:	f006 fd11 	bl	800cf92 <USB_HC_Halt>
 8006570:	e025      	b.n	80065be <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	78fa      	ldrb	r2, [r7, #3]
 8006578:	4611      	mov	r1, r2
 800657a:	4618      	mov	r0, r3
 800657c:	f006 f86b 	bl	800c656 <USB_ReadChInterrupts>
 8006580:	4603      	mov	r3, r0
 8006582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006586:	2b80      	cmp	r3, #128	; 0x80
 8006588:	d119      	bne.n	80065be <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800658a:	78fb      	ldrb	r3, [r7, #3]
 800658c:	015a      	lsls	r2, r3, #5
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	4413      	add	r3, r2
 8006592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006596:	461a      	mov	r2, r3
 8006598:	2380      	movs	r3, #128	; 0x80
 800659a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800659c:	78fa      	ldrb	r2, [r7, #3]
 800659e:	6879      	ldr	r1, [r7, #4]
 80065a0:	4613      	mov	r3, r2
 80065a2:	011b      	lsls	r3, r3, #4
 80065a4:	1a9b      	subs	r3, r3, r2
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	440b      	add	r3, r1
 80065aa:	334d      	adds	r3, #77	; 0x4d
 80065ac:	2207      	movs	r2, #7
 80065ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	78fa      	ldrb	r2, [r7, #3]
 80065b6:	4611      	mov	r1, r2
 80065b8:	4618      	mov	r0, r3
 80065ba:	f006 fcea 	bl	800cf92 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	78fa      	ldrb	r2, [r7, #3]
 80065c4:	4611      	mov	r1, r2
 80065c6:	4618      	mov	r0, r3
 80065c8:	f006 f845 	bl	800c656 <USB_ReadChInterrupts>
 80065cc:	4603      	mov	r3, r0
 80065ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065d6:	d112      	bne.n	80065fe <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	78fa      	ldrb	r2, [r7, #3]
 80065de:	4611      	mov	r1, r2
 80065e0:	4618      	mov	r0, r3
 80065e2:	f006 fcd6 	bl	800cf92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80065e6:	78fb      	ldrb	r3, [r7, #3]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f2:	461a      	mov	r2, r3
 80065f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065f8:	6093      	str	r3, [r2, #8]
 80065fa:	f000 bd75 	b.w	80070e8 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	78fa      	ldrb	r2, [r7, #3]
 8006604:	4611      	mov	r1, r2
 8006606:	4618      	mov	r0, r3
 8006608:	f006 f825 	bl	800c656 <USB_ReadChInterrupts>
 800660c:	4603      	mov	r3, r0
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	2b01      	cmp	r3, #1
 8006614:	f040 8128 	bne.w	8006868 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8006618:	78fb      	ldrb	r3, [r7, #3]
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	4413      	add	r3, r2
 8006620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006624:	461a      	mov	r2, r3
 8006626:	2320      	movs	r3, #32
 8006628:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800662a:	78fa      	ldrb	r2, [r7, #3]
 800662c:	6879      	ldr	r1, [r7, #4]
 800662e:	4613      	mov	r3, r2
 8006630:	011b      	lsls	r3, r3, #4
 8006632:	1a9b      	subs	r3, r3, r2
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	440b      	add	r3, r1
 8006638:	331b      	adds	r3, #27
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d119      	bne.n	8006674 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8006640:	78fa      	ldrb	r2, [r7, #3]
 8006642:	6879      	ldr	r1, [r7, #4]
 8006644:	4613      	mov	r3, r2
 8006646:	011b      	lsls	r3, r3, #4
 8006648:	1a9b      	subs	r3, r3, r2
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	440b      	add	r3, r1
 800664e:	331b      	adds	r3, #27
 8006650:	2200      	movs	r2, #0
 8006652:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006654:	78fb      	ldrb	r3, [r7, #3]
 8006656:	015a      	lsls	r2, r3, #5
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	4413      	add	r3, r2
 800665c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	78fa      	ldrb	r2, [r7, #3]
 8006664:	0151      	lsls	r1, r2, #5
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	440a      	add	r2, r1
 800666a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800666e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006672:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	799b      	ldrb	r3, [r3, #6]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d01b      	beq.n	80066b4 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800667c:	78fa      	ldrb	r2, [r7, #3]
 800667e:	6879      	ldr	r1, [r7, #4]
 8006680:	4613      	mov	r3, r2
 8006682:	011b      	lsls	r3, r3, #4
 8006684:	1a9b      	subs	r3, r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	440b      	add	r3, r1
 800668a:	3330      	adds	r3, #48	; 0x30
 800668c:	6819      	ldr	r1, [r3, #0]
 800668e:	78fb      	ldrb	r3, [r7, #3]
 8006690:	015a      	lsls	r2, r3, #5
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	4413      	add	r3, r2
 8006696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066a0:	78fa      	ldrb	r2, [r7, #3]
 80066a2:	1ac9      	subs	r1, r1, r3
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	4613      	mov	r3, r2
 80066a8:	011b      	lsls	r3, r3, #4
 80066aa:	1a9b      	subs	r3, r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4403      	add	r3, r0
 80066b0:	3338      	adds	r3, #56	; 0x38
 80066b2:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80066b4:	78fa      	ldrb	r2, [r7, #3]
 80066b6:	6879      	ldr	r1, [r7, #4]
 80066b8:	4613      	mov	r3, r2
 80066ba:	011b      	lsls	r3, r3, #4
 80066bc:	1a9b      	subs	r3, r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	440b      	add	r3, r1
 80066c2:	334d      	adds	r3, #77	; 0x4d
 80066c4:	2201      	movs	r2, #1
 80066c6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80066c8:	78fa      	ldrb	r2, [r7, #3]
 80066ca:	6879      	ldr	r1, [r7, #4]
 80066cc:	4613      	mov	r3, r2
 80066ce:	011b      	lsls	r3, r3, #4
 80066d0:	1a9b      	subs	r3, r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	440b      	add	r3, r1
 80066d6:	3344      	adds	r3, #68	; 0x44
 80066d8:	2200      	movs	r2, #0
 80066da:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80066dc:	78fb      	ldrb	r3, [r7, #3]
 80066de:	015a      	lsls	r2, r3, #5
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	4413      	add	r3, r2
 80066e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e8:	461a      	mov	r2, r3
 80066ea:	2301      	movs	r3, #1
 80066ec:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80066ee:	78fa      	ldrb	r2, [r7, #3]
 80066f0:	6879      	ldr	r1, [r7, #4]
 80066f2:	4613      	mov	r3, r2
 80066f4:	011b      	lsls	r3, r3, #4
 80066f6:	1a9b      	subs	r3, r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	440b      	add	r3, r1
 80066fc:	3326      	adds	r3, #38	; 0x26
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00a      	beq.n	800671a <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006704:	78fa      	ldrb	r2, [r7, #3]
 8006706:	6879      	ldr	r1, [r7, #4]
 8006708:	4613      	mov	r3, r2
 800670a:	011b      	lsls	r3, r3, #4
 800670c:	1a9b      	subs	r3, r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	440b      	add	r3, r1
 8006712:	3326      	adds	r3, #38	; 0x26
 8006714:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006716:	2b02      	cmp	r3, #2
 8006718:	d110      	bne.n	800673c <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	78fa      	ldrb	r2, [r7, #3]
 8006720:	4611      	mov	r1, r2
 8006722:	4618      	mov	r0, r3
 8006724:	f006 fc35 	bl	800cf92 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006728:	78fb      	ldrb	r3, [r7, #3]
 800672a:	015a      	lsls	r2, r3, #5
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	4413      	add	r3, r2
 8006730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006734:	461a      	mov	r2, r3
 8006736:	2310      	movs	r3, #16
 8006738:	6093      	str	r3, [r2, #8]
 800673a:	e03d      	b.n	80067b8 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800673c:	78fa      	ldrb	r2, [r7, #3]
 800673e:	6879      	ldr	r1, [r7, #4]
 8006740:	4613      	mov	r3, r2
 8006742:	011b      	lsls	r3, r3, #4
 8006744:	1a9b      	subs	r3, r3, r2
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	440b      	add	r3, r1
 800674a:	3326      	adds	r3, #38	; 0x26
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	2b03      	cmp	r3, #3
 8006750:	d00a      	beq.n	8006768 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8006752:	78fa      	ldrb	r2, [r7, #3]
 8006754:	6879      	ldr	r1, [r7, #4]
 8006756:	4613      	mov	r3, r2
 8006758:	011b      	lsls	r3, r3, #4
 800675a:	1a9b      	subs	r3, r3, r2
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	440b      	add	r3, r1
 8006760:	3326      	adds	r3, #38	; 0x26
 8006762:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8006764:	2b01      	cmp	r3, #1
 8006766:	d127      	bne.n	80067b8 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006768:	78fb      	ldrb	r3, [r7, #3]
 800676a:	015a      	lsls	r2, r3, #5
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	4413      	add	r3, r2
 8006770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	78fa      	ldrb	r2, [r7, #3]
 8006778:	0151      	lsls	r1, r2, #5
 800677a:	693a      	ldr	r2, [r7, #16]
 800677c:	440a      	add	r2, r1
 800677e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006782:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006786:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006788:	78fa      	ldrb	r2, [r7, #3]
 800678a:	6879      	ldr	r1, [r7, #4]
 800678c:	4613      	mov	r3, r2
 800678e:	011b      	lsls	r3, r3, #4
 8006790:	1a9b      	subs	r3, r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	440b      	add	r3, r1
 8006796:	334c      	adds	r3, #76	; 0x4c
 8006798:	2201      	movs	r2, #1
 800679a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800679c:	78fa      	ldrb	r2, [r7, #3]
 800679e:	6879      	ldr	r1, [r7, #4]
 80067a0:	4613      	mov	r3, r2
 80067a2:	011b      	lsls	r3, r3, #4
 80067a4:	1a9b      	subs	r3, r3, r2
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	440b      	add	r3, r1
 80067aa:	334c      	adds	r3, #76	; 0x4c
 80067ac:	781a      	ldrb	r2, [r3, #0]
 80067ae:	78fb      	ldrb	r3, [r7, #3]
 80067b0:	4619      	mov	r1, r3
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f008 f9ba 	bl	800eb2c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	799b      	ldrb	r3, [r3, #6]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d13b      	bne.n	8006838 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80067c0:	78fa      	ldrb	r2, [r7, #3]
 80067c2:	6879      	ldr	r1, [r7, #4]
 80067c4:	4613      	mov	r3, r2
 80067c6:	011b      	lsls	r3, r3, #4
 80067c8:	1a9b      	subs	r3, r3, r2
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	440b      	add	r3, r1
 80067ce:	3338      	adds	r3, #56	; 0x38
 80067d0:	6819      	ldr	r1, [r3, #0]
 80067d2:	78fa      	ldrb	r2, [r7, #3]
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	4613      	mov	r3, r2
 80067d8:	011b      	lsls	r3, r3, #4
 80067da:	1a9b      	subs	r3, r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4403      	add	r3, r0
 80067e0:	3328      	adds	r3, #40	; 0x28
 80067e2:	881b      	ldrh	r3, [r3, #0]
 80067e4:	440b      	add	r3, r1
 80067e6:	1e59      	subs	r1, r3, #1
 80067e8:	78fa      	ldrb	r2, [r7, #3]
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	4613      	mov	r3, r2
 80067ee:	011b      	lsls	r3, r3, #4
 80067f0:	1a9b      	subs	r3, r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4403      	add	r3, r0
 80067f6:	3328      	adds	r3, #40	; 0x28
 80067f8:	881b      	ldrh	r3, [r3, #0]
 80067fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	f000 8470 	beq.w	80070e8 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8006808:	78fa      	ldrb	r2, [r7, #3]
 800680a:	6879      	ldr	r1, [r7, #4]
 800680c:	4613      	mov	r3, r2
 800680e:	011b      	lsls	r3, r3, #4
 8006810:	1a9b      	subs	r3, r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	440b      	add	r3, r1
 8006816:	333c      	adds	r3, #60	; 0x3c
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	78fa      	ldrb	r2, [r7, #3]
 800681c:	f083 0301 	eor.w	r3, r3, #1
 8006820:	b2d8      	uxtb	r0, r3
 8006822:	6879      	ldr	r1, [r7, #4]
 8006824:	4613      	mov	r3, r2
 8006826:	011b      	lsls	r3, r3, #4
 8006828:	1a9b      	subs	r3, r3, r2
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	440b      	add	r3, r1
 800682e:	333c      	adds	r3, #60	; 0x3c
 8006830:	4602      	mov	r2, r0
 8006832:	701a      	strb	r2, [r3, #0]
 8006834:	f000 bc58 	b.w	80070e8 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8006838:	78fa      	ldrb	r2, [r7, #3]
 800683a:	6879      	ldr	r1, [r7, #4]
 800683c:	4613      	mov	r3, r2
 800683e:	011b      	lsls	r3, r3, #4
 8006840:	1a9b      	subs	r3, r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	440b      	add	r3, r1
 8006846:	333c      	adds	r3, #60	; 0x3c
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	78fa      	ldrb	r2, [r7, #3]
 800684c:	f083 0301 	eor.w	r3, r3, #1
 8006850:	b2d8      	uxtb	r0, r3
 8006852:	6879      	ldr	r1, [r7, #4]
 8006854:	4613      	mov	r3, r2
 8006856:	011b      	lsls	r3, r3, #4
 8006858:	1a9b      	subs	r3, r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	440b      	add	r3, r1
 800685e:	333c      	adds	r3, #60	; 0x3c
 8006860:	4602      	mov	r2, r0
 8006862:	701a      	strb	r2, [r3, #0]
 8006864:	f000 bc40 	b.w	80070e8 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	78fa      	ldrb	r2, [r7, #3]
 800686e:	4611      	mov	r1, r2
 8006870:	4618      	mov	r0, r3
 8006872:	f005 fef0 	bl	800c656 <USB_ReadChInterrupts>
 8006876:	4603      	mov	r3, r0
 8006878:	f003 0320 	and.w	r3, r3, #32
 800687c:	2b20      	cmp	r3, #32
 800687e:	d131      	bne.n	80068e4 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8006880:	78fb      	ldrb	r3, [r7, #3]
 8006882:	015a      	lsls	r2, r3, #5
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	4413      	add	r3, r2
 8006888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800688c:	461a      	mov	r2, r3
 800688e:	2320      	movs	r3, #32
 8006890:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8006892:	78fa      	ldrb	r2, [r7, #3]
 8006894:	6879      	ldr	r1, [r7, #4]
 8006896:	4613      	mov	r3, r2
 8006898:	011b      	lsls	r3, r3, #4
 800689a:	1a9b      	subs	r3, r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	440b      	add	r3, r1
 80068a0:	331a      	adds	r3, #26
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	f040 841f 	bne.w	80070e8 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80068aa:	78fa      	ldrb	r2, [r7, #3]
 80068ac:	6879      	ldr	r1, [r7, #4]
 80068ae:	4613      	mov	r3, r2
 80068b0:	011b      	lsls	r3, r3, #4
 80068b2:	1a9b      	subs	r3, r3, r2
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	440b      	add	r3, r1
 80068b8:	331b      	adds	r3, #27
 80068ba:	2201      	movs	r2, #1
 80068bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80068be:	78fa      	ldrb	r2, [r7, #3]
 80068c0:	6879      	ldr	r1, [r7, #4]
 80068c2:	4613      	mov	r3, r2
 80068c4:	011b      	lsls	r3, r3, #4
 80068c6:	1a9b      	subs	r3, r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	440b      	add	r3, r1
 80068cc:	334d      	adds	r3, #77	; 0x4d
 80068ce:	2203      	movs	r2, #3
 80068d0:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	78fa      	ldrb	r2, [r7, #3]
 80068d8:	4611      	mov	r1, r2
 80068da:	4618      	mov	r0, r3
 80068dc:	f006 fb59 	bl	800cf92 <USB_HC_Halt>
 80068e0:	f000 bc02 	b.w	80070e8 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	78fa      	ldrb	r2, [r7, #3]
 80068ea:	4611      	mov	r1, r2
 80068ec:	4618      	mov	r0, r3
 80068ee:	f005 feb2 	bl	800c656 <USB_ReadChInterrupts>
 80068f2:	4603      	mov	r3, r0
 80068f4:	f003 0302 	and.w	r3, r3, #2
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	f040 8305 	bne.w	8006f08 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80068fe:	78fb      	ldrb	r3, [r7, #3]
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	4413      	add	r3, r2
 8006906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800690a:	461a      	mov	r2, r3
 800690c:	2302      	movs	r3, #2
 800690e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8006910:	78fa      	ldrb	r2, [r7, #3]
 8006912:	6879      	ldr	r1, [r7, #4]
 8006914:	4613      	mov	r3, r2
 8006916:	011b      	lsls	r3, r3, #4
 8006918:	1a9b      	subs	r3, r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	440b      	add	r3, r1
 800691e:	334d      	adds	r3, #77	; 0x4d
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d114      	bne.n	8006950 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006926:	78fa      	ldrb	r2, [r7, #3]
 8006928:	6879      	ldr	r1, [r7, #4]
 800692a:	4613      	mov	r3, r2
 800692c:	011b      	lsls	r3, r3, #4
 800692e:	1a9b      	subs	r3, r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	440b      	add	r3, r1
 8006934:	334d      	adds	r3, #77	; 0x4d
 8006936:	2202      	movs	r2, #2
 8006938:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800693a:	78fa      	ldrb	r2, [r7, #3]
 800693c:	6879      	ldr	r1, [r7, #4]
 800693e:	4613      	mov	r3, r2
 8006940:	011b      	lsls	r3, r3, #4
 8006942:	1a9b      	subs	r3, r3, r2
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	440b      	add	r3, r1
 8006948:	334c      	adds	r3, #76	; 0x4c
 800694a:	2201      	movs	r2, #1
 800694c:	701a      	strb	r2, [r3, #0]
 800694e:	e2cc      	b.n	8006eea <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8006950:	78fa      	ldrb	r2, [r7, #3]
 8006952:	6879      	ldr	r1, [r7, #4]
 8006954:	4613      	mov	r3, r2
 8006956:	011b      	lsls	r3, r3, #4
 8006958:	1a9b      	subs	r3, r3, r2
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	440b      	add	r3, r1
 800695e:	334d      	adds	r3, #77	; 0x4d
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	2b06      	cmp	r3, #6
 8006964:	d114      	bne.n	8006990 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006966:	78fa      	ldrb	r2, [r7, #3]
 8006968:	6879      	ldr	r1, [r7, #4]
 800696a:	4613      	mov	r3, r2
 800696c:	011b      	lsls	r3, r3, #4
 800696e:	1a9b      	subs	r3, r3, r2
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	440b      	add	r3, r1
 8006974:	334d      	adds	r3, #77	; 0x4d
 8006976:	2202      	movs	r2, #2
 8006978:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800697a:	78fa      	ldrb	r2, [r7, #3]
 800697c:	6879      	ldr	r1, [r7, #4]
 800697e:	4613      	mov	r3, r2
 8006980:	011b      	lsls	r3, r3, #4
 8006982:	1a9b      	subs	r3, r3, r2
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	440b      	add	r3, r1
 8006988:	334c      	adds	r3, #76	; 0x4c
 800698a:	2205      	movs	r2, #5
 800698c:	701a      	strb	r2, [r3, #0]
 800698e:	e2ac      	b.n	8006eea <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006990:	78fa      	ldrb	r2, [r7, #3]
 8006992:	6879      	ldr	r1, [r7, #4]
 8006994:	4613      	mov	r3, r2
 8006996:	011b      	lsls	r3, r3, #4
 8006998:	1a9b      	subs	r3, r3, r2
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	440b      	add	r3, r1
 800699e:	334d      	adds	r3, #77	; 0x4d
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	2b07      	cmp	r3, #7
 80069a4:	d00b      	beq.n	80069be <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80069a6:	78fa      	ldrb	r2, [r7, #3]
 80069a8:	6879      	ldr	r1, [r7, #4]
 80069aa:	4613      	mov	r3, r2
 80069ac:	011b      	lsls	r3, r3, #4
 80069ae:	1a9b      	subs	r3, r3, r2
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	440b      	add	r3, r1
 80069b4:	334d      	adds	r3, #77	; 0x4d
 80069b6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80069b8:	2b09      	cmp	r3, #9
 80069ba:	f040 80a6 	bne.w	8006b0a <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80069be:	78fa      	ldrb	r2, [r7, #3]
 80069c0:	6879      	ldr	r1, [r7, #4]
 80069c2:	4613      	mov	r3, r2
 80069c4:	011b      	lsls	r3, r3, #4
 80069c6:	1a9b      	subs	r3, r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	440b      	add	r3, r1
 80069cc:	334d      	adds	r3, #77	; 0x4d
 80069ce:	2202      	movs	r2, #2
 80069d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80069d2:	78fa      	ldrb	r2, [r7, #3]
 80069d4:	6879      	ldr	r1, [r7, #4]
 80069d6:	4613      	mov	r3, r2
 80069d8:	011b      	lsls	r3, r3, #4
 80069da:	1a9b      	subs	r3, r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	440b      	add	r3, r1
 80069e0:	3344      	adds	r3, #68	; 0x44
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	1c59      	adds	r1, r3, #1
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	4613      	mov	r3, r2
 80069ea:	011b      	lsls	r3, r3, #4
 80069ec:	1a9b      	subs	r3, r3, r2
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4403      	add	r3, r0
 80069f2:	3344      	adds	r3, #68	; 0x44
 80069f4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80069f6:	78fa      	ldrb	r2, [r7, #3]
 80069f8:	6879      	ldr	r1, [r7, #4]
 80069fa:	4613      	mov	r3, r2
 80069fc:	011b      	lsls	r3, r3, #4
 80069fe:	1a9b      	subs	r3, r3, r2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	440b      	add	r3, r1
 8006a04:	3344      	adds	r3, #68	; 0x44
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d943      	bls.n	8006a94 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006a0c:	78fa      	ldrb	r2, [r7, #3]
 8006a0e:	6879      	ldr	r1, [r7, #4]
 8006a10:	4613      	mov	r3, r2
 8006a12:	011b      	lsls	r3, r3, #4
 8006a14:	1a9b      	subs	r3, r3, r2
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	440b      	add	r3, r1
 8006a1a:	3344      	adds	r3, #68	; 0x44
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8006a20:	78fa      	ldrb	r2, [r7, #3]
 8006a22:	6879      	ldr	r1, [r7, #4]
 8006a24:	4613      	mov	r3, r2
 8006a26:	011b      	lsls	r3, r3, #4
 8006a28:	1a9b      	subs	r3, r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	440b      	add	r3, r1
 8006a2e:	331a      	adds	r3, #26
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d123      	bne.n	8006a7e <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8006a36:	78fa      	ldrb	r2, [r7, #3]
 8006a38:	6879      	ldr	r1, [r7, #4]
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	011b      	lsls	r3, r3, #4
 8006a3e:	1a9b      	subs	r3, r3, r2
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	440b      	add	r3, r1
 8006a44:	331b      	adds	r3, #27
 8006a46:	2200      	movs	r2, #0
 8006a48:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8006a4a:	78fa      	ldrb	r2, [r7, #3]
 8006a4c:	6879      	ldr	r1, [r7, #4]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	011b      	lsls	r3, r3, #4
 8006a52:	1a9b      	subs	r3, r3, r2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	440b      	add	r3, r1
 8006a58:	331c      	adds	r3, #28
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006a5e:	78fb      	ldrb	r3, [r7, #3]
 8006a60:	015a      	lsls	r2, r3, #5
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	4413      	add	r3, r2
 8006a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	78fa      	ldrb	r2, [r7, #3]
 8006a6e:	0151      	lsls	r1, r2, #5
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	440a      	add	r2, r1
 8006a74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a7c:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006a7e:	78fa      	ldrb	r2, [r7, #3]
 8006a80:	6879      	ldr	r1, [r7, #4]
 8006a82:	4613      	mov	r3, r2
 8006a84:	011b      	lsls	r3, r3, #4
 8006a86:	1a9b      	subs	r3, r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	440b      	add	r3, r1
 8006a8c:	334c      	adds	r3, #76	; 0x4c
 8006a8e:	2204      	movs	r2, #4
 8006a90:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006a92:	e229      	b.n	8006ee8 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006a94:	78fa      	ldrb	r2, [r7, #3]
 8006a96:	6879      	ldr	r1, [r7, #4]
 8006a98:	4613      	mov	r3, r2
 8006a9a:	011b      	lsls	r3, r3, #4
 8006a9c:	1a9b      	subs	r3, r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	440b      	add	r3, r1
 8006aa2:	334c      	adds	r3, #76	; 0x4c
 8006aa4:	2202      	movs	r2, #2
 8006aa6:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006aa8:	78fa      	ldrb	r2, [r7, #3]
 8006aaa:	6879      	ldr	r1, [r7, #4]
 8006aac:	4613      	mov	r3, r2
 8006aae:	011b      	lsls	r3, r3, #4
 8006ab0:	1a9b      	subs	r3, r3, r2
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	440b      	add	r3, r1
 8006ab6:	3326      	adds	r3, #38	; 0x26
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00b      	beq.n	8006ad6 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006abe:	78fa      	ldrb	r2, [r7, #3]
 8006ac0:	6879      	ldr	r1, [r7, #4]
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	011b      	lsls	r3, r3, #4
 8006ac6:	1a9b      	subs	r3, r3, r2
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	440b      	add	r3, r1
 8006acc:	3326      	adds	r3, #38	; 0x26
 8006ace:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	f040 8209 	bne.w	8006ee8 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8006ad6:	78fb      	ldrb	r3, [r7, #3]
 8006ad8:	015a      	lsls	r2, r3, #5
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	4413      	add	r3, r2
 8006ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006aec:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006af4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8006af6:	78fb      	ldrb	r3, [r7, #3]
 8006af8:	015a      	lsls	r2, r3, #5
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	4413      	add	r3, r2
 8006afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b02:	461a      	mov	r2, r3
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006b08:	e1ee      	b.n	8006ee8 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006b0a:	78fa      	ldrb	r2, [r7, #3]
 8006b0c:	6879      	ldr	r1, [r7, #4]
 8006b0e:	4613      	mov	r3, r2
 8006b10:	011b      	lsls	r3, r3, #4
 8006b12:	1a9b      	subs	r3, r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	440b      	add	r3, r1
 8006b18:	334d      	adds	r3, #77	; 0x4d
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	2b05      	cmp	r3, #5
 8006b1e:	f040 80c8 	bne.w	8006cb2 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006b22:	78fa      	ldrb	r2, [r7, #3]
 8006b24:	6879      	ldr	r1, [r7, #4]
 8006b26:	4613      	mov	r3, r2
 8006b28:	011b      	lsls	r3, r3, #4
 8006b2a:	1a9b      	subs	r3, r3, r2
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	440b      	add	r3, r1
 8006b30:	334d      	adds	r3, #77	; 0x4d
 8006b32:	2202      	movs	r2, #2
 8006b34:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006b36:	78fa      	ldrb	r2, [r7, #3]
 8006b38:	6879      	ldr	r1, [r7, #4]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	011b      	lsls	r3, r3, #4
 8006b3e:	1a9b      	subs	r3, r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	440b      	add	r3, r1
 8006b44:	331b      	adds	r3, #27
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	f040 81ce 	bne.w	8006eea <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8006b4e:	78fa      	ldrb	r2, [r7, #3]
 8006b50:	6879      	ldr	r1, [r7, #4]
 8006b52:	4613      	mov	r3, r2
 8006b54:	011b      	lsls	r3, r3, #4
 8006b56:	1a9b      	subs	r3, r3, r2
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	440b      	add	r3, r1
 8006b5c:	3326      	adds	r3, #38	; 0x26
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	2b03      	cmp	r3, #3
 8006b62:	d16b      	bne.n	8006c3c <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8006b64:	78fa      	ldrb	r2, [r7, #3]
 8006b66:	6879      	ldr	r1, [r7, #4]
 8006b68:	4613      	mov	r3, r2
 8006b6a:	011b      	lsls	r3, r3, #4
 8006b6c:	1a9b      	subs	r3, r3, r2
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	440b      	add	r3, r1
 8006b72:	3348      	adds	r3, #72	; 0x48
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	1c59      	adds	r1, r3, #1
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	011b      	lsls	r3, r3, #4
 8006b7e:	1a9b      	subs	r3, r3, r2
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	4403      	add	r3, r0
 8006b84:	3348      	adds	r3, #72	; 0x48
 8006b86:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8006b88:	78fa      	ldrb	r2, [r7, #3]
 8006b8a:	6879      	ldr	r1, [r7, #4]
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	011b      	lsls	r3, r3, #4
 8006b90:	1a9b      	subs	r3, r3, r2
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	440b      	add	r3, r1
 8006b96:	3348      	adds	r3, #72	; 0x48
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d943      	bls.n	8006c26 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8006b9e:	78fa      	ldrb	r2, [r7, #3]
 8006ba0:	6879      	ldr	r1, [r7, #4]
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	011b      	lsls	r3, r3, #4
 8006ba6:	1a9b      	subs	r3, r3, r2
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	440b      	add	r3, r1
 8006bac:	3348      	adds	r3, #72	; 0x48
 8006bae:	2200      	movs	r2, #0
 8006bb0:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8006bb2:	78fa      	ldrb	r2, [r7, #3]
 8006bb4:	6879      	ldr	r1, [r7, #4]
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	011b      	lsls	r3, r3, #4
 8006bba:	1a9b      	subs	r3, r3, r2
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	440b      	add	r3, r1
 8006bc0:	331b      	adds	r3, #27
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8006bc6:	78fa      	ldrb	r2, [r7, #3]
 8006bc8:	6879      	ldr	r1, [r7, #4]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	011b      	lsls	r3, r3, #4
 8006bce:	1a9b      	subs	r3, r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	440b      	add	r3, r1
 8006bd4:	3344      	adds	r3, #68	; 0x44
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d809      	bhi.n	8006bf0 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8006bdc:	78fa      	ldrb	r2, [r7, #3]
 8006bde:	6879      	ldr	r1, [r7, #4]
 8006be0:	4613      	mov	r3, r2
 8006be2:	011b      	lsls	r3, r3, #4
 8006be4:	1a9b      	subs	r3, r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	440b      	add	r3, r1
 8006bea:	331c      	adds	r3, #28
 8006bec:	2201      	movs	r2, #1
 8006bee:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006bf0:	78fb      	ldrb	r3, [r7, #3]
 8006bf2:	015a      	lsls	r2, r3, #5
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	78fa      	ldrb	r2, [r7, #3]
 8006c00:	0151      	lsls	r1, r2, #5
 8006c02:	693a      	ldr	r2, [r7, #16]
 8006c04:	440a      	add	r2, r1
 8006c06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c0e:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8006c10:	78fa      	ldrb	r2, [r7, #3]
 8006c12:	6879      	ldr	r1, [r7, #4]
 8006c14:	4613      	mov	r3, r2
 8006c16:	011b      	lsls	r3, r3, #4
 8006c18:	1a9b      	subs	r3, r3, r2
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	440b      	add	r3, r1
 8006c1e:	334c      	adds	r3, #76	; 0x4c
 8006c20:	2204      	movs	r2, #4
 8006c22:	701a      	strb	r2, [r3, #0]
 8006c24:	e014      	b.n	8006c50 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006c26:	78fa      	ldrb	r2, [r7, #3]
 8006c28:	6879      	ldr	r1, [r7, #4]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	011b      	lsls	r3, r3, #4
 8006c2e:	1a9b      	subs	r3, r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	440b      	add	r3, r1
 8006c34:	334c      	adds	r3, #76	; 0x4c
 8006c36:	2202      	movs	r2, #2
 8006c38:	701a      	strb	r2, [r3, #0]
 8006c3a:	e009      	b.n	8006c50 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006c3c:	78fa      	ldrb	r2, [r7, #3]
 8006c3e:	6879      	ldr	r1, [r7, #4]
 8006c40:	4613      	mov	r3, r2
 8006c42:	011b      	lsls	r3, r3, #4
 8006c44:	1a9b      	subs	r3, r3, r2
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	440b      	add	r3, r1
 8006c4a:	334c      	adds	r3, #76	; 0x4c
 8006c4c:	2202      	movs	r2, #2
 8006c4e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006c50:	78fa      	ldrb	r2, [r7, #3]
 8006c52:	6879      	ldr	r1, [r7, #4]
 8006c54:	4613      	mov	r3, r2
 8006c56:	011b      	lsls	r3, r3, #4
 8006c58:	1a9b      	subs	r3, r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	440b      	add	r3, r1
 8006c5e:	3326      	adds	r3, #38	; 0x26
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00b      	beq.n	8006c7e <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006c66:	78fa      	ldrb	r2, [r7, #3]
 8006c68:	6879      	ldr	r1, [r7, #4]
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	011b      	lsls	r3, r3, #4
 8006c6e:	1a9b      	subs	r3, r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	440b      	add	r3, r1
 8006c74:	3326      	adds	r3, #38	; 0x26
 8006c76:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	f040 8136 	bne.w	8006eea <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8006c7e:	78fb      	ldrb	r3, [r7, #3]
 8006c80:	015a      	lsls	r2, r3, #5
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	4413      	add	r3, r2
 8006c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c94:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c9c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8006c9e:	78fb      	ldrb	r3, [r7, #3]
 8006ca0:	015a      	lsls	r2, r3, #5
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006caa:	461a      	mov	r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6013      	str	r3, [r2, #0]
 8006cb0:	e11b      	b.n	8006eea <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8006cb2:	78fa      	ldrb	r2, [r7, #3]
 8006cb4:	6879      	ldr	r1, [r7, #4]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	011b      	lsls	r3, r3, #4
 8006cba:	1a9b      	subs	r3, r3, r2
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	440b      	add	r3, r1
 8006cc0:	334d      	adds	r3, #77	; 0x4d
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	2b03      	cmp	r3, #3
 8006cc6:	f040 8081 	bne.w	8006dcc <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006cca:	78fa      	ldrb	r2, [r7, #3]
 8006ccc:	6879      	ldr	r1, [r7, #4]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	011b      	lsls	r3, r3, #4
 8006cd2:	1a9b      	subs	r3, r3, r2
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	440b      	add	r3, r1
 8006cd8:	334d      	adds	r3, #77	; 0x4d
 8006cda:	2202      	movs	r2, #2
 8006cdc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006cde:	78fa      	ldrb	r2, [r7, #3]
 8006ce0:	6879      	ldr	r1, [r7, #4]
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	011b      	lsls	r3, r3, #4
 8006ce6:	1a9b      	subs	r3, r3, r2
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	440b      	add	r3, r1
 8006cec:	331b      	adds	r3, #27
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	f040 80fa 	bne.w	8006eea <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006cf6:	78fa      	ldrb	r2, [r7, #3]
 8006cf8:	6879      	ldr	r1, [r7, #4]
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	011b      	lsls	r3, r3, #4
 8006cfe:	1a9b      	subs	r3, r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	440b      	add	r3, r1
 8006d04:	334c      	adds	r3, #76	; 0x4c
 8006d06:	2202      	movs	r2, #2
 8006d08:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006d0a:	78fb      	ldrb	r3, [r7, #3]
 8006d0c:	015a      	lsls	r2, r3, #5
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	4413      	add	r3, r2
 8006d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	78fa      	ldrb	r2, [r7, #3]
 8006d1a:	0151      	lsls	r1, r2, #5
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	440a      	add	r2, r1
 8006d20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d28:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006d2a:	78fb      	ldrb	r3, [r7, #3]
 8006d2c:	015a      	lsls	r2, r3, #5
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	4413      	add	r3, r2
 8006d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	78fa      	ldrb	r2, [r7, #3]
 8006d3a:	0151      	lsls	r1, r2, #5
 8006d3c:	693a      	ldr	r2, [r7, #16]
 8006d3e:	440a      	add	r2, r1
 8006d40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d48:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8006d4a:	78fb      	ldrb	r3, [r7, #3]
 8006d4c:	015a      	lsls	r2, r3, #5
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	4413      	add	r3, r2
 8006d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	78fa      	ldrb	r2, [r7, #3]
 8006d5a:	0151      	lsls	r1, r2, #5
 8006d5c:	693a      	ldr	r2, [r7, #16]
 8006d5e:	440a      	add	r2, r1
 8006d60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d64:	f023 0320 	bic.w	r3, r3, #32
 8006d68:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006d6a:	78fa      	ldrb	r2, [r7, #3]
 8006d6c:	6879      	ldr	r1, [r7, #4]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	011b      	lsls	r3, r3, #4
 8006d72:	1a9b      	subs	r3, r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	440b      	add	r3, r1
 8006d78:	3326      	adds	r3, #38	; 0x26
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00b      	beq.n	8006d98 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006d80:	78fa      	ldrb	r2, [r7, #3]
 8006d82:	6879      	ldr	r1, [r7, #4]
 8006d84:	4613      	mov	r3, r2
 8006d86:	011b      	lsls	r3, r3, #4
 8006d88:	1a9b      	subs	r3, r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	440b      	add	r3, r1
 8006d8e:	3326      	adds	r3, #38	; 0x26
 8006d90:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	f040 80a9 	bne.w	8006eea <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8006d98:	78fb      	ldrb	r3, [r7, #3]
 8006d9a:	015a      	lsls	r2, r3, #5
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	4413      	add	r3, r2
 8006da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006dae:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006db6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8006db8:	78fb      	ldrb	r3, [r7, #3]
 8006dba:	015a      	lsls	r2, r3, #5
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6013      	str	r3, [r2, #0]
 8006dca:	e08e      	b.n	8006eea <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8006dcc:	78fa      	ldrb	r2, [r7, #3]
 8006dce:	6879      	ldr	r1, [r7, #4]
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	011b      	lsls	r3, r3, #4
 8006dd4:	1a9b      	subs	r3, r3, r2
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	440b      	add	r3, r1
 8006dda:	334d      	adds	r3, #77	; 0x4d
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	2b04      	cmp	r3, #4
 8006de0:	d143      	bne.n	8006e6a <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006de2:	78fa      	ldrb	r2, [r7, #3]
 8006de4:	6879      	ldr	r1, [r7, #4]
 8006de6:	4613      	mov	r3, r2
 8006de8:	011b      	lsls	r3, r3, #4
 8006dea:	1a9b      	subs	r3, r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	440b      	add	r3, r1
 8006df0:	334d      	adds	r3, #77	; 0x4d
 8006df2:	2202      	movs	r2, #2
 8006df4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006df6:	78fa      	ldrb	r2, [r7, #3]
 8006df8:	6879      	ldr	r1, [r7, #4]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	011b      	lsls	r3, r3, #4
 8006dfe:	1a9b      	subs	r3, r3, r2
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	440b      	add	r3, r1
 8006e04:	334c      	adds	r3, #76	; 0x4c
 8006e06:	2202      	movs	r2, #2
 8006e08:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006e0a:	78fa      	ldrb	r2, [r7, #3]
 8006e0c:	6879      	ldr	r1, [r7, #4]
 8006e0e:	4613      	mov	r3, r2
 8006e10:	011b      	lsls	r3, r3, #4
 8006e12:	1a9b      	subs	r3, r3, r2
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	440b      	add	r3, r1
 8006e18:	3326      	adds	r3, #38	; 0x26
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d00a      	beq.n	8006e36 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006e20:	78fa      	ldrb	r2, [r7, #3]
 8006e22:	6879      	ldr	r1, [r7, #4]
 8006e24:	4613      	mov	r3, r2
 8006e26:	011b      	lsls	r3, r3, #4
 8006e28:	1a9b      	subs	r3, r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	440b      	add	r3, r1
 8006e2e:	3326      	adds	r3, #38	; 0x26
 8006e30:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d159      	bne.n	8006eea <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006e36:	78fb      	ldrb	r3, [r7, #3]
 8006e38:	015a      	lsls	r2, r3, #5
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e4c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e54:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006e56:	78fb      	ldrb	r3, [r7, #3]
 8006e58:	015a      	lsls	r2, r3, #5
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e62:	461a      	mov	r2, r3
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6013      	str	r3, [r2, #0]
 8006e68:	e03f      	b.n	8006eea <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8006e6a:	78fa      	ldrb	r2, [r7, #3]
 8006e6c:	6879      	ldr	r1, [r7, #4]
 8006e6e:	4613      	mov	r3, r2
 8006e70:	011b      	lsls	r3, r3, #4
 8006e72:	1a9b      	subs	r3, r3, r2
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	440b      	add	r3, r1
 8006e78:	334d      	adds	r3, #77	; 0x4d
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	2b08      	cmp	r3, #8
 8006e7e:	d126      	bne.n	8006ece <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006e80:	78fa      	ldrb	r2, [r7, #3]
 8006e82:	6879      	ldr	r1, [r7, #4]
 8006e84:	4613      	mov	r3, r2
 8006e86:	011b      	lsls	r3, r3, #4
 8006e88:	1a9b      	subs	r3, r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	440b      	add	r3, r1
 8006e8e:	334d      	adds	r3, #77	; 0x4d
 8006e90:	2202      	movs	r2, #2
 8006e92:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006e94:	78fa      	ldrb	r2, [r7, #3]
 8006e96:	6879      	ldr	r1, [r7, #4]
 8006e98:	4613      	mov	r3, r2
 8006e9a:	011b      	lsls	r3, r3, #4
 8006e9c:	1a9b      	subs	r3, r3, r2
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	440b      	add	r3, r1
 8006ea2:	3344      	adds	r3, #68	; 0x44
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	1c59      	adds	r1, r3, #1
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	011b      	lsls	r3, r3, #4
 8006eae:	1a9b      	subs	r3, r3, r2
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4403      	add	r3, r0
 8006eb4:	3344      	adds	r3, #68	; 0x44
 8006eb6:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8006eb8:	78fa      	ldrb	r2, [r7, #3]
 8006eba:	6879      	ldr	r1, [r7, #4]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	011b      	lsls	r3, r3, #4
 8006ec0:	1a9b      	subs	r3, r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	440b      	add	r3, r1
 8006ec6:	334c      	adds	r3, #76	; 0x4c
 8006ec8:	2204      	movs	r2, #4
 8006eca:	701a      	strb	r2, [r3, #0]
 8006ecc:	e00d      	b.n	8006eea <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8006ece:	78fa      	ldrb	r2, [r7, #3]
 8006ed0:	6879      	ldr	r1, [r7, #4]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	011b      	lsls	r3, r3, #4
 8006ed6:	1a9b      	subs	r3, r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	440b      	add	r3, r1
 8006edc:	334d      	adds	r3, #77	; 0x4d
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	f000 8100 	beq.w	80070e6 <HCD_HC_IN_IRQHandler+0xcca>
 8006ee6:	e000      	b.n	8006eea <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006ee8:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006eea:	78fa      	ldrb	r2, [r7, #3]
 8006eec:	6879      	ldr	r1, [r7, #4]
 8006eee:	4613      	mov	r3, r2
 8006ef0:	011b      	lsls	r3, r3, #4
 8006ef2:	1a9b      	subs	r3, r3, r2
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	440b      	add	r3, r1
 8006ef8:	334c      	adds	r3, #76	; 0x4c
 8006efa:	781a      	ldrb	r2, [r3, #0]
 8006efc:	78fb      	ldrb	r3, [r7, #3]
 8006efe:	4619      	mov	r1, r3
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f007 fe13 	bl	800eb2c <HAL_HCD_HC_NotifyURBChange_Callback>
 8006f06:	e0ef      	b.n	80070e8 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	78fa      	ldrb	r2, [r7, #3]
 8006f0e:	4611      	mov	r1, r2
 8006f10:	4618      	mov	r0, r3
 8006f12:	f005 fba0 	bl	800c656 <USB_ReadChInterrupts>
 8006f16:	4603      	mov	r3, r0
 8006f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f1c:	2b40      	cmp	r3, #64	; 0x40
 8006f1e:	d12f      	bne.n	8006f80 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006f20:	78fb      	ldrb	r3, [r7, #3]
 8006f22:	015a      	lsls	r2, r3, #5
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	4413      	add	r3, r2
 8006f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	2340      	movs	r3, #64	; 0x40
 8006f30:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8006f32:	78fa      	ldrb	r2, [r7, #3]
 8006f34:	6879      	ldr	r1, [r7, #4]
 8006f36:	4613      	mov	r3, r2
 8006f38:	011b      	lsls	r3, r3, #4
 8006f3a:	1a9b      	subs	r3, r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	440b      	add	r3, r1
 8006f40:	334d      	adds	r3, #77	; 0x4d
 8006f42:	2205      	movs	r2, #5
 8006f44:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8006f46:	78fa      	ldrb	r2, [r7, #3]
 8006f48:	6879      	ldr	r1, [r7, #4]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	011b      	lsls	r3, r3, #4
 8006f4e:	1a9b      	subs	r3, r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	440b      	add	r3, r1
 8006f54:	331a      	adds	r3, #26
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d109      	bne.n	8006f70 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8006f5c:	78fa      	ldrb	r2, [r7, #3]
 8006f5e:	6879      	ldr	r1, [r7, #4]
 8006f60:	4613      	mov	r3, r2
 8006f62:	011b      	lsls	r3, r3, #4
 8006f64:	1a9b      	subs	r3, r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	440b      	add	r3, r1
 8006f6a:	3344      	adds	r3, #68	; 0x44
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	78fa      	ldrb	r2, [r7, #3]
 8006f76:	4611      	mov	r1, r2
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f006 f80a 	bl	800cf92 <USB_HC_Halt>
 8006f7e:	e0b3      	b.n	80070e8 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	78fa      	ldrb	r2, [r7, #3]
 8006f86:	4611      	mov	r1, r2
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f005 fb64 	bl	800c656 <USB_ReadChInterrupts>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	f003 0310 	and.w	r3, r3, #16
 8006f94:	2b10      	cmp	r3, #16
 8006f96:	f040 80a7 	bne.w	80070e8 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8006f9a:	78fa      	ldrb	r2, [r7, #3]
 8006f9c:	6879      	ldr	r1, [r7, #4]
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	011b      	lsls	r3, r3, #4
 8006fa2:	1a9b      	subs	r3, r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	440b      	add	r3, r1
 8006fa8:	3326      	adds	r3, #38	; 0x26
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	2b03      	cmp	r3, #3
 8006fae:	d11b      	bne.n	8006fe8 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8006fb0:	78fa      	ldrb	r2, [r7, #3]
 8006fb2:	6879      	ldr	r1, [r7, #4]
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	011b      	lsls	r3, r3, #4
 8006fb8:	1a9b      	subs	r3, r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	440b      	add	r3, r1
 8006fbe:	3344      	adds	r3, #68	; 0x44
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8006fc4:	78fa      	ldrb	r2, [r7, #3]
 8006fc6:	6879      	ldr	r1, [r7, #4]
 8006fc8:	4613      	mov	r3, r2
 8006fca:	011b      	lsls	r3, r3, #4
 8006fcc:	1a9b      	subs	r3, r3, r2
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	440b      	add	r3, r1
 8006fd2:	334d      	adds	r3, #77	; 0x4d
 8006fd4:	2204      	movs	r2, #4
 8006fd6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	78fa      	ldrb	r2, [r7, #3]
 8006fde:	4611      	mov	r1, r2
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f005 ffd6 	bl	800cf92 <USB_HC_Halt>
 8006fe6:	e03f      	b.n	8007068 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006fe8:	78fa      	ldrb	r2, [r7, #3]
 8006fea:	6879      	ldr	r1, [r7, #4]
 8006fec:	4613      	mov	r3, r2
 8006fee:	011b      	lsls	r3, r3, #4
 8006ff0:	1a9b      	subs	r3, r3, r2
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	440b      	add	r3, r1
 8006ff6:	3326      	adds	r3, #38	; 0x26
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00a      	beq.n	8007014 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006ffe:	78fa      	ldrb	r2, [r7, #3]
 8007000:	6879      	ldr	r1, [r7, #4]
 8007002:	4613      	mov	r3, r2
 8007004:	011b      	lsls	r3, r3, #4
 8007006:	1a9b      	subs	r3, r3, r2
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	440b      	add	r3, r1
 800700c:	3326      	adds	r3, #38	; 0x26
 800700e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007010:	2b02      	cmp	r3, #2
 8007012:	d129      	bne.n	8007068 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8007014:	78fa      	ldrb	r2, [r7, #3]
 8007016:	6879      	ldr	r1, [r7, #4]
 8007018:	4613      	mov	r3, r2
 800701a:	011b      	lsls	r3, r3, #4
 800701c:	1a9b      	subs	r3, r3, r2
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	440b      	add	r3, r1
 8007022:	3344      	adds	r3, #68	; 0x44
 8007024:	2200      	movs	r2, #0
 8007026:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	799b      	ldrb	r3, [r3, #6]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00a      	beq.n	8007046 <HCD_HC_IN_IRQHandler+0xc2a>
 8007030:	78fa      	ldrb	r2, [r7, #3]
 8007032:	6879      	ldr	r1, [r7, #4]
 8007034:	4613      	mov	r3, r2
 8007036:	011b      	lsls	r3, r3, #4
 8007038:	1a9b      	subs	r3, r3, r2
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	440b      	add	r3, r1
 800703e:	331b      	adds	r3, #27
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d110      	bne.n	8007068 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8007046:	78fa      	ldrb	r2, [r7, #3]
 8007048:	6879      	ldr	r1, [r7, #4]
 800704a:	4613      	mov	r3, r2
 800704c:	011b      	lsls	r3, r3, #4
 800704e:	1a9b      	subs	r3, r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	440b      	add	r3, r1
 8007054:	334d      	adds	r3, #77	; 0x4d
 8007056:	2204      	movs	r2, #4
 8007058:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	78fa      	ldrb	r2, [r7, #3]
 8007060:	4611      	mov	r1, r2
 8007062:	4618      	mov	r0, r3
 8007064:	f005 ff95 	bl	800cf92 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8007068:	78fa      	ldrb	r2, [r7, #3]
 800706a:	6879      	ldr	r1, [r7, #4]
 800706c:	4613      	mov	r3, r2
 800706e:	011b      	lsls	r3, r3, #4
 8007070:	1a9b      	subs	r3, r3, r2
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	440b      	add	r3, r1
 8007076:	331b      	adds	r3, #27
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d129      	bne.n	80070d2 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800707e:	78fa      	ldrb	r2, [r7, #3]
 8007080:	6879      	ldr	r1, [r7, #4]
 8007082:	4613      	mov	r3, r2
 8007084:	011b      	lsls	r3, r3, #4
 8007086:	1a9b      	subs	r3, r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	440b      	add	r3, r1
 800708c:	331b      	adds	r3, #27
 800708e:	2200      	movs	r2, #0
 8007090:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007092:	78fb      	ldrb	r3, [r7, #3]
 8007094:	015a      	lsls	r2, r3, #5
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	4413      	add	r3, r2
 800709a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	78fa      	ldrb	r2, [r7, #3]
 80070a2:	0151      	lsls	r1, r2, #5
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	440a      	add	r2, r1
 80070a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070b0:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80070b2:	78fb      	ldrb	r3, [r7, #3]
 80070b4:	015a      	lsls	r2, r3, #5
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	4413      	add	r3, r2
 80070ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	78fa      	ldrb	r2, [r7, #3]
 80070c2:	0151      	lsls	r1, r2, #5
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	440a      	add	r2, r1
 80070c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070cc:	f043 0320 	orr.w	r3, r3, #32
 80070d0:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80070d2:	78fb      	ldrb	r3, [r7, #3]
 80070d4:	015a      	lsls	r2, r3, #5
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	4413      	add	r3, r2
 80070da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070de:	461a      	mov	r2, r3
 80070e0:	2310      	movs	r3, #16
 80070e2:	6093      	str	r3, [r2, #8]
 80070e4:	e000      	b.n	80070e8 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80070e6:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80070e8:	3718      	adds	r7, #24
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b086      	sub	sp, #24
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	460b      	mov	r3, r1
 80070f8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	78fa      	ldrb	r2, [r7, #3]
 800710a:	4611      	mov	r1, r2
 800710c:	4618      	mov	r0, r3
 800710e:	f005 faa2 	bl	800c656 <USB_ReadChInterrupts>
 8007112:	4603      	mov	r3, r0
 8007114:	f003 0304 	and.w	r3, r3, #4
 8007118:	2b04      	cmp	r3, #4
 800711a:	d11b      	bne.n	8007154 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800711c:	78fb      	ldrb	r3, [r7, #3]
 800711e:	015a      	lsls	r2, r3, #5
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	4413      	add	r3, r2
 8007124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007128:	461a      	mov	r2, r3
 800712a:	2304      	movs	r3, #4
 800712c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800712e:	78fa      	ldrb	r2, [r7, #3]
 8007130:	6879      	ldr	r1, [r7, #4]
 8007132:	4613      	mov	r3, r2
 8007134:	011b      	lsls	r3, r3, #4
 8007136:	1a9b      	subs	r3, r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	440b      	add	r3, r1
 800713c:	334d      	adds	r3, #77	; 0x4d
 800713e:	2207      	movs	r2, #7
 8007140:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	78fa      	ldrb	r2, [r7, #3]
 8007148:	4611      	mov	r1, r2
 800714a:	4618      	mov	r0, r3
 800714c:	f005 ff21 	bl	800cf92 <USB_HC_Halt>
 8007150:	f000 bc6f 	b.w	8007a32 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	78fa      	ldrb	r2, [r7, #3]
 800715a:	4611      	mov	r1, r2
 800715c:	4618      	mov	r0, r3
 800715e:	f005 fa7a 	bl	800c656 <USB_ReadChInterrupts>
 8007162:	4603      	mov	r3, r0
 8007164:	f003 0320 	and.w	r3, r3, #32
 8007168:	2b20      	cmp	r3, #32
 800716a:	f040 8082 	bne.w	8007272 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800716e:	78fb      	ldrb	r3, [r7, #3]
 8007170:	015a      	lsls	r2, r3, #5
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	4413      	add	r3, r2
 8007176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800717a:	461a      	mov	r2, r3
 800717c:	2320      	movs	r3, #32
 800717e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8007180:	78fa      	ldrb	r2, [r7, #3]
 8007182:	6879      	ldr	r1, [r7, #4]
 8007184:	4613      	mov	r3, r2
 8007186:	011b      	lsls	r3, r3, #4
 8007188:	1a9b      	subs	r3, r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	440b      	add	r3, r1
 800718e:	3319      	adds	r3, #25
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	2b01      	cmp	r3, #1
 8007194:	d124      	bne.n	80071e0 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8007196:	78fa      	ldrb	r2, [r7, #3]
 8007198:	6879      	ldr	r1, [r7, #4]
 800719a:	4613      	mov	r3, r2
 800719c:	011b      	lsls	r3, r3, #4
 800719e:	1a9b      	subs	r3, r3, r2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	440b      	add	r3, r1
 80071a4:	3319      	adds	r3, #25
 80071a6:	2200      	movs	r2, #0
 80071a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80071aa:	78fa      	ldrb	r2, [r7, #3]
 80071ac:	6879      	ldr	r1, [r7, #4]
 80071ae:	4613      	mov	r3, r2
 80071b0:	011b      	lsls	r3, r3, #4
 80071b2:	1a9b      	subs	r3, r3, r2
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	440b      	add	r3, r1
 80071b8:	334c      	adds	r3, #76	; 0x4c
 80071ba:	2202      	movs	r2, #2
 80071bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80071be:	78fa      	ldrb	r2, [r7, #3]
 80071c0:	6879      	ldr	r1, [r7, #4]
 80071c2:	4613      	mov	r3, r2
 80071c4:	011b      	lsls	r3, r3, #4
 80071c6:	1a9b      	subs	r3, r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	440b      	add	r3, r1
 80071cc:	334d      	adds	r3, #77	; 0x4d
 80071ce:	2203      	movs	r2, #3
 80071d0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	78fa      	ldrb	r2, [r7, #3]
 80071d8:	4611      	mov	r1, r2
 80071da:	4618      	mov	r0, r3
 80071dc:	f005 fed9 	bl	800cf92 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80071e0:	78fa      	ldrb	r2, [r7, #3]
 80071e2:	6879      	ldr	r1, [r7, #4]
 80071e4:	4613      	mov	r3, r2
 80071e6:	011b      	lsls	r3, r3, #4
 80071e8:	1a9b      	subs	r3, r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	440b      	add	r3, r1
 80071ee:	331a      	adds	r3, #26
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	f040 841d 	bne.w	8007a32 <HCD_HC_OUT_IRQHandler+0x944>
 80071f8:	78fa      	ldrb	r2, [r7, #3]
 80071fa:	6879      	ldr	r1, [r7, #4]
 80071fc:	4613      	mov	r3, r2
 80071fe:	011b      	lsls	r3, r3, #4
 8007200:	1a9b      	subs	r3, r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	440b      	add	r3, r1
 8007206:	331b      	adds	r3, #27
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	f040 8411 	bne.w	8007a32 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8007210:	78fa      	ldrb	r2, [r7, #3]
 8007212:	6879      	ldr	r1, [r7, #4]
 8007214:	4613      	mov	r3, r2
 8007216:	011b      	lsls	r3, r3, #4
 8007218:	1a9b      	subs	r3, r3, r2
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	440b      	add	r3, r1
 800721e:	3326      	adds	r3, #38	; 0x26
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d009      	beq.n	800723a <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8007226:	78fa      	ldrb	r2, [r7, #3]
 8007228:	6879      	ldr	r1, [r7, #4]
 800722a:	4613      	mov	r3, r2
 800722c:	011b      	lsls	r3, r3, #4
 800722e:	1a9b      	subs	r3, r3, r2
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	440b      	add	r3, r1
 8007234:	331b      	adds	r3, #27
 8007236:	2201      	movs	r2, #1
 8007238:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800723a:	78fa      	ldrb	r2, [r7, #3]
 800723c:	6879      	ldr	r1, [r7, #4]
 800723e:	4613      	mov	r3, r2
 8007240:	011b      	lsls	r3, r3, #4
 8007242:	1a9b      	subs	r3, r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	440b      	add	r3, r1
 8007248:	334d      	adds	r3, #77	; 0x4d
 800724a:	2203      	movs	r2, #3
 800724c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	78fa      	ldrb	r2, [r7, #3]
 8007254:	4611      	mov	r1, r2
 8007256:	4618      	mov	r0, r3
 8007258:	f005 fe9b 	bl	800cf92 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800725c:	78fa      	ldrb	r2, [r7, #3]
 800725e:	6879      	ldr	r1, [r7, #4]
 8007260:	4613      	mov	r3, r2
 8007262:	011b      	lsls	r3, r3, #4
 8007264:	1a9b      	subs	r3, r3, r2
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	440b      	add	r3, r1
 800726a:	3344      	adds	r3, #68	; 0x44
 800726c:	2200      	movs	r2, #0
 800726e:	601a      	str	r2, [r3, #0]
 8007270:	e3df      	b.n	8007a32 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	78fa      	ldrb	r2, [r7, #3]
 8007278:	4611      	mov	r1, r2
 800727a:	4618      	mov	r0, r3
 800727c:	f005 f9eb 	bl	800c656 <USB_ReadChInterrupts>
 8007280:	4603      	mov	r3, r0
 8007282:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007286:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800728a:	d111      	bne.n	80072b0 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800728c:	78fb      	ldrb	r3, [r7, #3]
 800728e:	015a      	lsls	r2, r3, #5
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	4413      	add	r3, r2
 8007294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007298:	461a      	mov	r2, r3
 800729a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800729e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	78fa      	ldrb	r2, [r7, #3]
 80072a6:	4611      	mov	r1, r2
 80072a8:	4618      	mov	r0, r3
 80072aa:	f005 fe72 	bl	800cf92 <USB_HC_Halt>
 80072ae:	e3c0      	b.n	8007a32 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	78fa      	ldrb	r2, [r7, #3]
 80072b6:	4611      	mov	r1, r2
 80072b8:	4618      	mov	r0, r3
 80072ba:	f005 f9cc 	bl	800c656 <USB_ReadChInterrupts>
 80072be:	4603      	mov	r3, r0
 80072c0:	f003 0301 	and.w	r3, r3, #1
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d168      	bne.n	800739a <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80072c8:	78fa      	ldrb	r2, [r7, #3]
 80072ca:	6879      	ldr	r1, [r7, #4]
 80072cc:	4613      	mov	r3, r2
 80072ce:	011b      	lsls	r3, r3, #4
 80072d0:	1a9b      	subs	r3, r3, r2
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	440b      	add	r3, r1
 80072d6:	3344      	adds	r3, #68	; 0x44
 80072d8:	2200      	movs	r2, #0
 80072da:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	78fa      	ldrb	r2, [r7, #3]
 80072e2:	4611      	mov	r1, r2
 80072e4:	4618      	mov	r0, r3
 80072e6:	f005 f9b6 	bl	800c656 <USB_ReadChInterrupts>
 80072ea:	4603      	mov	r3, r0
 80072ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f0:	2b40      	cmp	r3, #64	; 0x40
 80072f2:	d112      	bne.n	800731a <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80072f4:	78fa      	ldrb	r2, [r7, #3]
 80072f6:	6879      	ldr	r1, [r7, #4]
 80072f8:	4613      	mov	r3, r2
 80072fa:	011b      	lsls	r3, r3, #4
 80072fc:	1a9b      	subs	r3, r3, r2
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	440b      	add	r3, r1
 8007302:	3319      	adds	r3, #25
 8007304:	2201      	movs	r2, #1
 8007306:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8007308:	78fb      	ldrb	r3, [r7, #3]
 800730a:	015a      	lsls	r2, r3, #5
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	4413      	add	r3, r2
 8007310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007314:	461a      	mov	r2, r3
 8007316:	2340      	movs	r3, #64	; 0x40
 8007318:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800731a:	78fa      	ldrb	r2, [r7, #3]
 800731c:	6879      	ldr	r1, [r7, #4]
 800731e:	4613      	mov	r3, r2
 8007320:	011b      	lsls	r3, r3, #4
 8007322:	1a9b      	subs	r3, r3, r2
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	440b      	add	r3, r1
 8007328:	331b      	adds	r3, #27
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d019      	beq.n	8007364 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8007330:	78fa      	ldrb	r2, [r7, #3]
 8007332:	6879      	ldr	r1, [r7, #4]
 8007334:	4613      	mov	r3, r2
 8007336:	011b      	lsls	r3, r3, #4
 8007338:	1a9b      	subs	r3, r3, r2
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	440b      	add	r3, r1
 800733e:	331b      	adds	r3, #27
 8007340:	2200      	movs	r2, #0
 8007342:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007344:	78fb      	ldrb	r3, [r7, #3]
 8007346:	015a      	lsls	r2, r3, #5
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	4413      	add	r3, r2
 800734c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	78fa      	ldrb	r2, [r7, #3]
 8007354:	0151      	lsls	r1, r2, #5
 8007356:	693a      	ldr	r2, [r7, #16]
 8007358:	440a      	add	r2, r1
 800735a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800735e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007362:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8007364:	78fb      	ldrb	r3, [r7, #3]
 8007366:	015a      	lsls	r2, r3, #5
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	4413      	add	r3, r2
 800736c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007370:	461a      	mov	r2, r3
 8007372:	2301      	movs	r3, #1
 8007374:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8007376:	78fa      	ldrb	r2, [r7, #3]
 8007378:	6879      	ldr	r1, [r7, #4]
 800737a:	4613      	mov	r3, r2
 800737c:	011b      	lsls	r3, r3, #4
 800737e:	1a9b      	subs	r3, r3, r2
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	440b      	add	r3, r1
 8007384:	334d      	adds	r3, #77	; 0x4d
 8007386:	2201      	movs	r2, #1
 8007388:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	78fa      	ldrb	r2, [r7, #3]
 8007390:	4611      	mov	r1, r2
 8007392:	4618      	mov	r0, r3
 8007394:	f005 fdfd 	bl	800cf92 <USB_HC_Halt>
 8007398:	e34b      	b.n	8007a32 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	78fa      	ldrb	r2, [r7, #3]
 80073a0:	4611      	mov	r1, r2
 80073a2:	4618      	mov	r0, r3
 80073a4:	f005 f957 	bl	800c656 <USB_ReadChInterrupts>
 80073a8:	4603      	mov	r3, r0
 80073aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ae:	2b40      	cmp	r3, #64	; 0x40
 80073b0:	d139      	bne.n	8007426 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80073b2:	78fa      	ldrb	r2, [r7, #3]
 80073b4:	6879      	ldr	r1, [r7, #4]
 80073b6:	4613      	mov	r3, r2
 80073b8:	011b      	lsls	r3, r3, #4
 80073ba:	1a9b      	subs	r3, r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	440b      	add	r3, r1
 80073c0:	334d      	adds	r3, #77	; 0x4d
 80073c2:	2205      	movs	r2, #5
 80073c4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80073c6:	78fa      	ldrb	r2, [r7, #3]
 80073c8:	6879      	ldr	r1, [r7, #4]
 80073ca:	4613      	mov	r3, r2
 80073cc:	011b      	lsls	r3, r3, #4
 80073ce:	1a9b      	subs	r3, r3, r2
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	440b      	add	r3, r1
 80073d4:	331a      	adds	r3, #26
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d109      	bne.n	80073f0 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80073dc:	78fa      	ldrb	r2, [r7, #3]
 80073de:	6879      	ldr	r1, [r7, #4]
 80073e0:	4613      	mov	r3, r2
 80073e2:	011b      	lsls	r3, r3, #4
 80073e4:	1a9b      	subs	r3, r3, r2
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	440b      	add	r3, r1
 80073ea:	3319      	adds	r3, #25
 80073ec:	2201      	movs	r2, #1
 80073ee:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80073f0:	78fa      	ldrb	r2, [r7, #3]
 80073f2:	6879      	ldr	r1, [r7, #4]
 80073f4:	4613      	mov	r3, r2
 80073f6:	011b      	lsls	r3, r3, #4
 80073f8:	1a9b      	subs	r3, r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	440b      	add	r3, r1
 80073fe:	3344      	adds	r3, #68	; 0x44
 8007400:	2200      	movs	r2, #0
 8007402:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	78fa      	ldrb	r2, [r7, #3]
 800740a:	4611      	mov	r1, r2
 800740c:	4618      	mov	r0, r3
 800740e:	f005 fdc0 	bl	800cf92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8007412:	78fb      	ldrb	r3, [r7, #3]
 8007414:	015a      	lsls	r2, r3, #5
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	4413      	add	r3, r2
 800741a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800741e:	461a      	mov	r2, r3
 8007420:	2340      	movs	r3, #64	; 0x40
 8007422:	6093      	str	r3, [r2, #8]
 8007424:	e305      	b.n	8007a32 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	78fa      	ldrb	r2, [r7, #3]
 800742c:	4611      	mov	r1, r2
 800742e:	4618      	mov	r0, r3
 8007430:	f005 f911 	bl	800c656 <USB_ReadChInterrupts>
 8007434:	4603      	mov	r3, r0
 8007436:	f003 0308 	and.w	r3, r3, #8
 800743a:	2b08      	cmp	r3, #8
 800743c:	d11a      	bne.n	8007474 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800743e:	78fb      	ldrb	r3, [r7, #3]
 8007440:	015a      	lsls	r2, r3, #5
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	4413      	add	r3, r2
 8007446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800744a:	461a      	mov	r2, r3
 800744c:	2308      	movs	r3, #8
 800744e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8007450:	78fa      	ldrb	r2, [r7, #3]
 8007452:	6879      	ldr	r1, [r7, #4]
 8007454:	4613      	mov	r3, r2
 8007456:	011b      	lsls	r3, r3, #4
 8007458:	1a9b      	subs	r3, r3, r2
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	440b      	add	r3, r1
 800745e:	334d      	adds	r3, #77	; 0x4d
 8007460:	2206      	movs	r2, #6
 8007462:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	78fa      	ldrb	r2, [r7, #3]
 800746a:	4611      	mov	r1, r2
 800746c:	4618      	mov	r0, r3
 800746e:	f005 fd90 	bl	800cf92 <USB_HC_Halt>
 8007472:	e2de      	b.n	8007a32 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	78fa      	ldrb	r2, [r7, #3]
 800747a:	4611      	mov	r1, r2
 800747c:	4618      	mov	r0, r3
 800747e:	f005 f8ea 	bl	800c656 <USB_ReadChInterrupts>
 8007482:	4603      	mov	r3, r0
 8007484:	f003 0310 	and.w	r3, r3, #16
 8007488:	2b10      	cmp	r3, #16
 800748a:	d144      	bne.n	8007516 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800748c:	78fa      	ldrb	r2, [r7, #3]
 800748e:	6879      	ldr	r1, [r7, #4]
 8007490:	4613      	mov	r3, r2
 8007492:	011b      	lsls	r3, r3, #4
 8007494:	1a9b      	subs	r3, r3, r2
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	440b      	add	r3, r1
 800749a:	3344      	adds	r3, #68	; 0x44
 800749c:	2200      	movs	r2, #0
 800749e:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80074a0:	78fa      	ldrb	r2, [r7, #3]
 80074a2:	6879      	ldr	r1, [r7, #4]
 80074a4:	4613      	mov	r3, r2
 80074a6:	011b      	lsls	r3, r3, #4
 80074a8:	1a9b      	subs	r3, r3, r2
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	440b      	add	r3, r1
 80074ae:	334d      	adds	r3, #77	; 0x4d
 80074b0:	2204      	movs	r2, #4
 80074b2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80074b4:	78fa      	ldrb	r2, [r7, #3]
 80074b6:	6879      	ldr	r1, [r7, #4]
 80074b8:	4613      	mov	r3, r2
 80074ba:	011b      	lsls	r3, r3, #4
 80074bc:	1a9b      	subs	r3, r3, r2
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	440b      	add	r3, r1
 80074c2:	3319      	adds	r3, #25
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d114      	bne.n	80074f4 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80074ca:	78fa      	ldrb	r2, [r7, #3]
 80074cc:	6879      	ldr	r1, [r7, #4]
 80074ce:	4613      	mov	r3, r2
 80074d0:	011b      	lsls	r3, r3, #4
 80074d2:	1a9b      	subs	r3, r3, r2
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	440b      	add	r3, r1
 80074d8:	3318      	adds	r3, #24
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d109      	bne.n	80074f4 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80074e0:	78fa      	ldrb	r2, [r7, #3]
 80074e2:	6879      	ldr	r1, [r7, #4]
 80074e4:	4613      	mov	r3, r2
 80074e6:	011b      	lsls	r3, r3, #4
 80074e8:	1a9b      	subs	r3, r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	440b      	add	r3, r1
 80074ee:	3319      	adds	r3, #25
 80074f0:	2201      	movs	r2, #1
 80074f2:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	78fa      	ldrb	r2, [r7, #3]
 80074fa:	4611      	mov	r1, r2
 80074fc:	4618      	mov	r0, r3
 80074fe:	f005 fd48 	bl	800cf92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8007502:	78fb      	ldrb	r3, [r7, #3]
 8007504:	015a      	lsls	r2, r3, #5
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	4413      	add	r3, r2
 800750a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800750e:	461a      	mov	r2, r3
 8007510:	2310      	movs	r3, #16
 8007512:	6093      	str	r3, [r2, #8]
 8007514:	e28d      	b.n	8007a32 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	78fa      	ldrb	r2, [r7, #3]
 800751c:	4611      	mov	r1, r2
 800751e:	4618      	mov	r0, r3
 8007520:	f005 f899 	bl	800c656 <USB_ReadChInterrupts>
 8007524:	4603      	mov	r3, r0
 8007526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800752a:	2b80      	cmp	r3, #128	; 0x80
 800752c:	d169      	bne.n	8007602 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	799b      	ldrb	r3, [r3, #6]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d111      	bne.n	800755a <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8007536:	78fa      	ldrb	r2, [r7, #3]
 8007538:	6879      	ldr	r1, [r7, #4]
 800753a:	4613      	mov	r3, r2
 800753c:	011b      	lsls	r3, r3, #4
 800753e:	1a9b      	subs	r3, r3, r2
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	440b      	add	r3, r1
 8007544:	334d      	adds	r3, #77	; 0x4d
 8007546:	2207      	movs	r2, #7
 8007548:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	78fa      	ldrb	r2, [r7, #3]
 8007550:	4611      	mov	r1, r2
 8007552:	4618      	mov	r0, r3
 8007554:	f005 fd1d 	bl	800cf92 <USB_HC_Halt>
 8007558:	e049      	b.n	80075ee <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800755a:	78fa      	ldrb	r2, [r7, #3]
 800755c:	6879      	ldr	r1, [r7, #4]
 800755e:	4613      	mov	r3, r2
 8007560:	011b      	lsls	r3, r3, #4
 8007562:	1a9b      	subs	r3, r3, r2
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	440b      	add	r3, r1
 8007568:	3344      	adds	r3, #68	; 0x44
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	1c59      	adds	r1, r3, #1
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	4613      	mov	r3, r2
 8007572:	011b      	lsls	r3, r3, #4
 8007574:	1a9b      	subs	r3, r3, r2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	4403      	add	r3, r0
 800757a:	3344      	adds	r3, #68	; 0x44
 800757c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800757e:	78fa      	ldrb	r2, [r7, #3]
 8007580:	6879      	ldr	r1, [r7, #4]
 8007582:	4613      	mov	r3, r2
 8007584:	011b      	lsls	r3, r3, #4
 8007586:	1a9b      	subs	r3, r3, r2
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	440b      	add	r3, r1
 800758c:	3344      	adds	r3, #68	; 0x44
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2b02      	cmp	r3, #2
 8007592:	d922      	bls.n	80075da <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8007594:	78fa      	ldrb	r2, [r7, #3]
 8007596:	6879      	ldr	r1, [r7, #4]
 8007598:	4613      	mov	r3, r2
 800759a:	011b      	lsls	r3, r3, #4
 800759c:	1a9b      	subs	r3, r3, r2
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	440b      	add	r3, r1
 80075a2:	3344      	adds	r3, #68	; 0x44
 80075a4:	2200      	movs	r2, #0
 80075a6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80075a8:	78fa      	ldrb	r2, [r7, #3]
 80075aa:	6879      	ldr	r1, [r7, #4]
 80075ac:	4613      	mov	r3, r2
 80075ae:	011b      	lsls	r3, r3, #4
 80075b0:	1a9b      	subs	r3, r3, r2
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	440b      	add	r3, r1
 80075b6:	334c      	adds	r3, #76	; 0x4c
 80075b8:	2204      	movs	r2, #4
 80075ba:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80075bc:	78fa      	ldrb	r2, [r7, #3]
 80075be:	6879      	ldr	r1, [r7, #4]
 80075c0:	4613      	mov	r3, r2
 80075c2:	011b      	lsls	r3, r3, #4
 80075c4:	1a9b      	subs	r3, r3, r2
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	440b      	add	r3, r1
 80075ca:	334c      	adds	r3, #76	; 0x4c
 80075cc:	781a      	ldrb	r2, [r3, #0]
 80075ce:	78fb      	ldrb	r3, [r7, #3]
 80075d0:	4619      	mov	r1, r3
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f007 faaa 	bl	800eb2c <HAL_HCD_HC_NotifyURBChange_Callback>
 80075d8:	e009      	b.n	80075ee <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80075da:	78fa      	ldrb	r2, [r7, #3]
 80075dc:	6879      	ldr	r1, [r7, #4]
 80075de:	4613      	mov	r3, r2
 80075e0:	011b      	lsls	r3, r3, #4
 80075e2:	1a9b      	subs	r3, r3, r2
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	440b      	add	r3, r1
 80075e8:	334c      	adds	r3, #76	; 0x4c
 80075ea:	2202      	movs	r2, #2
 80075ec:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80075ee:	78fb      	ldrb	r3, [r7, #3]
 80075f0:	015a      	lsls	r2, r3, #5
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	4413      	add	r3, r2
 80075f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075fa:	461a      	mov	r2, r3
 80075fc:	2380      	movs	r3, #128	; 0x80
 80075fe:	6093      	str	r3, [r2, #8]
 8007600:	e217      	b.n	8007a32 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	78fa      	ldrb	r2, [r7, #3]
 8007608:	4611      	mov	r1, r2
 800760a:	4618      	mov	r0, r3
 800760c:	f005 f823 	bl	800c656 <USB_ReadChInterrupts>
 8007610:	4603      	mov	r3, r0
 8007612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800761a:	d11b      	bne.n	8007654 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800761c:	78fa      	ldrb	r2, [r7, #3]
 800761e:	6879      	ldr	r1, [r7, #4]
 8007620:	4613      	mov	r3, r2
 8007622:	011b      	lsls	r3, r3, #4
 8007624:	1a9b      	subs	r3, r3, r2
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	440b      	add	r3, r1
 800762a:	334d      	adds	r3, #77	; 0x4d
 800762c:	2209      	movs	r2, #9
 800762e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	78fa      	ldrb	r2, [r7, #3]
 8007636:	4611      	mov	r1, r2
 8007638:	4618      	mov	r0, r3
 800763a:	f005 fcaa 	bl	800cf92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800763e:	78fb      	ldrb	r3, [r7, #3]
 8007640:	015a      	lsls	r2, r3, #5
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	4413      	add	r3, r2
 8007646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800764a:	461a      	mov	r2, r3
 800764c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007650:	6093      	str	r3, [r2, #8]
 8007652:	e1ee      	b.n	8007a32 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	78fa      	ldrb	r2, [r7, #3]
 800765a:	4611      	mov	r1, r2
 800765c:	4618      	mov	r0, r3
 800765e:	f004 fffa 	bl	800c656 <USB_ReadChInterrupts>
 8007662:	4603      	mov	r3, r0
 8007664:	f003 0302 	and.w	r3, r3, #2
 8007668:	2b02      	cmp	r3, #2
 800766a:	f040 81df 	bne.w	8007a2c <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800766e:	78fb      	ldrb	r3, [r7, #3]
 8007670:	015a      	lsls	r2, r3, #5
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	4413      	add	r3, r2
 8007676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800767a:	461a      	mov	r2, r3
 800767c:	2302      	movs	r3, #2
 800767e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8007680:	78fa      	ldrb	r2, [r7, #3]
 8007682:	6879      	ldr	r1, [r7, #4]
 8007684:	4613      	mov	r3, r2
 8007686:	011b      	lsls	r3, r3, #4
 8007688:	1a9b      	subs	r3, r3, r2
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	440b      	add	r3, r1
 800768e:	334d      	adds	r3, #77	; 0x4d
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	2b01      	cmp	r3, #1
 8007694:	f040 8093 	bne.w	80077be <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007698:	78fa      	ldrb	r2, [r7, #3]
 800769a:	6879      	ldr	r1, [r7, #4]
 800769c:	4613      	mov	r3, r2
 800769e:	011b      	lsls	r3, r3, #4
 80076a0:	1a9b      	subs	r3, r3, r2
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	440b      	add	r3, r1
 80076a6:	334d      	adds	r3, #77	; 0x4d
 80076a8:	2202      	movs	r2, #2
 80076aa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80076ac:	78fa      	ldrb	r2, [r7, #3]
 80076ae:	6879      	ldr	r1, [r7, #4]
 80076b0:	4613      	mov	r3, r2
 80076b2:	011b      	lsls	r3, r3, #4
 80076b4:	1a9b      	subs	r3, r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	440b      	add	r3, r1
 80076ba:	334c      	adds	r3, #76	; 0x4c
 80076bc:	2201      	movs	r2, #1
 80076be:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80076c0:	78fa      	ldrb	r2, [r7, #3]
 80076c2:	6879      	ldr	r1, [r7, #4]
 80076c4:	4613      	mov	r3, r2
 80076c6:	011b      	lsls	r3, r3, #4
 80076c8:	1a9b      	subs	r3, r3, r2
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	440b      	add	r3, r1
 80076ce:	3326      	adds	r3, #38	; 0x26
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d00b      	beq.n	80076ee <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80076d6:	78fa      	ldrb	r2, [r7, #3]
 80076d8:	6879      	ldr	r1, [r7, #4]
 80076da:	4613      	mov	r3, r2
 80076dc:	011b      	lsls	r3, r3, #4
 80076de:	1a9b      	subs	r3, r3, r2
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	440b      	add	r3, r1
 80076e4:	3326      	adds	r3, #38	; 0x26
 80076e6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80076e8:	2b03      	cmp	r3, #3
 80076ea:	f040 8190 	bne.w	8007a0e <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	799b      	ldrb	r3, [r3, #6]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d115      	bne.n	8007722 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80076f6:	78fa      	ldrb	r2, [r7, #3]
 80076f8:	6879      	ldr	r1, [r7, #4]
 80076fa:	4613      	mov	r3, r2
 80076fc:	011b      	lsls	r3, r3, #4
 80076fe:	1a9b      	subs	r3, r3, r2
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	440b      	add	r3, r1
 8007704:	333d      	adds	r3, #61	; 0x3d
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	78fa      	ldrb	r2, [r7, #3]
 800770a:	f083 0301 	eor.w	r3, r3, #1
 800770e:	b2d8      	uxtb	r0, r3
 8007710:	6879      	ldr	r1, [r7, #4]
 8007712:	4613      	mov	r3, r2
 8007714:	011b      	lsls	r3, r3, #4
 8007716:	1a9b      	subs	r3, r3, r2
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	440b      	add	r3, r1
 800771c:	333d      	adds	r3, #61	; 0x3d
 800771e:	4602      	mov	r2, r0
 8007720:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	799b      	ldrb	r3, [r3, #6]
 8007726:	2b01      	cmp	r3, #1
 8007728:	f040 8171 	bne.w	8007a0e <HCD_HC_OUT_IRQHandler+0x920>
 800772c:	78fa      	ldrb	r2, [r7, #3]
 800772e:	6879      	ldr	r1, [r7, #4]
 8007730:	4613      	mov	r3, r2
 8007732:	011b      	lsls	r3, r3, #4
 8007734:	1a9b      	subs	r3, r3, r2
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	440b      	add	r3, r1
 800773a:	3334      	adds	r3, #52	; 0x34
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	f000 8165 	beq.w	8007a0e <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8007744:	78fa      	ldrb	r2, [r7, #3]
 8007746:	6879      	ldr	r1, [r7, #4]
 8007748:	4613      	mov	r3, r2
 800774a:	011b      	lsls	r3, r3, #4
 800774c:	1a9b      	subs	r3, r3, r2
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	440b      	add	r3, r1
 8007752:	3334      	adds	r3, #52	; 0x34
 8007754:	6819      	ldr	r1, [r3, #0]
 8007756:	78fa      	ldrb	r2, [r7, #3]
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	4613      	mov	r3, r2
 800775c:	011b      	lsls	r3, r3, #4
 800775e:	1a9b      	subs	r3, r3, r2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	4403      	add	r3, r0
 8007764:	3328      	adds	r3, #40	; 0x28
 8007766:	881b      	ldrh	r3, [r3, #0]
 8007768:	440b      	add	r3, r1
 800776a:	1e59      	subs	r1, r3, #1
 800776c:	78fa      	ldrb	r2, [r7, #3]
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	4613      	mov	r3, r2
 8007772:	011b      	lsls	r3, r3, #4
 8007774:	1a9b      	subs	r3, r3, r2
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	4403      	add	r3, r0
 800777a:	3328      	adds	r3, #40	; 0x28
 800777c:	881b      	ldrh	r3, [r3, #0]
 800777e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007782:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	f003 0301 	and.w	r3, r3, #1
 800778a:	2b00      	cmp	r3, #0
 800778c:	f000 813f 	beq.w	8007a0e <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8007790:	78fa      	ldrb	r2, [r7, #3]
 8007792:	6879      	ldr	r1, [r7, #4]
 8007794:	4613      	mov	r3, r2
 8007796:	011b      	lsls	r3, r3, #4
 8007798:	1a9b      	subs	r3, r3, r2
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	440b      	add	r3, r1
 800779e:	333d      	adds	r3, #61	; 0x3d
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	78fa      	ldrb	r2, [r7, #3]
 80077a4:	f083 0301 	eor.w	r3, r3, #1
 80077a8:	b2d8      	uxtb	r0, r3
 80077aa:	6879      	ldr	r1, [r7, #4]
 80077ac:	4613      	mov	r3, r2
 80077ae:	011b      	lsls	r3, r3, #4
 80077b0:	1a9b      	subs	r3, r3, r2
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	440b      	add	r3, r1
 80077b6:	333d      	adds	r3, #61	; 0x3d
 80077b8:	4602      	mov	r2, r0
 80077ba:	701a      	strb	r2, [r3, #0]
 80077bc:	e127      	b.n	8007a0e <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80077be:	78fa      	ldrb	r2, [r7, #3]
 80077c0:	6879      	ldr	r1, [r7, #4]
 80077c2:	4613      	mov	r3, r2
 80077c4:	011b      	lsls	r3, r3, #4
 80077c6:	1a9b      	subs	r3, r3, r2
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	440b      	add	r3, r1
 80077cc:	334d      	adds	r3, #77	; 0x4d
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	2b03      	cmp	r3, #3
 80077d2:	d120      	bne.n	8007816 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80077d4:	78fa      	ldrb	r2, [r7, #3]
 80077d6:	6879      	ldr	r1, [r7, #4]
 80077d8:	4613      	mov	r3, r2
 80077da:	011b      	lsls	r3, r3, #4
 80077dc:	1a9b      	subs	r3, r3, r2
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	440b      	add	r3, r1
 80077e2:	334d      	adds	r3, #77	; 0x4d
 80077e4:	2202      	movs	r2, #2
 80077e6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80077e8:	78fa      	ldrb	r2, [r7, #3]
 80077ea:	6879      	ldr	r1, [r7, #4]
 80077ec:	4613      	mov	r3, r2
 80077ee:	011b      	lsls	r3, r3, #4
 80077f0:	1a9b      	subs	r3, r3, r2
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	440b      	add	r3, r1
 80077f6:	331b      	adds	r3, #27
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	f040 8107 	bne.w	8007a0e <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007800:	78fa      	ldrb	r2, [r7, #3]
 8007802:	6879      	ldr	r1, [r7, #4]
 8007804:	4613      	mov	r3, r2
 8007806:	011b      	lsls	r3, r3, #4
 8007808:	1a9b      	subs	r3, r3, r2
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	440b      	add	r3, r1
 800780e:	334c      	adds	r3, #76	; 0x4c
 8007810:	2202      	movs	r2, #2
 8007812:	701a      	strb	r2, [r3, #0]
 8007814:	e0fb      	b.n	8007a0e <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8007816:	78fa      	ldrb	r2, [r7, #3]
 8007818:	6879      	ldr	r1, [r7, #4]
 800781a:	4613      	mov	r3, r2
 800781c:	011b      	lsls	r3, r3, #4
 800781e:	1a9b      	subs	r3, r3, r2
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	440b      	add	r3, r1
 8007824:	334d      	adds	r3, #77	; 0x4d
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	2b04      	cmp	r3, #4
 800782a:	d13a      	bne.n	80078a2 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800782c:	78fa      	ldrb	r2, [r7, #3]
 800782e:	6879      	ldr	r1, [r7, #4]
 8007830:	4613      	mov	r3, r2
 8007832:	011b      	lsls	r3, r3, #4
 8007834:	1a9b      	subs	r3, r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	440b      	add	r3, r1
 800783a:	334d      	adds	r3, #77	; 0x4d
 800783c:	2202      	movs	r2, #2
 800783e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007840:	78fa      	ldrb	r2, [r7, #3]
 8007842:	6879      	ldr	r1, [r7, #4]
 8007844:	4613      	mov	r3, r2
 8007846:	011b      	lsls	r3, r3, #4
 8007848:	1a9b      	subs	r3, r3, r2
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	440b      	add	r3, r1
 800784e:	334c      	adds	r3, #76	; 0x4c
 8007850:	2202      	movs	r2, #2
 8007852:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8007854:	78fa      	ldrb	r2, [r7, #3]
 8007856:	6879      	ldr	r1, [r7, #4]
 8007858:	4613      	mov	r3, r2
 800785a:	011b      	lsls	r3, r3, #4
 800785c:	1a9b      	subs	r3, r3, r2
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	440b      	add	r3, r1
 8007862:	331b      	adds	r3, #27
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	2b01      	cmp	r3, #1
 8007868:	f040 80d1 	bne.w	8007a0e <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800786c:	78fa      	ldrb	r2, [r7, #3]
 800786e:	6879      	ldr	r1, [r7, #4]
 8007870:	4613      	mov	r3, r2
 8007872:	011b      	lsls	r3, r3, #4
 8007874:	1a9b      	subs	r3, r3, r2
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	440b      	add	r3, r1
 800787a:	331b      	adds	r3, #27
 800787c:	2200      	movs	r2, #0
 800787e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007880:	78fb      	ldrb	r3, [r7, #3]
 8007882:	015a      	lsls	r2, r3, #5
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	4413      	add	r3, r2
 8007888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	78fa      	ldrb	r2, [r7, #3]
 8007890:	0151      	lsls	r1, r2, #5
 8007892:	693a      	ldr	r2, [r7, #16]
 8007894:	440a      	add	r2, r1
 8007896:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800789a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800789e:	6053      	str	r3, [r2, #4]
 80078a0:	e0b5      	b.n	8007a0e <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80078a2:	78fa      	ldrb	r2, [r7, #3]
 80078a4:	6879      	ldr	r1, [r7, #4]
 80078a6:	4613      	mov	r3, r2
 80078a8:	011b      	lsls	r3, r3, #4
 80078aa:	1a9b      	subs	r3, r3, r2
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	440b      	add	r3, r1
 80078b0:	334d      	adds	r3, #77	; 0x4d
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	2b05      	cmp	r3, #5
 80078b6:	d114      	bne.n	80078e2 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80078b8:	78fa      	ldrb	r2, [r7, #3]
 80078ba:	6879      	ldr	r1, [r7, #4]
 80078bc:	4613      	mov	r3, r2
 80078be:	011b      	lsls	r3, r3, #4
 80078c0:	1a9b      	subs	r3, r3, r2
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	440b      	add	r3, r1
 80078c6:	334d      	adds	r3, #77	; 0x4d
 80078c8:	2202      	movs	r2, #2
 80078ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80078cc:	78fa      	ldrb	r2, [r7, #3]
 80078ce:	6879      	ldr	r1, [r7, #4]
 80078d0:	4613      	mov	r3, r2
 80078d2:	011b      	lsls	r3, r3, #4
 80078d4:	1a9b      	subs	r3, r3, r2
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	440b      	add	r3, r1
 80078da:	334c      	adds	r3, #76	; 0x4c
 80078dc:	2202      	movs	r2, #2
 80078de:	701a      	strb	r2, [r3, #0]
 80078e0:	e095      	b.n	8007a0e <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80078e2:	78fa      	ldrb	r2, [r7, #3]
 80078e4:	6879      	ldr	r1, [r7, #4]
 80078e6:	4613      	mov	r3, r2
 80078e8:	011b      	lsls	r3, r3, #4
 80078ea:	1a9b      	subs	r3, r3, r2
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	440b      	add	r3, r1
 80078f0:	334d      	adds	r3, #77	; 0x4d
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	2b06      	cmp	r3, #6
 80078f6:	d114      	bne.n	8007922 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80078f8:	78fa      	ldrb	r2, [r7, #3]
 80078fa:	6879      	ldr	r1, [r7, #4]
 80078fc:	4613      	mov	r3, r2
 80078fe:	011b      	lsls	r3, r3, #4
 8007900:	1a9b      	subs	r3, r3, r2
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	440b      	add	r3, r1
 8007906:	334d      	adds	r3, #77	; 0x4d
 8007908:	2202      	movs	r2, #2
 800790a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800790c:	78fa      	ldrb	r2, [r7, #3]
 800790e:	6879      	ldr	r1, [r7, #4]
 8007910:	4613      	mov	r3, r2
 8007912:	011b      	lsls	r3, r3, #4
 8007914:	1a9b      	subs	r3, r3, r2
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	440b      	add	r3, r1
 800791a:	334c      	adds	r3, #76	; 0x4c
 800791c:	2205      	movs	r2, #5
 800791e:	701a      	strb	r2, [r3, #0]
 8007920:	e075      	b.n	8007a0e <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8007922:	78fa      	ldrb	r2, [r7, #3]
 8007924:	6879      	ldr	r1, [r7, #4]
 8007926:	4613      	mov	r3, r2
 8007928:	011b      	lsls	r3, r3, #4
 800792a:	1a9b      	subs	r3, r3, r2
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	440b      	add	r3, r1
 8007930:	334d      	adds	r3, #77	; 0x4d
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	2b07      	cmp	r3, #7
 8007936:	d00a      	beq.n	800794e <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8007938:	78fa      	ldrb	r2, [r7, #3]
 800793a:	6879      	ldr	r1, [r7, #4]
 800793c:	4613      	mov	r3, r2
 800793e:	011b      	lsls	r3, r3, #4
 8007940:	1a9b      	subs	r3, r3, r2
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	440b      	add	r3, r1
 8007946:	334d      	adds	r3, #77	; 0x4d
 8007948:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800794a:	2b09      	cmp	r3, #9
 800794c:	d170      	bne.n	8007a30 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800794e:	78fa      	ldrb	r2, [r7, #3]
 8007950:	6879      	ldr	r1, [r7, #4]
 8007952:	4613      	mov	r3, r2
 8007954:	011b      	lsls	r3, r3, #4
 8007956:	1a9b      	subs	r3, r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	440b      	add	r3, r1
 800795c:	334d      	adds	r3, #77	; 0x4d
 800795e:	2202      	movs	r2, #2
 8007960:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8007962:	78fa      	ldrb	r2, [r7, #3]
 8007964:	6879      	ldr	r1, [r7, #4]
 8007966:	4613      	mov	r3, r2
 8007968:	011b      	lsls	r3, r3, #4
 800796a:	1a9b      	subs	r3, r3, r2
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	440b      	add	r3, r1
 8007970:	3344      	adds	r3, #68	; 0x44
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	1c59      	adds	r1, r3, #1
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	4613      	mov	r3, r2
 800797a:	011b      	lsls	r3, r3, #4
 800797c:	1a9b      	subs	r3, r3, r2
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	4403      	add	r3, r0
 8007982:	3344      	adds	r3, #68	; 0x44
 8007984:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007986:	78fa      	ldrb	r2, [r7, #3]
 8007988:	6879      	ldr	r1, [r7, #4]
 800798a:	4613      	mov	r3, r2
 800798c:	011b      	lsls	r3, r3, #4
 800798e:	1a9b      	subs	r3, r3, r2
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	440b      	add	r3, r1
 8007994:	3344      	adds	r3, #68	; 0x44
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2b02      	cmp	r3, #2
 800799a:	d914      	bls.n	80079c6 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800799c:	78fa      	ldrb	r2, [r7, #3]
 800799e:	6879      	ldr	r1, [r7, #4]
 80079a0:	4613      	mov	r3, r2
 80079a2:	011b      	lsls	r3, r3, #4
 80079a4:	1a9b      	subs	r3, r3, r2
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	440b      	add	r3, r1
 80079aa:	3344      	adds	r3, #68	; 0x44
 80079ac:	2200      	movs	r2, #0
 80079ae:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80079b0:	78fa      	ldrb	r2, [r7, #3]
 80079b2:	6879      	ldr	r1, [r7, #4]
 80079b4:	4613      	mov	r3, r2
 80079b6:	011b      	lsls	r3, r3, #4
 80079b8:	1a9b      	subs	r3, r3, r2
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	440b      	add	r3, r1
 80079be:	334c      	adds	r3, #76	; 0x4c
 80079c0:	2204      	movs	r2, #4
 80079c2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80079c4:	e022      	b.n	8007a0c <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80079c6:	78fa      	ldrb	r2, [r7, #3]
 80079c8:	6879      	ldr	r1, [r7, #4]
 80079ca:	4613      	mov	r3, r2
 80079cc:	011b      	lsls	r3, r3, #4
 80079ce:	1a9b      	subs	r3, r3, r2
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	440b      	add	r3, r1
 80079d4:	334c      	adds	r3, #76	; 0x4c
 80079d6:	2202      	movs	r2, #2
 80079d8:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80079da:	78fb      	ldrb	r3, [r7, #3]
 80079dc:	015a      	lsls	r2, r3, #5
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	4413      	add	r3, r2
 80079e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80079f0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80079f8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80079fa:	78fb      	ldrb	r3, [r7, #3]
 80079fc:	015a      	lsls	r2, r3, #5
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	4413      	add	r3, r2
 8007a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a06:	461a      	mov	r2, r3
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007a0c:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8007a0e:	78fa      	ldrb	r2, [r7, #3]
 8007a10:	6879      	ldr	r1, [r7, #4]
 8007a12:	4613      	mov	r3, r2
 8007a14:	011b      	lsls	r3, r3, #4
 8007a16:	1a9b      	subs	r3, r3, r2
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	440b      	add	r3, r1
 8007a1c:	334c      	adds	r3, #76	; 0x4c
 8007a1e:	781a      	ldrb	r2, [r3, #0]
 8007a20:	78fb      	ldrb	r3, [r7, #3]
 8007a22:	4619      	mov	r1, r3
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f007 f881 	bl	800eb2c <HAL_HCD_HC_NotifyURBChange_Callback>
 8007a2a:	e002      	b.n	8007a32 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8007a2c:	bf00      	nop
 8007a2e:	e000      	b.n	8007a32 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8007a30:	bf00      	nop
  }
}
 8007a32:	3718      	adds	r7, #24
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b08a      	sub	sp, #40	; 0x28
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a48:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	6a1b      	ldr	r3, [r3, #32]
 8007a50:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	f003 030f 	and.w	r3, r3, #15
 8007a58:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	0c5b      	lsrs	r3, r3, #17
 8007a5e:	f003 030f 	and.w	r3, r3, #15
 8007a62:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	091b      	lsrs	r3, r3, #4
 8007a68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a6c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d004      	beq.n	8007a7e <HCD_RXQLVL_IRQHandler+0x46>
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	2b05      	cmp	r3, #5
 8007a78:	f000 80b6 	beq.w	8007be8 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8007a7c:	e0b7      	b.n	8007bee <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	f000 80b3 	beq.w	8007bec <HCD_RXQLVL_IRQHandler+0x1b4>
 8007a86:	6879      	ldr	r1, [r7, #4]
 8007a88:	69ba      	ldr	r2, [r7, #24]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	011b      	lsls	r3, r3, #4
 8007a8e:	1a9b      	subs	r3, r3, r2
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	440b      	add	r3, r1
 8007a94:	332c      	adds	r3, #44	; 0x2c
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 80a7 	beq.w	8007bec <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8007a9e:	6879      	ldr	r1, [r7, #4]
 8007aa0:	69ba      	ldr	r2, [r7, #24]
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	011b      	lsls	r3, r3, #4
 8007aa6:	1a9b      	subs	r3, r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	440b      	add	r3, r1
 8007aac:	3338      	adds	r3, #56	; 0x38
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	18d1      	adds	r1, r2, r3
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	69ba      	ldr	r2, [r7, #24]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	011b      	lsls	r3, r3, #4
 8007abc:	1a9b      	subs	r3, r3, r2
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	4403      	add	r3, r0
 8007ac2:	3334      	adds	r3, #52	; 0x34
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4299      	cmp	r1, r3
 8007ac8:	f200 8083 	bhi.w	8007bd2 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6818      	ldr	r0, [r3, #0]
 8007ad0:	6879      	ldr	r1, [r7, #4]
 8007ad2:	69ba      	ldr	r2, [r7, #24]
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	011b      	lsls	r3, r3, #4
 8007ad8:	1a9b      	subs	r3, r3, r2
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	440b      	add	r3, r1
 8007ade:	332c      	adds	r3, #44	; 0x2c
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	693a      	ldr	r2, [r7, #16]
 8007ae4:	b292      	uxth	r2, r2
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	f004 fd4a 	bl	800c580 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8007aec:	6879      	ldr	r1, [r7, #4]
 8007aee:	69ba      	ldr	r2, [r7, #24]
 8007af0:	4613      	mov	r3, r2
 8007af2:	011b      	lsls	r3, r3, #4
 8007af4:	1a9b      	subs	r3, r3, r2
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	440b      	add	r3, r1
 8007afa:	332c      	adds	r3, #44	; 0x2c
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	18d1      	adds	r1, r2, r3
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	69ba      	ldr	r2, [r7, #24]
 8007b06:	4613      	mov	r3, r2
 8007b08:	011b      	lsls	r3, r3, #4
 8007b0a:	1a9b      	subs	r3, r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	4403      	add	r3, r0
 8007b10:	332c      	adds	r3, #44	; 0x2c
 8007b12:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8007b14:	6879      	ldr	r1, [r7, #4]
 8007b16:	69ba      	ldr	r2, [r7, #24]
 8007b18:	4613      	mov	r3, r2
 8007b1a:	011b      	lsls	r3, r3, #4
 8007b1c:	1a9b      	subs	r3, r3, r2
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	440b      	add	r3, r1
 8007b22:	3338      	adds	r3, #56	; 0x38
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	18d1      	adds	r1, r2, r3
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	69ba      	ldr	r2, [r7, #24]
 8007b2e:	4613      	mov	r3, r2
 8007b30:	011b      	lsls	r3, r3, #4
 8007b32:	1a9b      	subs	r3, r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	4403      	add	r3, r0
 8007b38:	3338      	adds	r3, #56	; 0x38
 8007b3a:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	015a      	lsls	r2, r3, #5
 8007b40:	6a3b      	ldr	r3, [r7, #32]
 8007b42:	4413      	add	r3, r2
 8007b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	0cdb      	lsrs	r3, r3, #19
 8007b4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b50:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8007b52:	6879      	ldr	r1, [r7, #4]
 8007b54:	69ba      	ldr	r2, [r7, #24]
 8007b56:	4613      	mov	r3, r2
 8007b58:	011b      	lsls	r3, r3, #4
 8007b5a:	1a9b      	subs	r3, r3, r2
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	440b      	add	r3, r1
 8007b60:	3328      	adds	r3, #40	; 0x28
 8007b62:	881b      	ldrh	r3, [r3, #0]
 8007b64:	461a      	mov	r2, r3
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d13f      	bne.n	8007bec <HCD_RXQLVL_IRQHandler+0x1b4>
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d03c      	beq.n	8007bec <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	015a      	lsls	r2, r3, #5
 8007b76:	6a3b      	ldr	r3, [r7, #32]
 8007b78:	4413      	add	r3, r2
 8007b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b88:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b90:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	015a      	lsls	r2, r3, #5
 8007b96:	6a3b      	ldr	r3, [r7, #32]
 8007b98:	4413      	add	r3, r2
 8007b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8007ba4:	6879      	ldr	r1, [r7, #4]
 8007ba6:	69ba      	ldr	r2, [r7, #24]
 8007ba8:	4613      	mov	r3, r2
 8007baa:	011b      	lsls	r3, r3, #4
 8007bac:	1a9b      	subs	r3, r3, r2
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	440b      	add	r3, r1
 8007bb2:	333c      	adds	r3, #60	; 0x3c
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	f083 0301 	eor.w	r3, r3, #1
 8007bba:	b2d8      	uxtb	r0, r3
 8007bbc:	6879      	ldr	r1, [r7, #4]
 8007bbe:	69ba      	ldr	r2, [r7, #24]
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	011b      	lsls	r3, r3, #4
 8007bc4:	1a9b      	subs	r3, r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	440b      	add	r3, r1
 8007bca:	333c      	adds	r3, #60	; 0x3c
 8007bcc:	4602      	mov	r2, r0
 8007bce:	701a      	strb	r2, [r3, #0]
      break;
 8007bd0:	e00c      	b.n	8007bec <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8007bd2:	6879      	ldr	r1, [r7, #4]
 8007bd4:	69ba      	ldr	r2, [r7, #24]
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	011b      	lsls	r3, r3, #4
 8007bda:	1a9b      	subs	r3, r3, r2
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	440b      	add	r3, r1
 8007be0:	334c      	adds	r3, #76	; 0x4c
 8007be2:	2204      	movs	r2, #4
 8007be4:	701a      	strb	r2, [r3, #0]
      break;
 8007be6:	e001      	b.n	8007bec <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8007be8:	bf00      	nop
 8007bea:	e000      	b.n	8007bee <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8007bec:	bf00      	nop
  }
}
 8007bee:	bf00      	nop
 8007bf0:	3728      	adds	r7, #40	; 0x28
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b086      	sub	sp, #24
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007c22:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f003 0302 	and.w	r3, r3, #2
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	d10b      	bne.n	8007c46 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f003 0301 	and.w	r3, r3, #1
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d102      	bne.n	8007c3e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f006 ff5b 	bl	800eaf4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	f043 0302 	orr.w	r3, r3, #2
 8007c44:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f003 0308 	and.w	r3, r3, #8
 8007c4c:	2b08      	cmp	r3, #8
 8007c4e:	d132      	bne.n	8007cb6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	f043 0308 	orr.w	r3, r3, #8
 8007c56:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f003 0304 	and.w	r3, r3, #4
 8007c5e:	2b04      	cmp	r3, #4
 8007c60:	d126      	bne.n	8007cb0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	7a5b      	ldrb	r3, [r3, #9]
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d113      	bne.n	8007c92 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007c70:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007c74:	d106      	bne.n	8007c84 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2102      	movs	r1, #2
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f004 fd19 	bl	800c6b4 <USB_InitFSLSPClkSel>
 8007c82:	e011      	b.n	8007ca8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2101      	movs	r1, #1
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f004 fd12 	bl	800c6b4 <USB_InitFSLSPClkSel>
 8007c90:	e00a      	b.n	8007ca8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	79db      	ldrb	r3, [r3, #7]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d106      	bne.n	8007ca8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8007ca6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f006 ff4d 	bl	800eb48 <HAL_HCD_PortEnabled_Callback>
 8007cae:	e002      	b.n	8007cb6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f006 ff57 	bl	800eb64 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f003 0320 	and.w	r3, r3, #32
 8007cbc:	2b20      	cmp	r3, #32
 8007cbe:	d103      	bne.n	8007cc8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	f043 0320 	orr.w	r3, r3, #32
 8007cc6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007cce:	461a      	mov	r2, r3
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	6013      	str	r3, [r2, #0]
}
 8007cd4:	bf00      	nop
 8007cd6:	3718      	adds	r7, #24
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d101      	bne.n	8007cee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e12b      	b.n	8007f46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d106      	bne.n	8007d08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f7f9 f952 	bl	8000fac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2224      	movs	r2, #36	; 0x24
 8007d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f022 0201 	bic.w	r2, r2, #1
 8007d1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007d40:	f002 fa52 	bl	800a1e8 <HAL_RCC_GetPCLK1Freq>
 8007d44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	4a81      	ldr	r2, [pc, #516]	; (8007f50 <HAL_I2C_Init+0x274>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d807      	bhi.n	8007d60 <HAL_I2C_Init+0x84>
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	4a80      	ldr	r2, [pc, #512]	; (8007f54 <HAL_I2C_Init+0x278>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	bf94      	ite	ls
 8007d58:	2301      	movls	r3, #1
 8007d5a:	2300      	movhi	r3, #0
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	e006      	b.n	8007d6e <HAL_I2C_Init+0x92>
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	4a7d      	ldr	r2, [pc, #500]	; (8007f58 <HAL_I2C_Init+0x27c>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	bf94      	ite	ls
 8007d68:	2301      	movls	r3, #1
 8007d6a:	2300      	movhi	r3, #0
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d001      	beq.n	8007d76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e0e7      	b.n	8007f46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	4a78      	ldr	r2, [pc, #480]	; (8007f5c <HAL_I2C_Init+0x280>)
 8007d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d7e:	0c9b      	lsrs	r3, r3, #18
 8007d80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	68ba      	ldr	r2, [r7, #8]
 8007d92:	430a      	orrs	r2, r1
 8007d94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	6a1b      	ldr	r3, [r3, #32]
 8007d9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	4a6a      	ldr	r2, [pc, #424]	; (8007f50 <HAL_I2C_Init+0x274>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d802      	bhi.n	8007db0 <HAL_I2C_Init+0xd4>
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	3301      	adds	r3, #1
 8007dae:	e009      	b.n	8007dc4 <HAL_I2C_Init+0xe8>
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007db6:	fb02 f303 	mul.w	r3, r2, r3
 8007dba:	4a69      	ldr	r2, [pc, #420]	; (8007f60 <HAL_I2C_Init+0x284>)
 8007dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8007dc0:	099b      	lsrs	r3, r3, #6
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	6812      	ldr	r2, [r2, #0]
 8007dc8:	430b      	orrs	r3, r1
 8007dca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	69db      	ldr	r3, [r3, #28]
 8007dd2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007dd6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	495c      	ldr	r1, [pc, #368]	; (8007f50 <HAL_I2C_Init+0x274>)
 8007de0:	428b      	cmp	r3, r1
 8007de2:	d819      	bhi.n	8007e18 <HAL_I2C_Init+0x13c>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	1e59      	subs	r1, r3, #1
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	005b      	lsls	r3, r3, #1
 8007dee:	fbb1 f3f3 	udiv	r3, r1, r3
 8007df2:	1c59      	adds	r1, r3, #1
 8007df4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007df8:	400b      	ands	r3, r1
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00a      	beq.n	8007e14 <HAL_I2C_Init+0x138>
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	1e59      	subs	r1, r3, #1
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	005b      	lsls	r3, r3, #1
 8007e08:	fbb1 f3f3 	udiv	r3, r1, r3
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e12:	e051      	b.n	8007eb8 <HAL_I2C_Init+0x1dc>
 8007e14:	2304      	movs	r3, #4
 8007e16:	e04f      	b.n	8007eb8 <HAL_I2C_Init+0x1dc>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d111      	bne.n	8007e44 <HAL_I2C_Init+0x168>
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	1e58      	subs	r0, r3, #1
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6859      	ldr	r1, [r3, #4]
 8007e28:	460b      	mov	r3, r1
 8007e2a:	005b      	lsls	r3, r3, #1
 8007e2c:	440b      	add	r3, r1
 8007e2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e32:	3301      	adds	r3, #1
 8007e34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	bf0c      	ite	eq
 8007e3c:	2301      	moveq	r3, #1
 8007e3e:	2300      	movne	r3, #0
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	e012      	b.n	8007e6a <HAL_I2C_Init+0x18e>
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	1e58      	subs	r0, r3, #1
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6859      	ldr	r1, [r3, #4]
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	440b      	add	r3, r1
 8007e52:	0099      	lsls	r1, r3, #2
 8007e54:	440b      	add	r3, r1
 8007e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	bf0c      	ite	eq
 8007e64:	2301      	moveq	r3, #1
 8007e66:	2300      	movne	r3, #0
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d001      	beq.n	8007e72 <HAL_I2C_Init+0x196>
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e022      	b.n	8007eb8 <HAL_I2C_Init+0x1dc>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d10e      	bne.n	8007e98 <HAL_I2C_Init+0x1bc>
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	1e58      	subs	r0, r3, #1
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6859      	ldr	r1, [r3, #4]
 8007e82:	460b      	mov	r3, r1
 8007e84:	005b      	lsls	r3, r3, #1
 8007e86:	440b      	add	r3, r1
 8007e88:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e96:	e00f      	b.n	8007eb8 <HAL_I2C_Init+0x1dc>
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	1e58      	subs	r0, r3, #1
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6859      	ldr	r1, [r3, #4]
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	440b      	add	r3, r1
 8007ea6:	0099      	lsls	r1, r3, #2
 8007ea8:	440b      	add	r3, r1
 8007eaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8007eae:	3301      	adds	r3, #1
 8007eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007eb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007eb8:	6879      	ldr	r1, [r7, #4]
 8007eba:	6809      	ldr	r1, [r1, #0]
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	69da      	ldr	r2, [r3, #28]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a1b      	ldr	r3, [r3, #32]
 8007ed2:	431a      	orrs	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	430a      	orrs	r2, r1
 8007eda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007ee6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	6911      	ldr	r1, [r2, #16]
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	68d2      	ldr	r2, [r2, #12]
 8007ef2:	4311      	orrs	r1, r2
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	6812      	ldr	r2, [r2, #0]
 8007ef8:	430b      	orrs	r3, r1
 8007efa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	695a      	ldr	r2, [r3, #20]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	431a      	orrs	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	430a      	orrs	r2, r1
 8007f16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f042 0201 	orr.w	r2, r2, #1
 8007f26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2220      	movs	r2, #32
 8007f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	000186a0 	.word	0x000186a0
 8007f54:	001e847f 	.word	0x001e847f
 8007f58:	003d08ff 	.word	0x003d08ff
 8007f5c:	431bde83 	.word	0x431bde83
 8007f60:	10624dd3 	.word	0x10624dd3

08007f64 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d101      	bne.n	8007f76 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	e021      	b.n	8007fba <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2224      	movs	r2, #36	; 0x24
 8007f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f022 0201 	bic.w	r2, r2, #1
 8007f8c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f7f9 f876 	bl	8001080 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3708      	adds	r7, #8
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
	...

08007fc4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b088      	sub	sp, #32
 8007fc8:	af02      	add	r7, sp, #8
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	607a      	str	r2, [r7, #4]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	817b      	strh	r3, [r7, #10]
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007fd8:	f7fc fcba 	bl	8004950 <HAL_GetTick>
 8007fdc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	2b20      	cmp	r3, #32
 8007fe8:	f040 80e0 	bne.w	80081ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	9300      	str	r3, [sp, #0]
 8007ff0:	2319      	movs	r3, #25
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	4970      	ldr	r1, [pc, #448]	; (80081b8 <HAL_I2C_Master_Transmit+0x1f4>)
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	f000 fe1c 	bl	8008c34 <I2C_WaitOnFlagUntilTimeout>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d001      	beq.n	8008006 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008002:	2302      	movs	r3, #2
 8008004:	e0d3      	b.n	80081ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800800c:	2b01      	cmp	r3, #1
 800800e:	d101      	bne.n	8008014 <HAL_I2C_Master_Transmit+0x50>
 8008010:	2302      	movs	r3, #2
 8008012:	e0cc      	b.n	80081ae <HAL_I2C_Master_Transmit+0x1ea>
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2201      	movs	r2, #1
 8008018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 0301 	and.w	r3, r3, #1
 8008026:	2b01      	cmp	r3, #1
 8008028:	d007      	beq.n	800803a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f042 0201 	orr.w	r2, r2, #1
 8008038:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008048:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2221      	movs	r2, #33	; 0x21
 800804e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2210      	movs	r2, #16
 8008056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2200      	movs	r2, #0
 800805e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	893a      	ldrh	r2, [r7, #8]
 800806a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008070:	b29a      	uxth	r2, r3
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	4a50      	ldr	r2, [pc, #320]	; (80081bc <HAL_I2C_Master_Transmit+0x1f8>)
 800807a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800807c:	8979      	ldrh	r1, [r7, #10]
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	6a3a      	ldr	r2, [r7, #32]
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f000 fbd6 	bl	8008834 <I2C_MasterRequestWrite>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d001      	beq.n	8008092 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	e08d      	b.n	80081ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008092:	2300      	movs	r3, #0
 8008094:	613b      	str	r3, [r7, #16]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	695b      	ldr	r3, [r3, #20]
 800809c:	613b      	str	r3, [r7, #16]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	699b      	ldr	r3, [r3, #24]
 80080a4:	613b      	str	r3, [r7, #16]
 80080a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80080a8:	e066      	b.n	8008178 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080aa:	697a      	ldr	r2, [r7, #20]
 80080ac:	6a39      	ldr	r1, [r7, #32]
 80080ae:	68f8      	ldr	r0, [r7, #12]
 80080b0:	f000 feda 	bl	8008e68 <I2C_WaitOnTXEFlagUntilTimeout>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00d      	beq.n	80080d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080be:	2b04      	cmp	r3, #4
 80080c0:	d107      	bne.n	80080d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	e06b      	b.n	80081ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080da:	781a      	ldrb	r2, [r3, #0]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e6:	1c5a      	adds	r2, r3, #1
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	3b01      	subs	r3, #1
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080fe:	3b01      	subs	r3, #1
 8008100:	b29a      	uxth	r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	695b      	ldr	r3, [r3, #20]
 800810c:	f003 0304 	and.w	r3, r3, #4
 8008110:	2b04      	cmp	r3, #4
 8008112:	d11b      	bne.n	800814c <HAL_I2C_Master_Transmit+0x188>
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008118:	2b00      	cmp	r3, #0
 800811a:	d017      	beq.n	800814c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008120:	781a      	ldrb	r2, [r3, #0]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812c:	1c5a      	adds	r2, r3, #1
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008136:	b29b      	uxth	r3, r3
 8008138:	3b01      	subs	r3, #1
 800813a:	b29a      	uxth	r2, r3
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008144:	3b01      	subs	r3, #1
 8008146:	b29a      	uxth	r2, r3
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800814c:	697a      	ldr	r2, [r7, #20]
 800814e:	6a39      	ldr	r1, [r7, #32]
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	f000 fed1 	bl	8008ef8 <I2C_WaitOnBTFFlagUntilTimeout>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00d      	beq.n	8008178 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008160:	2b04      	cmp	r3, #4
 8008162:	d107      	bne.n	8008174 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008172:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008174:	2301      	movs	r3, #1
 8008176:	e01a      	b.n	80081ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800817c:	2b00      	cmp	r3, #0
 800817e:	d194      	bne.n	80080aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800818e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2220      	movs	r2, #32
 8008194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2200      	movs	r2, #0
 800819c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80081a8:	2300      	movs	r3, #0
 80081aa:	e000      	b.n	80081ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80081ac:	2302      	movs	r3, #2
  }
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3718      	adds	r7, #24
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	00100002 	.word	0x00100002
 80081bc:	ffff0000 	.word	0xffff0000

080081c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b088      	sub	sp, #32
 80081c4:	af02      	add	r7, sp, #8
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	4608      	mov	r0, r1
 80081ca:	4611      	mov	r1, r2
 80081cc:	461a      	mov	r2, r3
 80081ce:	4603      	mov	r3, r0
 80081d0:	817b      	strh	r3, [r7, #10]
 80081d2:	460b      	mov	r3, r1
 80081d4:	813b      	strh	r3, [r7, #8]
 80081d6:	4613      	mov	r3, r2
 80081d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80081da:	f7fc fbb9 	bl	8004950 <HAL_GetTick>
 80081de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	2b20      	cmp	r3, #32
 80081ea:	f040 80d9 	bne.w	80083a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	9300      	str	r3, [sp, #0]
 80081f2:	2319      	movs	r3, #25
 80081f4:	2201      	movs	r2, #1
 80081f6:	496d      	ldr	r1, [pc, #436]	; (80083ac <HAL_I2C_Mem_Write+0x1ec>)
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f000 fd1b 	bl	8008c34 <I2C_WaitOnFlagUntilTimeout>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d001      	beq.n	8008208 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008204:	2302      	movs	r3, #2
 8008206:	e0cc      	b.n	80083a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800820e:	2b01      	cmp	r3, #1
 8008210:	d101      	bne.n	8008216 <HAL_I2C_Mem_Write+0x56>
 8008212:	2302      	movs	r3, #2
 8008214:	e0c5      	b.n	80083a2 <HAL_I2C_Mem_Write+0x1e2>
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2201      	movs	r2, #1
 800821a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f003 0301 	and.w	r3, r3, #1
 8008228:	2b01      	cmp	r3, #1
 800822a:	d007      	beq.n	800823c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f042 0201 	orr.w	r2, r2, #1
 800823a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800824a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2221      	movs	r2, #33	; 0x21
 8008250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2240      	movs	r2, #64	; 0x40
 8008258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2200      	movs	r2, #0
 8008260:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6a3a      	ldr	r2, [r7, #32]
 8008266:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800826c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008272:	b29a      	uxth	r2, r3
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	4a4d      	ldr	r2, [pc, #308]	; (80083b0 <HAL_I2C_Mem_Write+0x1f0>)
 800827c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800827e:	88f8      	ldrh	r0, [r7, #6]
 8008280:	893a      	ldrh	r2, [r7, #8]
 8008282:	8979      	ldrh	r1, [r7, #10]
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	9301      	str	r3, [sp, #4]
 8008288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828a:	9300      	str	r3, [sp, #0]
 800828c:	4603      	mov	r3, r0
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	f000 fb52 	bl	8008938 <I2C_RequestMemoryWrite>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d052      	beq.n	8008340 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	e081      	b.n	80083a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800829e:	697a      	ldr	r2, [r7, #20]
 80082a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f000 fde0 	bl	8008e68 <I2C_WaitOnTXEFlagUntilTimeout>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00d      	beq.n	80082ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b2:	2b04      	cmp	r3, #4
 80082b4:	d107      	bne.n	80082c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	e06b      	b.n	80083a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ce:	781a      	ldrb	r2, [r3, #0]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082da:	1c5a      	adds	r2, r3, #1
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082e4:	3b01      	subs	r3, #1
 80082e6:	b29a      	uxth	r2, r3
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	3b01      	subs	r3, #1
 80082f4:	b29a      	uxth	r2, r3
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	695b      	ldr	r3, [r3, #20]
 8008300:	f003 0304 	and.w	r3, r3, #4
 8008304:	2b04      	cmp	r3, #4
 8008306:	d11b      	bne.n	8008340 <HAL_I2C_Mem_Write+0x180>
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800830c:	2b00      	cmp	r3, #0
 800830e:	d017      	beq.n	8008340 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008314:	781a      	ldrb	r2, [r3, #0]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008320:	1c5a      	adds	r2, r3, #1
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800832a:	3b01      	subs	r3, #1
 800832c:	b29a      	uxth	r2, r3
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008336:	b29b      	uxth	r3, r3
 8008338:	3b01      	subs	r3, #1
 800833a:	b29a      	uxth	r2, r3
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008344:	2b00      	cmp	r3, #0
 8008346:	d1aa      	bne.n	800829e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008348:	697a      	ldr	r2, [r7, #20]
 800834a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	f000 fdd3 	bl	8008ef8 <I2C_WaitOnBTFFlagUntilTimeout>
 8008352:	4603      	mov	r3, r0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00d      	beq.n	8008374 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835c:	2b04      	cmp	r3, #4
 800835e:	d107      	bne.n	8008370 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800836e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	e016      	b.n	80083a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008382:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2220      	movs	r2, #32
 8008388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2200      	movs	r2, #0
 8008390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2200      	movs	r2, #0
 8008398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800839c:	2300      	movs	r3, #0
 800839e:	e000      	b.n	80083a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80083a0:	2302      	movs	r3, #2
  }
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3718      	adds	r7, #24
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	00100002 	.word	0x00100002
 80083b0:	ffff0000 	.word	0xffff0000

080083b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b08c      	sub	sp, #48	; 0x30
 80083b8:	af02      	add	r7, sp, #8
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	4608      	mov	r0, r1
 80083be:	4611      	mov	r1, r2
 80083c0:	461a      	mov	r2, r3
 80083c2:	4603      	mov	r3, r0
 80083c4:	817b      	strh	r3, [r7, #10]
 80083c6:	460b      	mov	r3, r1
 80083c8:	813b      	strh	r3, [r7, #8]
 80083ca:	4613      	mov	r3, r2
 80083cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80083ce:	f7fc fabf 	bl	8004950 <HAL_GetTick>
 80083d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	2b20      	cmp	r3, #32
 80083de:	f040 8214 	bne.w	800880a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80083e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e4:	9300      	str	r3, [sp, #0]
 80083e6:	2319      	movs	r3, #25
 80083e8:	2201      	movs	r2, #1
 80083ea:	497b      	ldr	r1, [pc, #492]	; (80085d8 <HAL_I2C_Mem_Read+0x224>)
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	f000 fc21 	bl	8008c34 <I2C_WaitOnFlagUntilTimeout>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d001      	beq.n	80083fc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80083f8:	2302      	movs	r3, #2
 80083fa:	e207      	b.n	800880c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008402:	2b01      	cmp	r3, #1
 8008404:	d101      	bne.n	800840a <HAL_I2C_Mem_Read+0x56>
 8008406:	2302      	movs	r3, #2
 8008408:	e200      	b.n	800880c <HAL_I2C_Mem_Read+0x458>
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2201      	movs	r2, #1
 800840e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f003 0301 	and.w	r3, r3, #1
 800841c:	2b01      	cmp	r3, #1
 800841e:	d007      	beq.n	8008430 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f042 0201 	orr.w	r2, r2, #1
 800842e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800843e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2222      	movs	r2, #34	; 0x22
 8008444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2240      	movs	r2, #64	; 0x40
 800844c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2200      	movs	r2, #0
 8008454:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800845a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008460:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008466:	b29a      	uxth	r2, r3
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	4a5b      	ldr	r2, [pc, #364]	; (80085dc <HAL_I2C_Mem_Read+0x228>)
 8008470:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008472:	88f8      	ldrh	r0, [r7, #6]
 8008474:	893a      	ldrh	r2, [r7, #8]
 8008476:	8979      	ldrh	r1, [r7, #10]
 8008478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847a:	9301      	str	r3, [sp, #4]
 800847c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847e:	9300      	str	r3, [sp, #0]
 8008480:	4603      	mov	r3, r0
 8008482:	68f8      	ldr	r0, [r7, #12]
 8008484:	f000 faee 	bl	8008a64 <I2C_RequestMemoryRead>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d001      	beq.n	8008492 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	e1bc      	b.n	800880c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008496:	2b00      	cmp	r3, #0
 8008498:	d113      	bne.n	80084c2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800849a:	2300      	movs	r3, #0
 800849c:	623b      	str	r3, [r7, #32]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	695b      	ldr	r3, [r3, #20]
 80084a4:	623b      	str	r3, [r7, #32]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	699b      	ldr	r3, [r3, #24]
 80084ac:	623b      	str	r3, [r7, #32]
 80084ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084be:	601a      	str	r2, [r3, #0]
 80084c0:	e190      	b.n	80087e4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d11b      	bne.n	8008502 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084da:	2300      	movs	r3, #0
 80084dc:	61fb      	str	r3, [r7, #28]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	695b      	ldr	r3, [r3, #20]
 80084e4:	61fb      	str	r3, [r7, #28]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	699b      	ldr	r3, [r3, #24]
 80084ec:	61fb      	str	r3, [r7, #28]
 80084ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084fe:	601a      	str	r2, [r3, #0]
 8008500:	e170      	b.n	80087e4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008506:	2b02      	cmp	r3, #2
 8008508:	d11b      	bne.n	8008542 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008518:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008528:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800852a:	2300      	movs	r3, #0
 800852c:	61bb      	str	r3, [r7, #24]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	695b      	ldr	r3, [r3, #20]
 8008534:	61bb      	str	r3, [r7, #24]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	699b      	ldr	r3, [r3, #24]
 800853c:	61bb      	str	r3, [r7, #24]
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	e150      	b.n	80087e4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008542:	2300      	movs	r3, #0
 8008544:	617b      	str	r3, [r7, #20]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	695b      	ldr	r3, [r3, #20]
 800854c:	617b      	str	r3, [r7, #20]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	699b      	ldr	r3, [r3, #24]
 8008554:	617b      	str	r3, [r7, #20]
 8008556:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008558:	e144      	b.n	80087e4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800855e:	2b03      	cmp	r3, #3
 8008560:	f200 80f1 	bhi.w	8008746 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008568:	2b01      	cmp	r3, #1
 800856a:	d123      	bne.n	80085b4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800856c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800856e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008570:	68f8      	ldr	r0, [r7, #12]
 8008572:	f000 fd09 	bl	8008f88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d001      	beq.n	8008580 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	e145      	b.n	800880c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	691a      	ldr	r2, [r3, #16]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858a:	b2d2      	uxtb	r2, r2
 800858c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008592:	1c5a      	adds	r2, r3, #1
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800859c:	3b01      	subs	r3, #1
 800859e:	b29a      	uxth	r2, r3
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	3b01      	subs	r3, #1
 80085ac:	b29a      	uxth	r2, r3
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80085b2:	e117      	b.n	80087e4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d14e      	bne.n	800865a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80085bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085be:	9300      	str	r3, [sp, #0]
 80085c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c2:	2200      	movs	r2, #0
 80085c4:	4906      	ldr	r1, [pc, #24]	; (80085e0 <HAL_I2C_Mem_Read+0x22c>)
 80085c6:	68f8      	ldr	r0, [r7, #12]
 80085c8:	f000 fb34 	bl	8008c34 <I2C_WaitOnFlagUntilTimeout>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d008      	beq.n	80085e4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	e11a      	b.n	800880c <HAL_I2C_Mem_Read+0x458>
 80085d6:	bf00      	nop
 80085d8:	00100002 	.word	0x00100002
 80085dc:	ffff0000 	.word	0xffff0000
 80085e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	691a      	ldr	r2, [r3, #16]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fe:	b2d2      	uxtb	r2, r2
 8008600:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008606:	1c5a      	adds	r2, r3, #1
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008610:	3b01      	subs	r3, #1
 8008612:	b29a      	uxth	r2, r3
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800861c:	b29b      	uxth	r3, r3
 800861e:	3b01      	subs	r3, #1
 8008620:	b29a      	uxth	r2, r3
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	691a      	ldr	r2, [r3, #16]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008630:	b2d2      	uxtb	r2, r2
 8008632:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008638:	1c5a      	adds	r2, r3, #1
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008642:	3b01      	subs	r3, #1
 8008644:	b29a      	uxth	r2, r3
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800864e:	b29b      	uxth	r3, r3
 8008650:	3b01      	subs	r3, #1
 8008652:	b29a      	uxth	r2, r3
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008658:	e0c4      	b.n	80087e4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800865a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865c:	9300      	str	r3, [sp, #0]
 800865e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008660:	2200      	movs	r2, #0
 8008662:	496c      	ldr	r1, [pc, #432]	; (8008814 <HAL_I2C_Mem_Read+0x460>)
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	f000 fae5 	bl	8008c34 <I2C_WaitOnFlagUntilTimeout>
 800866a:	4603      	mov	r3, r0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d001      	beq.n	8008674 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	e0cb      	b.n	800880c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008682:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	691a      	ldr	r2, [r3, #16]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868e:	b2d2      	uxtb	r2, r2
 8008690:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008696:	1c5a      	adds	r2, r3, #1
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086a0:	3b01      	subs	r3, #1
 80086a2:	b29a      	uxth	r2, r3
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	3b01      	subs	r3, #1
 80086b0:	b29a      	uxth	r2, r3
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80086b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b8:	9300      	str	r3, [sp, #0]
 80086ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086bc:	2200      	movs	r2, #0
 80086be:	4955      	ldr	r1, [pc, #340]	; (8008814 <HAL_I2C_Mem_Read+0x460>)
 80086c0:	68f8      	ldr	r0, [r7, #12]
 80086c2:	f000 fab7 	bl	8008c34 <I2C_WaitOnFlagUntilTimeout>
 80086c6:	4603      	mov	r3, r0
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d001      	beq.n	80086d0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	e09d      	b.n	800880c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	691a      	ldr	r2, [r3, #16]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ea:	b2d2      	uxtb	r2, r2
 80086ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f2:	1c5a      	adds	r2, r3, #1
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086fc:	3b01      	subs	r3, #1
 80086fe:	b29a      	uxth	r2, r3
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008708:	b29b      	uxth	r3, r3
 800870a:	3b01      	subs	r3, #1
 800870c:	b29a      	uxth	r2, r3
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	691a      	ldr	r2, [r3, #16]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871c:	b2d2      	uxtb	r2, r2
 800871e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008724:	1c5a      	adds	r2, r3, #1
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800872e:	3b01      	subs	r3, #1
 8008730:	b29a      	uxth	r2, r3
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800873a:	b29b      	uxth	r3, r3
 800873c:	3b01      	subs	r3, #1
 800873e:	b29a      	uxth	r2, r3
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008744:	e04e      	b.n	80087e4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008748:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800874a:	68f8      	ldr	r0, [r7, #12]
 800874c:	f000 fc1c 	bl	8008f88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008750:	4603      	mov	r3, r0
 8008752:	2b00      	cmp	r3, #0
 8008754:	d001      	beq.n	800875a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	e058      	b.n	800880c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	691a      	ldr	r2, [r3, #16]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008764:	b2d2      	uxtb	r2, r2
 8008766:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876c:	1c5a      	adds	r2, r3, #1
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008776:	3b01      	subs	r3, #1
 8008778:	b29a      	uxth	r2, r3
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008782:	b29b      	uxth	r3, r3
 8008784:	3b01      	subs	r3, #1
 8008786:	b29a      	uxth	r2, r3
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	695b      	ldr	r3, [r3, #20]
 8008792:	f003 0304 	and.w	r3, r3, #4
 8008796:	2b04      	cmp	r3, #4
 8008798:	d124      	bne.n	80087e4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800879e:	2b03      	cmp	r3, #3
 80087a0:	d107      	bne.n	80087b2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087b0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	691a      	ldr	r2, [r3, #16]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087bc:	b2d2      	uxtb	r2, r2
 80087be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c4:	1c5a      	adds	r2, r3, #1
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087ce:	3b01      	subs	r3, #1
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087da:	b29b      	uxth	r3, r3
 80087dc:	3b01      	subs	r3, #1
 80087de:	b29a      	uxth	r2, r3
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	f47f aeb6 	bne.w	800855a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2220      	movs	r2, #32
 80087f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2200      	movs	r2, #0
 80087fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2200      	movs	r2, #0
 8008802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008806:	2300      	movs	r3, #0
 8008808:	e000      	b.n	800880c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800880a:	2302      	movs	r3, #2
  }
}
 800880c:	4618      	mov	r0, r3
 800880e:	3728      	adds	r7, #40	; 0x28
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}
 8008814:	00010004 	.word	0x00010004

08008818 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008826:	b2db      	uxtb	r3, r3
}
 8008828:	4618      	mov	r0, r3
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b088      	sub	sp, #32
 8008838:	af02      	add	r7, sp, #8
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	607a      	str	r2, [r7, #4]
 800883e:	603b      	str	r3, [r7, #0]
 8008840:	460b      	mov	r3, r1
 8008842:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008848:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	2b08      	cmp	r3, #8
 800884e:	d006      	beq.n	800885e <I2C_MasterRequestWrite+0x2a>
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	2b01      	cmp	r3, #1
 8008854:	d003      	beq.n	800885e <I2C_MasterRequestWrite+0x2a>
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800885c:	d108      	bne.n	8008870 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800886c:	601a      	str	r2, [r3, #0]
 800886e:	e00b      	b.n	8008888 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008874:	2b12      	cmp	r3, #18
 8008876:	d107      	bne.n	8008888 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008886:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	9300      	str	r3, [sp, #0]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f000 f9cd 	bl	8008c34 <I2C_WaitOnFlagUntilTimeout>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d00d      	beq.n	80088bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088ae:	d103      	bne.n	80088b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80088b8:	2303      	movs	r3, #3
 80088ba:	e035      	b.n	8008928 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	691b      	ldr	r3, [r3, #16]
 80088c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80088c4:	d108      	bne.n	80088d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80088c6:	897b      	ldrh	r3, [r7, #10]
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	461a      	mov	r2, r3
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80088d4:	611a      	str	r2, [r3, #16]
 80088d6:	e01b      	b.n	8008910 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80088d8:	897b      	ldrh	r3, [r7, #10]
 80088da:	11db      	asrs	r3, r3, #7
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	f003 0306 	and.w	r3, r3, #6
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	f063 030f 	orn	r3, r3, #15
 80088e8:	b2da      	uxtb	r2, r3
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	490e      	ldr	r1, [pc, #56]	; (8008930 <I2C_MasterRequestWrite+0xfc>)
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	f000 fa16 	bl	8008d28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d001      	beq.n	8008906 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	e010      	b.n	8008928 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008906:	897b      	ldrh	r3, [r7, #10]
 8008908:	b2da      	uxtb	r2, r3
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	4907      	ldr	r1, [pc, #28]	; (8008934 <I2C_MasterRequestWrite+0x100>)
 8008916:	68f8      	ldr	r0, [r7, #12]
 8008918:	f000 fa06 	bl	8008d28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800891c:	4603      	mov	r3, r0
 800891e:	2b00      	cmp	r3, #0
 8008920:	d001      	beq.n	8008926 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	e000      	b.n	8008928 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008926:	2300      	movs	r3, #0
}
 8008928:	4618      	mov	r0, r3
 800892a:	3718      	adds	r7, #24
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}
 8008930:	00010008 	.word	0x00010008
 8008934:	00010002 	.word	0x00010002

08008938 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b088      	sub	sp, #32
 800893c:	af02      	add	r7, sp, #8
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	4608      	mov	r0, r1
 8008942:	4611      	mov	r1, r2
 8008944:	461a      	mov	r2, r3
 8008946:	4603      	mov	r3, r0
 8008948:	817b      	strh	r3, [r7, #10]
 800894a:	460b      	mov	r3, r1
 800894c:	813b      	strh	r3, [r7, #8]
 800894e:	4613      	mov	r3, r2
 8008950:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008960:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008964:	9300      	str	r3, [sp, #0]
 8008966:	6a3b      	ldr	r3, [r7, #32]
 8008968:	2200      	movs	r2, #0
 800896a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800896e:	68f8      	ldr	r0, [r7, #12]
 8008970:	f000 f960 	bl	8008c34 <I2C_WaitOnFlagUntilTimeout>
 8008974:	4603      	mov	r3, r0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00d      	beq.n	8008996 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008988:	d103      	bne.n	8008992 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008990:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008992:	2303      	movs	r3, #3
 8008994:	e05f      	b.n	8008a56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008996:	897b      	ldrh	r3, [r7, #10]
 8008998:	b2db      	uxtb	r3, r3
 800899a:	461a      	mov	r2, r3
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80089a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80089a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a8:	6a3a      	ldr	r2, [r7, #32]
 80089aa:	492d      	ldr	r1, [pc, #180]	; (8008a60 <I2C_RequestMemoryWrite+0x128>)
 80089ac:	68f8      	ldr	r0, [r7, #12]
 80089ae:	f000 f9bb 	bl	8008d28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d001      	beq.n	80089bc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	e04c      	b.n	8008a56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089bc:	2300      	movs	r3, #0
 80089be:	617b      	str	r3, [r7, #20]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	695b      	ldr	r3, [r3, #20]
 80089c6:	617b      	str	r3, [r7, #20]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	699b      	ldr	r3, [r3, #24]
 80089ce:	617b      	str	r3, [r7, #20]
 80089d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80089d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089d4:	6a39      	ldr	r1, [r7, #32]
 80089d6:	68f8      	ldr	r0, [r7, #12]
 80089d8:	f000 fa46 	bl	8008e68 <I2C_WaitOnTXEFlagUntilTimeout>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d00d      	beq.n	80089fe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e6:	2b04      	cmp	r3, #4
 80089e8:	d107      	bne.n	80089fa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80089fa:	2301      	movs	r3, #1
 80089fc:	e02b      	b.n	8008a56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80089fe:	88fb      	ldrh	r3, [r7, #6]
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d105      	bne.n	8008a10 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008a04:	893b      	ldrh	r3, [r7, #8]
 8008a06:	b2da      	uxtb	r2, r3
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	611a      	str	r2, [r3, #16]
 8008a0e:	e021      	b.n	8008a54 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008a10:	893b      	ldrh	r3, [r7, #8]
 8008a12:	0a1b      	lsrs	r3, r3, #8
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	b2da      	uxtb	r2, r3
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a20:	6a39      	ldr	r1, [r7, #32]
 8008a22:	68f8      	ldr	r0, [r7, #12]
 8008a24:	f000 fa20 	bl	8008e68 <I2C_WaitOnTXEFlagUntilTimeout>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d00d      	beq.n	8008a4a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a32:	2b04      	cmp	r3, #4
 8008a34:	d107      	bne.n	8008a46 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	e005      	b.n	8008a56 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008a4a:	893b      	ldrh	r3, [r7, #8]
 8008a4c:	b2da      	uxtb	r2, r3
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008a54:	2300      	movs	r3, #0
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3718      	adds	r7, #24
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	00010002 	.word	0x00010002

08008a64 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b088      	sub	sp, #32
 8008a68:	af02      	add	r7, sp, #8
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	4608      	mov	r0, r1
 8008a6e:	4611      	mov	r1, r2
 8008a70:	461a      	mov	r2, r3
 8008a72:	4603      	mov	r3, r0
 8008a74:	817b      	strh	r3, [r7, #10]
 8008a76:	460b      	mov	r3, r1
 8008a78:	813b      	strh	r3, [r7, #8]
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a8c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa0:	9300      	str	r3, [sp, #0]
 8008aa2:	6a3b      	ldr	r3, [r7, #32]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008aaa:	68f8      	ldr	r0, [r7, #12]
 8008aac:	f000 f8c2 	bl	8008c34 <I2C_WaitOnFlagUntilTimeout>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d00d      	beq.n	8008ad2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ac4:	d103      	bne.n	8008ace <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008acc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	e0aa      	b.n	8008c28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008ad2:	897b      	ldrh	r3, [r7, #10]
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008ae0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae4:	6a3a      	ldr	r2, [r7, #32]
 8008ae6:	4952      	ldr	r1, [pc, #328]	; (8008c30 <I2C_RequestMemoryRead+0x1cc>)
 8008ae8:	68f8      	ldr	r0, [r7, #12]
 8008aea:	f000 f91d 	bl	8008d28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008aee:	4603      	mov	r3, r0
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d001      	beq.n	8008af8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008af4:	2301      	movs	r3, #1
 8008af6:	e097      	b.n	8008c28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008af8:	2300      	movs	r3, #0
 8008afa:	617b      	str	r3, [r7, #20]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	695b      	ldr	r3, [r3, #20]
 8008b02:	617b      	str	r3, [r7, #20]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	699b      	ldr	r3, [r3, #24]
 8008b0a:	617b      	str	r3, [r7, #20]
 8008b0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b10:	6a39      	ldr	r1, [r7, #32]
 8008b12:	68f8      	ldr	r0, [r7, #12]
 8008b14:	f000 f9a8 	bl	8008e68 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00d      	beq.n	8008b3a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b22:	2b04      	cmp	r3, #4
 8008b24:	d107      	bne.n	8008b36 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	e076      	b.n	8008c28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008b3a:	88fb      	ldrh	r3, [r7, #6]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d105      	bne.n	8008b4c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008b40:	893b      	ldrh	r3, [r7, #8]
 8008b42:	b2da      	uxtb	r2, r3
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	611a      	str	r2, [r3, #16]
 8008b4a:	e021      	b.n	8008b90 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008b4c:	893b      	ldrh	r3, [r7, #8]
 8008b4e:	0a1b      	lsrs	r3, r3, #8
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	b2da      	uxtb	r2, r3
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b5c:	6a39      	ldr	r1, [r7, #32]
 8008b5e:	68f8      	ldr	r0, [r7, #12]
 8008b60:	f000 f982 	bl	8008e68 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b64:	4603      	mov	r3, r0
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d00d      	beq.n	8008b86 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b6e:	2b04      	cmp	r3, #4
 8008b70:	d107      	bne.n	8008b82 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	e050      	b.n	8008c28 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008b86:	893b      	ldrh	r3, [r7, #8]
 8008b88:	b2da      	uxtb	r2, r3
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b92:	6a39      	ldr	r1, [r7, #32]
 8008b94:	68f8      	ldr	r0, [r7, #12]
 8008b96:	f000 f967 	bl	8008e68 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d00d      	beq.n	8008bbc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba4:	2b04      	cmp	r3, #4
 8008ba6:	d107      	bne.n	8008bb8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bb6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e035      	b.n	8008c28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008bca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bce:	9300      	str	r3, [sp, #0]
 8008bd0:	6a3b      	ldr	r3, [r7, #32]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008bd8:	68f8      	ldr	r0, [r7, #12]
 8008bda:	f000 f82b 	bl	8008c34 <I2C_WaitOnFlagUntilTimeout>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d00d      	beq.n	8008c00 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bf2:	d103      	bne.n	8008bfc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bfa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008bfc:	2303      	movs	r3, #3
 8008bfe:	e013      	b.n	8008c28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008c00:	897b      	ldrh	r3, [r7, #10]
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	f043 0301 	orr.w	r3, r3, #1
 8008c08:	b2da      	uxtb	r2, r3
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c12:	6a3a      	ldr	r2, [r7, #32]
 8008c14:	4906      	ldr	r1, [pc, #24]	; (8008c30 <I2C_RequestMemoryRead+0x1cc>)
 8008c16:	68f8      	ldr	r0, [r7, #12]
 8008c18:	f000 f886 	bl	8008d28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d001      	beq.n	8008c26 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008c22:	2301      	movs	r3, #1
 8008c24:	e000      	b.n	8008c28 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008c26:	2300      	movs	r3, #0
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3718      	adds	r7, #24
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	00010002 	.word	0x00010002

08008c34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	603b      	str	r3, [r7, #0]
 8008c40:	4613      	mov	r3, r2
 8008c42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c44:	e048      	b.n	8008cd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c4c:	d044      	beq.n	8008cd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c4e:	f7fb fe7f 	bl	8004950 <HAL_GetTick>
 8008c52:	4602      	mov	r2, r0
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	1ad3      	subs	r3, r2, r3
 8008c58:	683a      	ldr	r2, [r7, #0]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d302      	bcc.n	8008c64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d139      	bne.n	8008cd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	0c1b      	lsrs	r3, r3, #16
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d10d      	bne.n	8008c8a <I2C_WaitOnFlagUntilTimeout+0x56>
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	695b      	ldr	r3, [r3, #20]
 8008c74:	43da      	mvns	r2, r3
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	4013      	ands	r3, r2
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	bf0c      	ite	eq
 8008c80:	2301      	moveq	r3, #1
 8008c82:	2300      	movne	r3, #0
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	461a      	mov	r2, r3
 8008c88:	e00c      	b.n	8008ca4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	699b      	ldr	r3, [r3, #24]
 8008c90:	43da      	mvns	r2, r3
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	4013      	ands	r3, r2
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	bf0c      	ite	eq
 8008c9c:	2301      	moveq	r3, #1
 8008c9e:	2300      	movne	r3, #0
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	79fb      	ldrb	r3, [r7, #7]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d116      	bne.n	8008cd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2200      	movs	r2, #0
 8008cae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2220      	movs	r2, #32
 8008cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc4:	f043 0220 	orr.w	r2, r3, #32
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	e023      	b.n	8008d20 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	0c1b      	lsrs	r3, r3, #16
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d10d      	bne.n	8008cfe <I2C_WaitOnFlagUntilTimeout+0xca>
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	695b      	ldr	r3, [r3, #20]
 8008ce8:	43da      	mvns	r2, r3
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	4013      	ands	r3, r2
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	bf0c      	ite	eq
 8008cf4:	2301      	moveq	r3, #1
 8008cf6:	2300      	movne	r3, #0
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	e00c      	b.n	8008d18 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	699b      	ldr	r3, [r3, #24]
 8008d04:	43da      	mvns	r2, r3
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	4013      	ands	r3, r2
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	bf0c      	ite	eq
 8008d10:	2301      	moveq	r3, #1
 8008d12:	2300      	movne	r3, #0
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	461a      	mov	r2, r3
 8008d18:	79fb      	ldrb	r3, [r7, #7]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d093      	beq.n	8008c46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3710      	adds	r7, #16
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
 8008d34:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008d36:	e071      	b.n	8008e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	695b      	ldr	r3, [r3, #20]
 8008d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d46:	d123      	bne.n	8008d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d56:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008d60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2200      	movs	r2, #0
 8008d66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2220      	movs	r2, #32
 8008d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d7c:	f043 0204 	orr.w	r2, r3, #4
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2200      	movs	r2, #0
 8008d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e067      	b.n	8008e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d96:	d041      	beq.n	8008e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d98:	f7fb fdda 	bl	8004950 <HAL_GetTick>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	1ad3      	subs	r3, r2, r3
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d302      	bcc.n	8008dae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d136      	bne.n	8008e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	0c1b      	lsrs	r3, r3, #16
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d10c      	bne.n	8008dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	695b      	ldr	r3, [r3, #20]
 8008dbe:	43da      	mvns	r2, r3
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	4013      	ands	r3, r2
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	bf14      	ite	ne
 8008dca:	2301      	movne	r3, #1
 8008dcc:	2300      	moveq	r3, #0
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	e00b      	b.n	8008dea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	699b      	ldr	r3, [r3, #24]
 8008dd8:	43da      	mvns	r2, r3
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	4013      	ands	r3, r2
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	bf14      	ite	ne
 8008de4:	2301      	movne	r3, #1
 8008de6:	2300      	moveq	r3, #0
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d016      	beq.n	8008e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2200      	movs	r2, #0
 8008df2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2220      	movs	r2, #32
 8008df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e08:	f043 0220 	orr.w	r2, r3, #32
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2200      	movs	r2, #0
 8008e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	e021      	b.n	8008e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	0c1b      	lsrs	r3, r3, #16
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d10c      	bne.n	8008e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	695b      	ldr	r3, [r3, #20]
 8008e2c:	43da      	mvns	r2, r3
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	4013      	ands	r3, r2
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	bf14      	ite	ne
 8008e38:	2301      	movne	r3, #1
 8008e3a:	2300      	moveq	r3, #0
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	e00b      	b.n	8008e58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	699b      	ldr	r3, [r3, #24]
 8008e46:	43da      	mvns	r2, r3
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	4013      	ands	r3, r2
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	bf14      	ite	ne
 8008e52:	2301      	movne	r3, #1
 8008e54:	2300      	moveq	r3, #0
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	f47f af6d 	bne.w	8008d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3710      	adds	r7, #16
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008e74:	e034      	b.n	8008ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008e76:	68f8      	ldr	r0, [r7, #12]
 8008e78:	f000 f8e3 	bl	8009042 <I2C_IsAcknowledgeFailed>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d001      	beq.n	8008e86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	e034      	b.n	8008ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e8c:	d028      	beq.n	8008ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e8e:	f7fb fd5f 	bl	8004950 <HAL_GetTick>
 8008e92:	4602      	mov	r2, r0
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	1ad3      	subs	r3, r2, r3
 8008e98:	68ba      	ldr	r2, [r7, #8]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d302      	bcc.n	8008ea4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d11d      	bne.n	8008ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	695b      	ldr	r3, [r3, #20]
 8008eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eae:	2b80      	cmp	r3, #128	; 0x80
 8008eb0:	d016      	beq.n	8008ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2220      	movs	r2, #32
 8008ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ecc:	f043 0220 	orr.w	r2, r3, #32
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008edc:	2301      	movs	r3, #1
 8008ede:	e007      	b.n	8008ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	695b      	ldr	r3, [r3, #20]
 8008ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eea:	2b80      	cmp	r3, #128	; 0x80
 8008eec:	d1c3      	bne.n	8008e76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008eee:	2300      	movs	r3, #0
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3710      	adds	r7, #16
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008f04:	e034      	b.n	8008f70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008f06:	68f8      	ldr	r0, [r7, #12]
 8008f08:	f000 f89b 	bl	8009042 <I2C_IsAcknowledgeFailed>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d001      	beq.n	8008f16 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008f12:	2301      	movs	r3, #1
 8008f14:	e034      	b.n	8008f80 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f1c:	d028      	beq.n	8008f70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f1e:	f7fb fd17 	bl	8004950 <HAL_GetTick>
 8008f22:	4602      	mov	r2, r0
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	1ad3      	subs	r3, r2, r3
 8008f28:	68ba      	ldr	r2, [r7, #8]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d302      	bcc.n	8008f34 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d11d      	bne.n	8008f70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	695b      	ldr	r3, [r3, #20]
 8008f3a:	f003 0304 	and.w	r3, r3, #4
 8008f3e:	2b04      	cmp	r3, #4
 8008f40:	d016      	beq.n	8008f70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2200      	movs	r2, #0
 8008f46:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2220      	movs	r2, #32
 8008f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f5c:	f043 0220 	orr.w	r2, r3, #32
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2200      	movs	r2, #0
 8008f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e007      	b.n	8008f80 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	695b      	ldr	r3, [r3, #20]
 8008f76:	f003 0304 	and.w	r3, r3, #4
 8008f7a:	2b04      	cmp	r3, #4
 8008f7c:	d1c3      	bne.n	8008f06 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008f7e:	2300      	movs	r3, #0
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3710      	adds	r7, #16
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008f94:	e049      	b.n	800902a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	695b      	ldr	r3, [r3, #20]
 8008f9c:	f003 0310 	and.w	r3, r3, #16
 8008fa0:	2b10      	cmp	r3, #16
 8008fa2:	d119      	bne.n	8008fd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f06f 0210 	mvn.w	r2, #16
 8008fac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2220      	movs	r2, #32
 8008fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	e030      	b.n	800903a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fd8:	f7fb fcba 	bl	8004950 <HAL_GetTick>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	1ad3      	subs	r3, r2, r3
 8008fe2:	68ba      	ldr	r2, [r7, #8]
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d302      	bcc.n	8008fee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d11d      	bne.n	800902a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	695b      	ldr	r3, [r3, #20]
 8008ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ff8:	2b40      	cmp	r3, #64	; 0x40
 8008ffa:	d016      	beq.n	800902a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2200      	movs	r2, #0
 8009000:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2220      	movs	r2, #32
 8009006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2200      	movs	r2, #0
 800900e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009016:	f043 0220 	orr.w	r2, r3, #32
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2200      	movs	r2, #0
 8009022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009026:	2301      	movs	r3, #1
 8009028:	e007      	b.n	800903a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	695b      	ldr	r3, [r3, #20]
 8009030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009034:	2b40      	cmp	r3, #64	; 0x40
 8009036:	d1ae      	bne.n	8008f96 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	3710      	adds	r7, #16
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009042:	b480      	push	{r7}
 8009044:	b083      	sub	sp, #12
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	695b      	ldr	r3, [r3, #20]
 8009050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009058:	d11b      	bne.n	8009092 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009062:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2220      	movs	r2, #32
 800906e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800907e:	f043 0204 	orr.w	r2, r3, #4
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	e000      	b.n	8009094 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	370c      	adds	r7, #12
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b083      	sub	sp, #12
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	2b20      	cmp	r3, #32
 80090b4:	d129      	bne.n	800910a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2224      	movs	r2, #36	; 0x24
 80090ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f022 0201 	bic.w	r2, r2, #1
 80090cc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f022 0210 	bic.w	r2, r2, #16
 80090dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	683a      	ldr	r2, [r7, #0]
 80090ea:	430a      	orrs	r2, r1
 80090ec:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f042 0201 	orr.w	r2, r2, #1
 80090fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2220      	movs	r2, #32
 8009102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009106:	2300      	movs	r3, #0
 8009108:	e000      	b.n	800910c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800910a:	2302      	movs	r3, #2
  }
}
 800910c:	4618      	mov	r0, r3
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009118:	b480      	push	{r7}
 800911a:	b085      	sub	sp, #20
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8009122:	2300      	movs	r3, #0
 8009124:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800912c:	b2db      	uxtb	r3, r3
 800912e:	2b20      	cmp	r3, #32
 8009130:	d12a      	bne.n	8009188 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2224      	movs	r2, #36	; 0x24
 8009136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f022 0201 	bic.w	r2, r2, #1
 8009148:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009150:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8009152:	89fb      	ldrh	r3, [r7, #14]
 8009154:	f023 030f 	bic.w	r3, r3, #15
 8009158:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	b29a      	uxth	r2, r3
 800915e:	89fb      	ldrh	r3, [r7, #14]
 8009160:	4313      	orrs	r3, r2
 8009162:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	89fa      	ldrh	r2, [r7, #14]
 800916a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f042 0201 	orr.w	r2, r2, #1
 800917a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2220      	movs	r2, #32
 8009180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009184:	2300      	movs	r3, #0
 8009186:	e000      	b.n	800918a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8009188:	2302      	movs	r3, #2
  }
}
 800918a:	4618      	mov	r0, r3
 800918c:	3714      	adds	r7, #20
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr
	...

08009198 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d101      	bne.n	80091aa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	e0d6      	b.n	8009358 <HAL_LTDC_Init+0x1c0>
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d11d      	bne.n	80091f2 <HAL_LTDC_Init+0x5a>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

    /* Reset the LTDC callback to the legacy weak callbacks */
    hltdc->LineEventCallback   = HAL_LTDC_LineEventCallback;    /* Legacy weak LineEventCallback    */
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	4a67      	ldr	r2, [pc, #412]	; (8009360 <HAL_LTDC_Init+0x1c8>)
 80091c2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    hltdc->ReloadEventCallback = HAL_LTDC_ReloadEventCallback;  /* Legacy weak ReloadEventCallback  */
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	4a66      	ldr	r2, [pc, #408]	; (8009364 <HAL_LTDC_Init+0x1cc>)
 80091ca:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    hltdc->ErrorCallback       = HAL_LTDC_ErrorCallback;        /* Legacy weak ErrorCallback        */
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	4a65      	ldr	r2, [pc, #404]	; (8009368 <HAL_LTDC_Init+0x1d0>)
 80091d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

    if (hltdc->MspInitCallback == NULL)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d103      	bne.n	80091e8 <HAL_LTDC_Init+0x50>
    {
      hltdc->MspInitCallback = HAL_LTDC_MspInit;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4a62      	ldr	r2, [pc, #392]	; (800936c <HAL_LTDC_Init+0x1d4>)
 80091e4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	4798      	blx	r3
    HAL_LTDC_MspInit(hltdc);
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2202      	movs	r2, #2
 80091f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	699a      	ldr	r2, [r3, #24]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8009208:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	6999      	ldr	r1, [r3, #24]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	685a      	ldr	r2, [r3, #4]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800921e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	691b      	ldr	r3, [r3, #16]
 8009224:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	430a      	orrs	r2, r1
 800922c:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	6899      	ldr	r1, [r3, #8]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	4b4d      	ldr	r3, [pc, #308]	; (8009370 <HAL_LTDC_Init+0x1d8>)
 800923a:	400b      	ands	r3, r1
 800923c:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	695b      	ldr	r3, [r3, #20]
 8009242:	041b      	lsls	r3, r3, #16
 8009244:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	6899      	ldr	r1, [r3, #8]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	699a      	ldr	r2, [r3, #24]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	431a      	orrs	r2, r3
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	430a      	orrs	r2, r1
 800925a:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	68d9      	ldr	r1, [r3, #12]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	4b42      	ldr	r3, [pc, #264]	; (8009370 <HAL_LTDC_Init+0x1d8>)
 8009268:	400b      	ands	r3, r1
 800926a:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	69db      	ldr	r3, [r3, #28]
 8009270:	041b      	lsls	r3, r3, #16
 8009272:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	68d9      	ldr	r1, [r3, #12]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6a1a      	ldr	r2, [r3, #32]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	431a      	orrs	r2, r3
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	430a      	orrs	r2, r1
 8009288:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	6919      	ldr	r1, [r3, #16]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	4b36      	ldr	r3, [pc, #216]	; (8009370 <HAL_LTDC_Init+0x1d8>)
 8009296:	400b      	ands	r3, r1
 8009298:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929e:	041b      	lsls	r3, r3, #16
 80092a0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	6919      	ldr	r1, [r3, #16]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	431a      	orrs	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	430a      	orrs	r2, r1
 80092b6:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	6959      	ldr	r1, [r3, #20]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	4b2b      	ldr	r3, [pc, #172]	; (8009370 <HAL_LTDC_Init+0x1d8>)
 80092c4:	400b      	ands	r3, r1
 80092c6:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092cc:	041b      	lsls	r3, r3, #16
 80092ce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	6959      	ldr	r1, [r3, #20]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	431a      	orrs	r2, r3
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	430a      	orrs	r2, r1
 80092e4:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80092ec:	021b      	lsls	r3, r3, #8
 80092ee:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80092f6:	041b      	lsls	r3, r3, #16
 80092f8:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8009308:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009310:	68ba      	ldr	r2, [r7, #8]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	4313      	orrs	r3, r2
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800931c:	431a      	orrs	r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	430a      	orrs	r2, r1
 8009324:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f042 0206 	orr.w	r2, r2, #6
 8009334:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	699a      	ldr	r2, [r3, #24]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f042 0201 	orr.w	r2, r2, #1
 8009344:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2201      	movs	r2, #1
 8009352:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8009356:	2300      	movs	r3, #0
}
 8009358:	4618      	mov	r0, r3
 800935a:	3710      	adds	r7, #16
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	080094e1 	.word	0x080094e1
 8009364:	080094f5 	.word	0x080094f5
 8009368:	080094cd 	.word	0x080094cd
 800936c:	08001241 	.word	0x08001241
 8009370:	f000f800 	.word	0xf000f800

08009374 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009382:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800938a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f003 0304 	and.w	r3, r3, #4
 8009392:	2b00      	cmp	r3, #0
 8009394:	d025      	beq.n	80093e2 <HAL_LTDC_IRQHandler+0x6e>
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	f003 0304 	and.w	r3, r3, #4
 800939c:	2b00      	cmp	r3, #0
 800939e:	d020      	beq.n	80093e2 <HAL_LTDC_IRQHandler+0x6e>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f022 0204 	bic.w	r2, r2, #4
 80093ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	2204      	movs	r2, #4
 80093b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80093be:	f043 0201 	orr.w	r2, r3, #1
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2204      	movs	r2, #4
 80093cc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2200      	movs	r2, #0
 80093d4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

    /* Transfer error Callback */
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	4798      	blx	r3
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f003 0302 	and.w	r3, r3, #2
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d025      	beq.n	8009438 <HAL_LTDC_IRQHandler+0xc4>
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	f003 0302 	and.w	r3, r3, #2
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d020      	beq.n	8009438 <HAL_LTDC_IRQHandler+0xc4>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f022 0202 	bic.w	r2, r2, #2
 8009404:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2202      	movs	r2, #2
 800940c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009414:	f043 0202 	orr.w	r2, r3, #2
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2204      	movs	r2, #4
 8009422:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

    /* Transfer error Callback */
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	4798      	blx	r3
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f003 0301 	and.w	r3, r3, #1
 800943e:	2b00      	cmp	r3, #0
 8009440:	d01d      	beq.n	800947e <HAL_LTDC_IRQHandler+0x10a>
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	f003 0301 	and.w	r3, r3, #1
 8009448:	2b00      	cmp	r3, #0
 800944a:	d018      	beq.n	800947e <HAL_LTDC_IRQHandler+0x10a>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f022 0201 	bic.w	r2, r2, #1
 800945a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2201      	movs	r2, #1
 8009462:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2201      	movs	r2, #1
 8009468:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2200      	movs	r2, #0
 8009470:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

    /* Line interrupt Callback */
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	4798      	blx	r3
    HAL_LTDC_LineEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f003 0308 	and.w	r3, r3, #8
 8009484:	2b00      	cmp	r3, #0
 8009486:	d01d      	beq.n	80094c4 <HAL_LTDC_IRQHandler+0x150>
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	f003 0308 	and.w	r3, r3, #8
 800948e:	2b00      	cmp	r3, #0
 8009490:	d018      	beq.n	80094c4 <HAL_LTDC_IRQHandler+0x150>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f022 0208 	bic.w	r2, r2, #8
 80094a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2208      	movs	r2, #8
 80094a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2201      	movs	r2, #1
 80094ae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

    /* Reload interrupt Callback */
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	4798      	blx	r3
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80094c4:	bf00      	nop
 80094c6:	3710      	adds	r7, #16
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80094d4:	bf00      	nop
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80094e8:	bf00      	nop
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80094fc:	bf00      	nop
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009508:	b5b0      	push	{r4, r5, r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800951a:	2b01      	cmp	r3, #1
 800951c:	d101      	bne.n	8009522 <HAL_LTDC_ConfigLayer+0x1a>
 800951e:	2302      	movs	r3, #2
 8009520:	e02c      	b.n	800957c <HAL_LTDC_ConfigLayer+0x74>
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2201      	movs	r2, #1
 8009526:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2202      	movs	r2, #2
 800952e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009532:	68fa      	ldr	r2, [r7, #12]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2134      	movs	r1, #52	; 0x34
 8009538:	fb01 f303 	mul.w	r3, r1, r3
 800953c:	4413      	add	r3, r2
 800953e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	4614      	mov	r4, r2
 8009546:	461d      	mov	r5, r3
 8009548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800954a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800954c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800954e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009554:	682b      	ldr	r3, [r5, #0]
 8009556:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	68b9      	ldr	r1, [r7, #8]
 800955c:	68f8      	ldr	r0, [r7, #12]
 800955e:	f000 f83b 	bl	80095d8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	2201      	movs	r2, #1
 8009568:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2201      	movs	r2, #1
 800956e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2200      	movs	r2, #0
 8009576:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800957a:	2300      	movs	r3, #0
}
 800957c:	4618      	mov	r0, r3
 800957e:	3710      	adds	r7, #16
 8009580:	46bd      	mov	sp, r7
 8009582:	bdb0      	pop	{r4, r5, r7, pc}

08009584 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8009592:	2b01      	cmp	r3, #1
 8009594:	d101      	bne.n	800959a <HAL_LTDC_EnableDither+0x16>
 8009596:	2302      	movs	r3, #2
 8009598:	e016      	b.n	80095c8 <HAL_LTDC_EnableDither+0x44>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2201      	movs	r2, #1
 800959e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2202      	movs	r2, #2
 80095a6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80095aa:	4b0a      	ldr	r3, [pc, #40]	; (80095d4 <HAL_LTDC_EnableDither+0x50>)
 80095ac:	699b      	ldr	r3, [r3, #24]
 80095ae:	4a09      	ldr	r2, [pc, #36]	; (80095d4 <HAL_LTDC_EnableDither+0x50>)
 80095b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095b4:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2201      	movs	r2, #1
 80095ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr
 80095d4:	40016800 	.word	0x40016800

080095d8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80095d8:	b480      	push	{r7}
 80095da:	b089      	sub	sp, #36	; 0x24
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	60b9      	str	r1, [r7, #8]
 80095e2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	685a      	ldr	r2, [r3, #4]
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	0c1b      	lsrs	r3, r3, #16
 80095f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095f4:	4413      	add	r3, r2
 80095f6:	041b      	lsls	r3, r3, #16
 80095f8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	461a      	mov	r2, r3
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	01db      	lsls	r3, r3, #7
 8009604:	4413      	add	r3, r2
 8009606:	3384      	adds	r3, #132	; 0x84
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	68fa      	ldr	r2, [r7, #12]
 800960c:	6812      	ldr	r2, [r2, #0]
 800960e:	4611      	mov	r1, r2
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	01d2      	lsls	r2, r2, #7
 8009614:	440a      	add	r2, r1
 8009616:	3284      	adds	r2, #132	; 0x84
 8009618:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800961c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	68db      	ldr	r3, [r3, #12]
 8009628:	0c1b      	lsrs	r3, r3, #16
 800962a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800962e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009630:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4619      	mov	r1, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	01db      	lsls	r3, r3, #7
 800963c:	440b      	add	r3, r1
 800963e:	3384      	adds	r3, #132	; 0x84
 8009640:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009642:	69fb      	ldr	r3, [r7, #28]
 8009644:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009646:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	68da      	ldr	r2, [r3, #12]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	68db      	ldr	r3, [r3, #12]
 8009652:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009656:	4413      	add	r3, r2
 8009658:	041b      	lsls	r3, r3, #16
 800965a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	461a      	mov	r2, r3
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	01db      	lsls	r3, r3, #7
 8009666:	4413      	add	r3, r2
 8009668:	3384      	adds	r3, #132	; 0x84
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	68fa      	ldr	r2, [r7, #12]
 800966e:	6812      	ldr	r2, [r2, #0]
 8009670:	4611      	mov	r1, r2
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	01d2      	lsls	r2, r2, #7
 8009676:	440a      	add	r2, r1
 8009678:	3284      	adds	r2, #132	; 0x84
 800967a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800967e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	689a      	ldr	r2, [r3, #8]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	68db      	ldr	r3, [r3, #12]
 800968a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800968e:	4413      	add	r3, r2
 8009690:	1c5a      	adds	r2, r3, #1
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4619      	mov	r1, r3
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	01db      	lsls	r3, r3, #7
 800969c:	440b      	add	r3, r1
 800969e:	3384      	adds	r3, #132	; 0x84
 80096a0:	4619      	mov	r1, r3
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	4313      	orrs	r3, r2
 80096a6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	461a      	mov	r2, r3
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	01db      	lsls	r3, r3, #7
 80096b2:	4413      	add	r3, r2
 80096b4:	3384      	adds	r3, #132	; 0x84
 80096b6:	691b      	ldr	r3, [r3, #16]
 80096b8:	68fa      	ldr	r2, [r7, #12]
 80096ba:	6812      	ldr	r2, [r2, #0]
 80096bc:	4611      	mov	r1, r2
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	01d2      	lsls	r2, r2, #7
 80096c2:	440a      	add	r2, r1
 80096c4:	3284      	adds	r2, #132	; 0x84
 80096c6:	f023 0307 	bic.w	r3, r3, #7
 80096ca:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	461a      	mov	r2, r3
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	01db      	lsls	r3, r3, #7
 80096d6:	4413      	add	r3, r2
 80096d8:	3384      	adds	r3, #132	; 0x84
 80096da:	461a      	mov	r2, r3
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	691b      	ldr	r3, [r3, #16]
 80096e0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80096e8:	021b      	lsls	r3, r3, #8
 80096ea:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80096f2:	041b      	lsls	r3, r3, #16
 80096f4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	699b      	ldr	r3, [r3, #24]
 80096fa:	061b      	lsls	r3, r3, #24
 80096fc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	461a      	mov	r2, r3
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	01db      	lsls	r3, r3, #7
 8009708:	4413      	add	r3, r2
 800970a:	3384      	adds	r3, #132	; 0x84
 800970c:	699b      	ldr	r3, [r3, #24]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	461a      	mov	r2, r3
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	01db      	lsls	r3, r3, #7
 8009718:	4413      	add	r3, r2
 800971a:	3384      	adds	r3, #132	; 0x84
 800971c:	461a      	mov	r2, r3
 800971e:	2300      	movs	r3, #0
 8009720:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009728:	461a      	mov	r2, r3
 800972a:	69fb      	ldr	r3, [r7, #28]
 800972c:	431a      	orrs	r2, r3
 800972e:	69bb      	ldr	r3, [r7, #24]
 8009730:	431a      	orrs	r2, r3
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4619      	mov	r1, r3
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	01db      	lsls	r3, r3, #7
 800973c:	440b      	add	r3, r1
 800973e:	3384      	adds	r3, #132	; 0x84
 8009740:	4619      	mov	r1, r3
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	4313      	orrs	r3, r2
 8009746:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	461a      	mov	r2, r3
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	01db      	lsls	r3, r3, #7
 8009752:	4413      	add	r3, r2
 8009754:	3384      	adds	r3, #132	; 0x84
 8009756:	695b      	ldr	r3, [r3, #20]
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	6812      	ldr	r2, [r2, #0]
 800975c:	4611      	mov	r1, r2
 800975e:	687a      	ldr	r2, [r7, #4]
 8009760:	01d2      	lsls	r2, r2, #7
 8009762:	440a      	add	r2, r1
 8009764:	3284      	adds	r2, #132	; 0x84
 8009766:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800976a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	461a      	mov	r2, r3
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	01db      	lsls	r3, r3, #7
 8009776:	4413      	add	r3, r2
 8009778:	3384      	adds	r3, #132	; 0x84
 800977a:	461a      	mov	r2, r3
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	695b      	ldr	r3, [r3, #20]
 8009780:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	461a      	mov	r2, r3
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	01db      	lsls	r3, r3, #7
 800978c:	4413      	add	r3, r2
 800978e:	3384      	adds	r3, #132	; 0x84
 8009790:	69db      	ldr	r3, [r3, #28]
 8009792:	68fa      	ldr	r2, [r7, #12]
 8009794:	6812      	ldr	r2, [r2, #0]
 8009796:	4611      	mov	r1, r2
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	01d2      	lsls	r2, r2, #7
 800979c:	440a      	add	r2, r1
 800979e:	3284      	adds	r2, #132	; 0x84
 80097a0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80097a4:	f023 0307 	bic.w	r3, r3, #7
 80097a8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	69da      	ldr	r2, [r3, #28]
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	6a1b      	ldr	r3, [r3, #32]
 80097b2:	68f9      	ldr	r1, [r7, #12]
 80097b4:	6809      	ldr	r1, [r1, #0]
 80097b6:	4608      	mov	r0, r1
 80097b8:	6879      	ldr	r1, [r7, #4]
 80097ba:	01c9      	lsls	r1, r1, #7
 80097bc:	4401      	add	r1, r0
 80097be:	3184      	adds	r1, #132	; 0x84
 80097c0:	4313      	orrs	r3, r2
 80097c2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	461a      	mov	r2, r3
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	01db      	lsls	r3, r3, #7
 80097ce:	4413      	add	r3, r2
 80097d0:	3384      	adds	r3, #132	; 0x84
 80097d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	461a      	mov	r2, r3
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	01db      	lsls	r3, r3, #7
 80097de:	4413      	add	r3, r2
 80097e0:	3384      	adds	r3, #132	; 0x84
 80097e2:	461a      	mov	r2, r3
 80097e4:	2300      	movs	r3, #0
 80097e6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	461a      	mov	r2, r3
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	01db      	lsls	r3, r3, #7
 80097f2:	4413      	add	r3, r2
 80097f4:	3384      	adds	r3, #132	; 0x84
 80097f6:	461a      	mov	r2, r3
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097fc:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	691b      	ldr	r3, [r3, #16]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d102      	bne.n	800980c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8009806:	2304      	movs	r3, #4
 8009808:	61fb      	str	r3, [r7, #28]
 800980a:	e01b      	b.n	8009844 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	691b      	ldr	r3, [r3, #16]
 8009810:	2b01      	cmp	r3, #1
 8009812:	d102      	bne.n	800981a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8009814:	2303      	movs	r3, #3
 8009816:	61fb      	str	r3, [r7, #28]
 8009818:	e014      	b.n	8009844 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	691b      	ldr	r3, [r3, #16]
 800981e:	2b04      	cmp	r3, #4
 8009820:	d00b      	beq.n	800983a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009826:	2b02      	cmp	r3, #2
 8009828:	d007      	beq.n	800983a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800982e:	2b03      	cmp	r3, #3
 8009830:	d003      	beq.n	800983a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009836:	2b07      	cmp	r3, #7
 8009838:	d102      	bne.n	8009840 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800983a:	2302      	movs	r3, #2
 800983c:	61fb      	str	r3, [r7, #28]
 800983e:	e001      	b.n	8009844 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8009840:	2301      	movs	r3, #1
 8009842:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	461a      	mov	r2, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	01db      	lsls	r3, r3, #7
 800984e:	4413      	add	r3, r2
 8009850:	3384      	adds	r3, #132	; 0x84
 8009852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009854:	68fa      	ldr	r2, [r7, #12]
 8009856:	6812      	ldr	r2, [r2, #0]
 8009858:	4611      	mov	r1, r2
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	01d2      	lsls	r2, r2, #7
 800985e:	440a      	add	r2, r1
 8009860:	3284      	adds	r2, #132	; 0x84
 8009862:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8009866:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800986c:	69fa      	ldr	r2, [r7, #28]
 800986e:	fb02 f303 	mul.w	r3, r2, r3
 8009872:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	6859      	ldr	r1, [r3, #4]
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	1acb      	subs	r3, r1, r3
 800987e:	69f9      	ldr	r1, [r7, #28]
 8009880:	fb01 f303 	mul.w	r3, r1, r3
 8009884:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009886:	68f9      	ldr	r1, [r7, #12]
 8009888:	6809      	ldr	r1, [r1, #0]
 800988a:	4608      	mov	r0, r1
 800988c:	6879      	ldr	r1, [r7, #4]
 800988e:	01c9      	lsls	r1, r1, #7
 8009890:	4401      	add	r1, r0
 8009892:	3184      	adds	r1, #132	; 0x84
 8009894:	4313      	orrs	r3, r2
 8009896:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	461a      	mov	r2, r3
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	01db      	lsls	r3, r3, #7
 80098a2:	4413      	add	r3, r2
 80098a4:	3384      	adds	r3, #132	; 0x84
 80098a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098a8:	68fa      	ldr	r2, [r7, #12]
 80098aa:	6812      	ldr	r2, [r2, #0]
 80098ac:	4611      	mov	r1, r2
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	01d2      	lsls	r2, r2, #7
 80098b2:	440a      	add	r2, r1
 80098b4:	3284      	adds	r2, #132	; 0x84
 80098b6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80098ba:	f023 0307 	bic.w	r3, r3, #7
 80098be:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	461a      	mov	r2, r3
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	01db      	lsls	r3, r3, #7
 80098ca:	4413      	add	r3, r2
 80098cc:	3384      	adds	r3, #132	; 0x84
 80098ce:	461a      	mov	r2, r3
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	461a      	mov	r2, r3
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	01db      	lsls	r3, r3, #7
 80098e0:	4413      	add	r3, r2
 80098e2:	3384      	adds	r3, #132	; 0x84
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	68fa      	ldr	r2, [r7, #12]
 80098e8:	6812      	ldr	r2, [r2, #0]
 80098ea:	4611      	mov	r1, r2
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	01d2      	lsls	r2, r2, #7
 80098f0:	440a      	add	r2, r1
 80098f2:	3284      	adds	r2, #132	; 0x84
 80098f4:	f043 0301 	orr.w	r3, r3, #1
 80098f8:	6013      	str	r3, [r2, #0]
}
 80098fa:	bf00      	nop
 80098fc:	3724      	adds	r7, #36	; 0x24
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr
	...

08009908 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b086      	sub	sp, #24
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d101      	bne.n	800991a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009916:	2301      	movs	r3, #1
 8009918:	e267      	b.n	8009dea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f003 0301 	and.w	r3, r3, #1
 8009922:	2b00      	cmp	r3, #0
 8009924:	d075      	beq.n	8009a12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009926:	4b88      	ldr	r3, [pc, #544]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	f003 030c 	and.w	r3, r3, #12
 800992e:	2b04      	cmp	r3, #4
 8009930:	d00c      	beq.n	800994c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009932:	4b85      	ldr	r3, [pc, #532]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800993a:	2b08      	cmp	r3, #8
 800993c:	d112      	bne.n	8009964 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800993e:	4b82      	ldr	r3, [pc, #520]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009946:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800994a:	d10b      	bne.n	8009964 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800994c:	4b7e      	ldr	r3, [pc, #504]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009954:	2b00      	cmp	r3, #0
 8009956:	d05b      	beq.n	8009a10 <HAL_RCC_OscConfig+0x108>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d157      	bne.n	8009a10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009960:	2301      	movs	r3, #1
 8009962:	e242      	b.n	8009dea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800996c:	d106      	bne.n	800997c <HAL_RCC_OscConfig+0x74>
 800996e:	4b76      	ldr	r3, [pc, #472]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4a75      	ldr	r2, [pc, #468]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009978:	6013      	str	r3, [r2, #0]
 800997a:	e01d      	b.n	80099b8 <HAL_RCC_OscConfig+0xb0>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009984:	d10c      	bne.n	80099a0 <HAL_RCC_OscConfig+0x98>
 8009986:	4b70      	ldr	r3, [pc, #448]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a6f      	ldr	r2, [pc, #444]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 800998c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009990:	6013      	str	r3, [r2, #0]
 8009992:	4b6d      	ldr	r3, [pc, #436]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a6c      	ldr	r2, [pc, #432]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800999c:	6013      	str	r3, [r2, #0]
 800999e:	e00b      	b.n	80099b8 <HAL_RCC_OscConfig+0xb0>
 80099a0:	4b69      	ldr	r3, [pc, #420]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a68      	ldr	r2, [pc, #416]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 80099a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099aa:	6013      	str	r3, [r2, #0]
 80099ac:	4b66      	ldr	r3, [pc, #408]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a65      	ldr	r2, [pc, #404]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 80099b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80099b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d013      	beq.n	80099e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099c0:	f7fa ffc6 	bl	8004950 <HAL_GetTick>
 80099c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80099c6:	e008      	b.n	80099da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80099c8:	f7fa ffc2 	bl	8004950 <HAL_GetTick>
 80099cc:	4602      	mov	r2, r0
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	1ad3      	subs	r3, r2, r3
 80099d2:	2b64      	cmp	r3, #100	; 0x64
 80099d4:	d901      	bls.n	80099da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80099d6:	2303      	movs	r3, #3
 80099d8:	e207      	b.n	8009dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80099da:	4b5b      	ldr	r3, [pc, #364]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d0f0      	beq.n	80099c8 <HAL_RCC_OscConfig+0xc0>
 80099e6:	e014      	b.n	8009a12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099e8:	f7fa ffb2 	bl	8004950 <HAL_GetTick>
 80099ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80099ee:	e008      	b.n	8009a02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80099f0:	f7fa ffae 	bl	8004950 <HAL_GetTick>
 80099f4:	4602      	mov	r2, r0
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	1ad3      	subs	r3, r2, r3
 80099fa:	2b64      	cmp	r3, #100	; 0x64
 80099fc:	d901      	bls.n	8009a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80099fe:	2303      	movs	r3, #3
 8009a00:	e1f3      	b.n	8009dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009a02:	4b51      	ldr	r3, [pc, #324]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d1f0      	bne.n	80099f0 <HAL_RCC_OscConfig+0xe8>
 8009a0e:	e000      	b.n	8009a12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f003 0302 	and.w	r3, r3, #2
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d063      	beq.n	8009ae6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009a1e:	4b4a      	ldr	r3, [pc, #296]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	f003 030c 	and.w	r3, r3, #12
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00b      	beq.n	8009a42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009a2a:	4b47      	ldr	r3, [pc, #284]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009a2c:	689b      	ldr	r3, [r3, #8]
 8009a2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009a32:	2b08      	cmp	r3, #8
 8009a34:	d11c      	bne.n	8009a70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009a36:	4b44      	ldr	r3, [pc, #272]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d116      	bne.n	8009a70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009a42:	4b41      	ldr	r3, [pc, #260]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f003 0302 	and.w	r3, r3, #2
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d005      	beq.n	8009a5a <HAL_RCC_OscConfig+0x152>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d001      	beq.n	8009a5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009a56:	2301      	movs	r3, #1
 8009a58:	e1c7      	b.n	8009dea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a5a:	4b3b      	ldr	r3, [pc, #236]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	691b      	ldr	r3, [r3, #16]
 8009a66:	00db      	lsls	r3, r3, #3
 8009a68:	4937      	ldr	r1, [pc, #220]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009a6e:	e03a      	b.n	8009ae6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d020      	beq.n	8009aba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009a78:	4b34      	ldr	r3, [pc, #208]	; (8009b4c <HAL_RCC_OscConfig+0x244>)
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a7e:	f7fa ff67 	bl	8004950 <HAL_GetTick>
 8009a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a84:	e008      	b.n	8009a98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009a86:	f7fa ff63 	bl	8004950 <HAL_GetTick>
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	1ad3      	subs	r3, r2, r3
 8009a90:	2b02      	cmp	r3, #2
 8009a92:	d901      	bls.n	8009a98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009a94:	2303      	movs	r3, #3
 8009a96:	e1a8      	b.n	8009dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a98:	4b2b      	ldr	r3, [pc, #172]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f003 0302 	and.w	r3, r3, #2
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d0f0      	beq.n	8009a86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009aa4:	4b28      	ldr	r3, [pc, #160]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	691b      	ldr	r3, [r3, #16]
 8009ab0:	00db      	lsls	r3, r3, #3
 8009ab2:	4925      	ldr	r1, [pc, #148]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	600b      	str	r3, [r1, #0]
 8009ab8:	e015      	b.n	8009ae6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009aba:	4b24      	ldr	r3, [pc, #144]	; (8009b4c <HAL_RCC_OscConfig+0x244>)
 8009abc:	2200      	movs	r2, #0
 8009abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ac0:	f7fa ff46 	bl	8004950 <HAL_GetTick>
 8009ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009ac6:	e008      	b.n	8009ada <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009ac8:	f7fa ff42 	bl	8004950 <HAL_GetTick>
 8009acc:	4602      	mov	r2, r0
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	1ad3      	subs	r3, r2, r3
 8009ad2:	2b02      	cmp	r3, #2
 8009ad4:	d901      	bls.n	8009ada <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009ad6:	2303      	movs	r3, #3
 8009ad8:	e187      	b.n	8009dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009ada:	4b1b      	ldr	r3, [pc, #108]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f003 0302 	and.w	r3, r3, #2
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d1f0      	bne.n	8009ac8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f003 0308 	and.w	r3, r3, #8
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d036      	beq.n	8009b60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	695b      	ldr	r3, [r3, #20]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d016      	beq.n	8009b28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009afa:	4b15      	ldr	r3, [pc, #84]	; (8009b50 <HAL_RCC_OscConfig+0x248>)
 8009afc:	2201      	movs	r2, #1
 8009afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b00:	f7fa ff26 	bl	8004950 <HAL_GetTick>
 8009b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009b06:	e008      	b.n	8009b1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b08:	f7fa ff22 	bl	8004950 <HAL_GetTick>
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	1ad3      	subs	r3, r2, r3
 8009b12:	2b02      	cmp	r3, #2
 8009b14:	d901      	bls.n	8009b1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009b16:	2303      	movs	r3, #3
 8009b18:	e167      	b.n	8009dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009b1a:	4b0b      	ldr	r3, [pc, #44]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b1e:	f003 0302 	and.w	r3, r3, #2
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d0f0      	beq.n	8009b08 <HAL_RCC_OscConfig+0x200>
 8009b26:	e01b      	b.n	8009b60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009b28:	4b09      	ldr	r3, [pc, #36]	; (8009b50 <HAL_RCC_OscConfig+0x248>)
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009b2e:	f7fa ff0f 	bl	8004950 <HAL_GetTick>
 8009b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009b34:	e00e      	b.n	8009b54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b36:	f7fa ff0b 	bl	8004950 <HAL_GetTick>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	1ad3      	subs	r3, r2, r3
 8009b40:	2b02      	cmp	r3, #2
 8009b42:	d907      	bls.n	8009b54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009b44:	2303      	movs	r3, #3
 8009b46:	e150      	b.n	8009dea <HAL_RCC_OscConfig+0x4e2>
 8009b48:	40023800 	.word	0x40023800
 8009b4c:	42470000 	.word	0x42470000
 8009b50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009b54:	4b88      	ldr	r3, [pc, #544]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b58:	f003 0302 	and.w	r3, r3, #2
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d1ea      	bne.n	8009b36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f003 0304 	and.w	r3, r3, #4
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	f000 8097 	beq.w	8009c9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009b72:	4b81      	ldr	r3, [pc, #516]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d10f      	bne.n	8009b9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009b7e:	2300      	movs	r3, #0
 8009b80:	60bb      	str	r3, [r7, #8]
 8009b82:	4b7d      	ldr	r3, [pc, #500]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b86:	4a7c      	ldr	r2, [pc, #496]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8009b8e:	4b7a      	ldr	r3, [pc, #488]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b96:	60bb      	str	r3, [r7, #8]
 8009b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009b9e:	4b77      	ldr	r3, [pc, #476]	; (8009d7c <HAL_RCC_OscConfig+0x474>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d118      	bne.n	8009bdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009baa:	4b74      	ldr	r3, [pc, #464]	; (8009d7c <HAL_RCC_OscConfig+0x474>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a73      	ldr	r2, [pc, #460]	; (8009d7c <HAL_RCC_OscConfig+0x474>)
 8009bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009bb6:	f7fa fecb 	bl	8004950 <HAL_GetTick>
 8009bba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009bbc:	e008      	b.n	8009bd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009bbe:	f7fa fec7 	bl	8004950 <HAL_GetTick>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	1ad3      	subs	r3, r2, r3
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	d901      	bls.n	8009bd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009bcc:	2303      	movs	r3, #3
 8009bce:	e10c      	b.n	8009dea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009bd0:	4b6a      	ldr	r3, [pc, #424]	; (8009d7c <HAL_RCC_OscConfig+0x474>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d0f0      	beq.n	8009bbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	689b      	ldr	r3, [r3, #8]
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d106      	bne.n	8009bf2 <HAL_RCC_OscConfig+0x2ea>
 8009be4:	4b64      	ldr	r3, [pc, #400]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009be8:	4a63      	ldr	r2, [pc, #396]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009bea:	f043 0301 	orr.w	r3, r3, #1
 8009bee:	6713      	str	r3, [r2, #112]	; 0x70
 8009bf0:	e01c      	b.n	8009c2c <HAL_RCC_OscConfig+0x324>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	2b05      	cmp	r3, #5
 8009bf8:	d10c      	bne.n	8009c14 <HAL_RCC_OscConfig+0x30c>
 8009bfa:	4b5f      	ldr	r3, [pc, #380]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bfe:	4a5e      	ldr	r2, [pc, #376]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009c00:	f043 0304 	orr.w	r3, r3, #4
 8009c04:	6713      	str	r3, [r2, #112]	; 0x70
 8009c06:	4b5c      	ldr	r3, [pc, #368]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c0a:	4a5b      	ldr	r2, [pc, #364]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009c0c:	f043 0301 	orr.w	r3, r3, #1
 8009c10:	6713      	str	r3, [r2, #112]	; 0x70
 8009c12:	e00b      	b.n	8009c2c <HAL_RCC_OscConfig+0x324>
 8009c14:	4b58      	ldr	r3, [pc, #352]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c18:	4a57      	ldr	r2, [pc, #348]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009c1a:	f023 0301 	bic.w	r3, r3, #1
 8009c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8009c20:	4b55      	ldr	r3, [pc, #340]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c24:	4a54      	ldr	r2, [pc, #336]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009c26:	f023 0304 	bic.w	r3, r3, #4
 8009c2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	689b      	ldr	r3, [r3, #8]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d015      	beq.n	8009c60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c34:	f7fa fe8c 	bl	8004950 <HAL_GetTick>
 8009c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009c3a:	e00a      	b.n	8009c52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009c3c:	f7fa fe88 	bl	8004950 <HAL_GetTick>
 8009c40:	4602      	mov	r2, r0
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	1ad3      	subs	r3, r2, r3
 8009c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d901      	bls.n	8009c52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009c4e:	2303      	movs	r3, #3
 8009c50:	e0cb      	b.n	8009dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009c52:	4b49      	ldr	r3, [pc, #292]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c56:	f003 0302 	and.w	r3, r3, #2
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d0ee      	beq.n	8009c3c <HAL_RCC_OscConfig+0x334>
 8009c5e:	e014      	b.n	8009c8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009c60:	f7fa fe76 	bl	8004950 <HAL_GetTick>
 8009c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009c66:	e00a      	b.n	8009c7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009c68:	f7fa fe72 	bl	8004950 <HAL_GetTick>
 8009c6c:	4602      	mov	r2, r0
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	1ad3      	subs	r3, r2, r3
 8009c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d901      	bls.n	8009c7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009c7a:	2303      	movs	r3, #3
 8009c7c:	e0b5      	b.n	8009dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009c7e:	4b3e      	ldr	r3, [pc, #248]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c82:	f003 0302 	and.w	r3, r3, #2
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d1ee      	bne.n	8009c68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009c8a:	7dfb      	ldrb	r3, [r7, #23]
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d105      	bne.n	8009c9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009c90:	4b39      	ldr	r3, [pc, #228]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c94:	4a38      	ldr	r2, [pc, #224]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009c96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	699b      	ldr	r3, [r3, #24]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f000 80a1 	beq.w	8009de8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009ca6:	4b34      	ldr	r3, [pc, #208]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	f003 030c 	and.w	r3, r3, #12
 8009cae:	2b08      	cmp	r3, #8
 8009cb0:	d05c      	beq.n	8009d6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	699b      	ldr	r3, [r3, #24]
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	d141      	bne.n	8009d3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009cba:	4b31      	ldr	r3, [pc, #196]	; (8009d80 <HAL_RCC_OscConfig+0x478>)
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009cc0:	f7fa fe46 	bl	8004950 <HAL_GetTick>
 8009cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009cc6:	e008      	b.n	8009cda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009cc8:	f7fa fe42 	bl	8004950 <HAL_GetTick>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	1ad3      	subs	r3, r2, r3
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	d901      	bls.n	8009cda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009cd6:	2303      	movs	r3, #3
 8009cd8:	e087      	b.n	8009dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009cda:	4b27      	ldr	r3, [pc, #156]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d1f0      	bne.n	8009cc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	69da      	ldr	r2, [r3, #28]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6a1b      	ldr	r3, [r3, #32]
 8009cee:	431a      	orrs	r2, r3
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf4:	019b      	lsls	r3, r3, #6
 8009cf6:	431a      	orrs	r2, r3
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cfc:	085b      	lsrs	r3, r3, #1
 8009cfe:	3b01      	subs	r3, #1
 8009d00:	041b      	lsls	r3, r3, #16
 8009d02:	431a      	orrs	r2, r3
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d08:	061b      	lsls	r3, r3, #24
 8009d0a:	491b      	ldr	r1, [pc, #108]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009d10:	4b1b      	ldr	r3, [pc, #108]	; (8009d80 <HAL_RCC_OscConfig+0x478>)
 8009d12:	2201      	movs	r2, #1
 8009d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d16:	f7fa fe1b 	bl	8004950 <HAL_GetTick>
 8009d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d1c:	e008      	b.n	8009d30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d1e:	f7fa fe17 	bl	8004950 <HAL_GetTick>
 8009d22:	4602      	mov	r2, r0
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	1ad3      	subs	r3, r2, r3
 8009d28:	2b02      	cmp	r3, #2
 8009d2a:	d901      	bls.n	8009d30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009d2c:	2303      	movs	r3, #3
 8009d2e:	e05c      	b.n	8009dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d30:	4b11      	ldr	r3, [pc, #68]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d0f0      	beq.n	8009d1e <HAL_RCC_OscConfig+0x416>
 8009d3c:	e054      	b.n	8009de8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d3e:	4b10      	ldr	r3, [pc, #64]	; (8009d80 <HAL_RCC_OscConfig+0x478>)
 8009d40:	2200      	movs	r2, #0
 8009d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d44:	f7fa fe04 	bl	8004950 <HAL_GetTick>
 8009d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d4a:	e008      	b.n	8009d5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d4c:	f7fa fe00 	bl	8004950 <HAL_GetTick>
 8009d50:	4602      	mov	r2, r0
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	1ad3      	subs	r3, r2, r3
 8009d56:	2b02      	cmp	r3, #2
 8009d58:	d901      	bls.n	8009d5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009d5a:	2303      	movs	r3, #3
 8009d5c:	e045      	b.n	8009dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d5e:	4b06      	ldr	r3, [pc, #24]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d1f0      	bne.n	8009d4c <HAL_RCC_OscConfig+0x444>
 8009d6a:	e03d      	b.n	8009de8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	699b      	ldr	r3, [r3, #24]
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d107      	bne.n	8009d84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009d74:	2301      	movs	r3, #1
 8009d76:	e038      	b.n	8009dea <HAL_RCC_OscConfig+0x4e2>
 8009d78:	40023800 	.word	0x40023800
 8009d7c:	40007000 	.word	0x40007000
 8009d80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009d84:	4b1b      	ldr	r3, [pc, #108]	; (8009df4 <HAL_RCC_OscConfig+0x4ec>)
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	699b      	ldr	r3, [r3, #24]
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d028      	beq.n	8009de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d121      	bne.n	8009de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d11a      	bne.n	8009de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009dae:	68fa      	ldr	r2, [r7, #12]
 8009db0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009db4:	4013      	ands	r3, r2
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009dba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d111      	bne.n	8009de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dca:	085b      	lsrs	r3, r3, #1
 8009dcc:	3b01      	subs	r3, #1
 8009dce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d107      	bne.n	8009de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d001      	beq.n	8009de8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009de4:	2301      	movs	r3, #1
 8009de6:	e000      	b.n	8009dea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3718      	adds	r7, #24
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	40023800 	.word	0x40023800

08009df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d101      	bne.n	8009e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	e0cc      	b.n	8009fa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009e0c:	4b68      	ldr	r3, [pc, #416]	; (8009fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f003 030f 	and.w	r3, r3, #15
 8009e14:	683a      	ldr	r2, [r7, #0]
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d90c      	bls.n	8009e34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e1a:	4b65      	ldr	r3, [pc, #404]	; (8009fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8009e1c:	683a      	ldr	r2, [r7, #0]
 8009e1e:	b2d2      	uxtb	r2, r2
 8009e20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e22:	4b63      	ldr	r3, [pc, #396]	; (8009fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f003 030f 	and.w	r3, r3, #15
 8009e2a:	683a      	ldr	r2, [r7, #0]
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d001      	beq.n	8009e34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009e30:	2301      	movs	r3, #1
 8009e32:	e0b8      	b.n	8009fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f003 0302 	and.w	r3, r3, #2
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d020      	beq.n	8009e82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f003 0304 	and.w	r3, r3, #4
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d005      	beq.n	8009e58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009e4c:	4b59      	ldr	r3, [pc, #356]	; (8009fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	4a58      	ldr	r2, [pc, #352]	; (8009fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009e56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f003 0308 	and.w	r3, r3, #8
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d005      	beq.n	8009e70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009e64:	4b53      	ldr	r3, [pc, #332]	; (8009fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	4a52      	ldr	r2, [pc, #328]	; (8009fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009e6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e70:	4b50      	ldr	r3, [pc, #320]	; (8009fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e72:	689b      	ldr	r3, [r3, #8]
 8009e74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	689b      	ldr	r3, [r3, #8]
 8009e7c:	494d      	ldr	r1, [pc, #308]	; (8009fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e7e:	4313      	orrs	r3, r2
 8009e80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f003 0301 	and.w	r3, r3, #1
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d044      	beq.n	8009f18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	2b01      	cmp	r3, #1
 8009e94:	d107      	bne.n	8009ea6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e96:	4b47      	ldr	r3, [pc, #284]	; (8009fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d119      	bne.n	8009ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	e07f      	b.n	8009fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	2b02      	cmp	r3, #2
 8009eac:	d003      	beq.n	8009eb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009eb2:	2b03      	cmp	r3, #3
 8009eb4:	d107      	bne.n	8009ec6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009eb6:	4b3f      	ldr	r3, [pc, #252]	; (8009fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d109      	bne.n	8009ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e06f      	b.n	8009fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009ec6:	4b3b      	ldr	r3, [pc, #236]	; (8009fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f003 0302 	and.w	r3, r3, #2
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d101      	bne.n	8009ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	e067      	b.n	8009fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009ed6:	4b37      	ldr	r3, [pc, #220]	; (8009fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	f023 0203 	bic.w	r2, r3, #3
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	4934      	ldr	r1, [pc, #208]	; (8009fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009ee8:	f7fa fd32 	bl	8004950 <HAL_GetTick>
 8009eec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009eee:	e00a      	b.n	8009f06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ef0:	f7fa fd2e 	bl	8004950 <HAL_GetTick>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	1ad3      	subs	r3, r2, r3
 8009efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d901      	bls.n	8009f06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009f02:	2303      	movs	r3, #3
 8009f04:	e04f      	b.n	8009fa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f06:	4b2b      	ldr	r3, [pc, #172]	; (8009fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	f003 020c 	and.w	r2, r3, #12
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	009b      	lsls	r3, r3, #2
 8009f14:	429a      	cmp	r2, r3
 8009f16:	d1eb      	bne.n	8009ef0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009f18:	4b25      	ldr	r3, [pc, #148]	; (8009fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f003 030f 	and.w	r3, r3, #15
 8009f20:	683a      	ldr	r2, [r7, #0]
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d20c      	bcs.n	8009f40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f26:	4b22      	ldr	r3, [pc, #136]	; (8009fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8009f28:	683a      	ldr	r2, [r7, #0]
 8009f2a:	b2d2      	uxtb	r2, r2
 8009f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f2e:	4b20      	ldr	r3, [pc, #128]	; (8009fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f003 030f 	and.w	r3, r3, #15
 8009f36:	683a      	ldr	r2, [r7, #0]
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d001      	beq.n	8009f40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	e032      	b.n	8009fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f003 0304 	and.w	r3, r3, #4
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d008      	beq.n	8009f5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009f4c:	4b19      	ldr	r3, [pc, #100]	; (8009fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f4e:	689b      	ldr	r3, [r3, #8]
 8009f50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	4916      	ldr	r1, [pc, #88]	; (8009fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f003 0308 	and.w	r3, r3, #8
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d009      	beq.n	8009f7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009f6a:	4b12      	ldr	r3, [pc, #72]	; (8009fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f6c:	689b      	ldr	r3, [r3, #8]
 8009f6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	691b      	ldr	r3, [r3, #16]
 8009f76:	00db      	lsls	r3, r3, #3
 8009f78:	490e      	ldr	r1, [pc, #56]	; (8009fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009f7e:	f000 f821 	bl	8009fc4 <HAL_RCC_GetSysClockFreq>
 8009f82:	4602      	mov	r2, r0
 8009f84:	4b0b      	ldr	r3, [pc, #44]	; (8009fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	091b      	lsrs	r3, r3, #4
 8009f8a:	f003 030f 	and.w	r3, r3, #15
 8009f8e:	490a      	ldr	r1, [pc, #40]	; (8009fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8009f90:	5ccb      	ldrb	r3, [r1, r3]
 8009f92:	fa22 f303 	lsr.w	r3, r2, r3
 8009f96:	4a09      	ldr	r2, [pc, #36]	; (8009fbc <HAL_RCC_ClockConfig+0x1c4>)
 8009f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009f9a:	4b09      	ldr	r3, [pc, #36]	; (8009fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7f8 fae4 	bl	800256c <HAL_InitTick>

  return HAL_OK;
 8009fa4:	2300      	movs	r3, #0
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3710      	adds	r7, #16
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop
 8009fb0:	40023c00 	.word	0x40023c00
 8009fb4:	40023800 	.word	0x40023800
 8009fb8:	08011128 	.word	0x08011128
 8009fbc:	20002bf8 	.word	0x20002bf8
 8009fc0:	20002c78 	.word	0x20002c78

08009fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009fc8:	b094      	sub	sp, #80	; 0x50
 8009fca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	647b      	str	r3, [r7, #68]	; 0x44
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009fdc:	4b79      	ldr	r3, [pc, #484]	; (800a1c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009fde:	689b      	ldr	r3, [r3, #8]
 8009fe0:	f003 030c 	and.w	r3, r3, #12
 8009fe4:	2b08      	cmp	r3, #8
 8009fe6:	d00d      	beq.n	800a004 <HAL_RCC_GetSysClockFreq+0x40>
 8009fe8:	2b08      	cmp	r3, #8
 8009fea:	f200 80e1 	bhi.w	800a1b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d002      	beq.n	8009ff8 <HAL_RCC_GetSysClockFreq+0x34>
 8009ff2:	2b04      	cmp	r3, #4
 8009ff4:	d003      	beq.n	8009ffe <HAL_RCC_GetSysClockFreq+0x3a>
 8009ff6:	e0db      	b.n	800a1b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009ff8:	4b73      	ldr	r3, [pc, #460]	; (800a1c8 <HAL_RCC_GetSysClockFreq+0x204>)
 8009ffa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009ffc:	e0db      	b.n	800a1b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009ffe:	4b73      	ldr	r3, [pc, #460]	; (800a1cc <HAL_RCC_GetSysClockFreq+0x208>)
 800a000:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a002:	e0d8      	b.n	800a1b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a004:	4b6f      	ldr	r3, [pc, #444]	; (800a1c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a00c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a00e:	4b6d      	ldr	r3, [pc, #436]	; (800a1c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a016:	2b00      	cmp	r3, #0
 800a018:	d063      	beq.n	800a0e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a01a:	4b6a      	ldr	r3, [pc, #424]	; (800a1c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	099b      	lsrs	r3, r3, #6
 800a020:	2200      	movs	r2, #0
 800a022:	63bb      	str	r3, [r7, #56]	; 0x38
 800a024:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a02c:	633b      	str	r3, [r7, #48]	; 0x30
 800a02e:	2300      	movs	r3, #0
 800a030:	637b      	str	r3, [r7, #52]	; 0x34
 800a032:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a036:	4622      	mov	r2, r4
 800a038:	462b      	mov	r3, r5
 800a03a:	f04f 0000 	mov.w	r0, #0
 800a03e:	f04f 0100 	mov.w	r1, #0
 800a042:	0159      	lsls	r1, r3, #5
 800a044:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a048:	0150      	lsls	r0, r2, #5
 800a04a:	4602      	mov	r2, r0
 800a04c:	460b      	mov	r3, r1
 800a04e:	4621      	mov	r1, r4
 800a050:	1a51      	subs	r1, r2, r1
 800a052:	6139      	str	r1, [r7, #16]
 800a054:	4629      	mov	r1, r5
 800a056:	eb63 0301 	sbc.w	r3, r3, r1
 800a05a:	617b      	str	r3, [r7, #20]
 800a05c:	f04f 0200 	mov.w	r2, #0
 800a060:	f04f 0300 	mov.w	r3, #0
 800a064:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a068:	4659      	mov	r1, fp
 800a06a:	018b      	lsls	r3, r1, #6
 800a06c:	4651      	mov	r1, sl
 800a06e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a072:	4651      	mov	r1, sl
 800a074:	018a      	lsls	r2, r1, #6
 800a076:	4651      	mov	r1, sl
 800a078:	ebb2 0801 	subs.w	r8, r2, r1
 800a07c:	4659      	mov	r1, fp
 800a07e:	eb63 0901 	sbc.w	r9, r3, r1
 800a082:	f04f 0200 	mov.w	r2, #0
 800a086:	f04f 0300 	mov.w	r3, #0
 800a08a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a08e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a092:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a096:	4690      	mov	r8, r2
 800a098:	4699      	mov	r9, r3
 800a09a:	4623      	mov	r3, r4
 800a09c:	eb18 0303 	adds.w	r3, r8, r3
 800a0a0:	60bb      	str	r3, [r7, #8]
 800a0a2:	462b      	mov	r3, r5
 800a0a4:	eb49 0303 	adc.w	r3, r9, r3
 800a0a8:	60fb      	str	r3, [r7, #12]
 800a0aa:	f04f 0200 	mov.w	r2, #0
 800a0ae:	f04f 0300 	mov.w	r3, #0
 800a0b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a0b6:	4629      	mov	r1, r5
 800a0b8:	024b      	lsls	r3, r1, #9
 800a0ba:	4621      	mov	r1, r4
 800a0bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a0c0:	4621      	mov	r1, r4
 800a0c2:	024a      	lsls	r2, r1, #9
 800a0c4:	4610      	mov	r0, r2
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a0d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a0d4:	f7f6 fb20 	bl	8000718 <__aeabi_uldivmod>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	460b      	mov	r3, r1
 800a0dc:	4613      	mov	r3, r2
 800a0de:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0e0:	e058      	b.n	800a194 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a0e2:	4b38      	ldr	r3, [pc, #224]	; (800a1c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	099b      	lsrs	r3, r3, #6
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	4611      	mov	r1, r2
 800a0ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a0f2:	623b      	str	r3, [r7, #32]
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	627b      	str	r3, [r7, #36]	; 0x24
 800a0f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a0fc:	4642      	mov	r2, r8
 800a0fe:	464b      	mov	r3, r9
 800a100:	f04f 0000 	mov.w	r0, #0
 800a104:	f04f 0100 	mov.w	r1, #0
 800a108:	0159      	lsls	r1, r3, #5
 800a10a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a10e:	0150      	lsls	r0, r2, #5
 800a110:	4602      	mov	r2, r0
 800a112:	460b      	mov	r3, r1
 800a114:	4641      	mov	r1, r8
 800a116:	ebb2 0a01 	subs.w	sl, r2, r1
 800a11a:	4649      	mov	r1, r9
 800a11c:	eb63 0b01 	sbc.w	fp, r3, r1
 800a120:	f04f 0200 	mov.w	r2, #0
 800a124:	f04f 0300 	mov.w	r3, #0
 800a128:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a12c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a130:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a134:	ebb2 040a 	subs.w	r4, r2, sl
 800a138:	eb63 050b 	sbc.w	r5, r3, fp
 800a13c:	f04f 0200 	mov.w	r2, #0
 800a140:	f04f 0300 	mov.w	r3, #0
 800a144:	00eb      	lsls	r3, r5, #3
 800a146:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a14a:	00e2      	lsls	r2, r4, #3
 800a14c:	4614      	mov	r4, r2
 800a14e:	461d      	mov	r5, r3
 800a150:	4643      	mov	r3, r8
 800a152:	18e3      	adds	r3, r4, r3
 800a154:	603b      	str	r3, [r7, #0]
 800a156:	464b      	mov	r3, r9
 800a158:	eb45 0303 	adc.w	r3, r5, r3
 800a15c:	607b      	str	r3, [r7, #4]
 800a15e:	f04f 0200 	mov.w	r2, #0
 800a162:	f04f 0300 	mov.w	r3, #0
 800a166:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a16a:	4629      	mov	r1, r5
 800a16c:	028b      	lsls	r3, r1, #10
 800a16e:	4621      	mov	r1, r4
 800a170:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a174:	4621      	mov	r1, r4
 800a176:	028a      	lsls	r2, r1, #10
 800a178:	4610      	mov	r0, r2
 800a17a:	4619      	mov	r1, r3
 800a17c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a17e:	2200      	movs	r2, #0
 800a180:	61bb      	str	r3, [r7, #24]
 800a182:	61fa      	str	r2, [r7, #28]
 800a184:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a188:	f7f6 fac6 	bl	8000718 <__aeabi_uldivmod>
 800a18c:	4602      	mov	r2, r0
 800a18e:	460b      	mov	r3, r1
 800a190:	4613      	mov	r3, r2
 800a192:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a194:	4b0b      	ldr	r3, [pc, #44]	; (800a1c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	0c1b      	lsrs	r3, r3, #16
 800a19a:	f003 0303 	and.w	r3, r3, #3
 800a19e:	3301      	adds	r3, #1
 800a1a0:	005b      	lsls	r3, r3, #1
 800a1a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800a1a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a1a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a1ae:	e002      	b.n	800a1b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a1b0:	4b05      	ldr	r3, [pc, #20]	; (800a1c8 <HAL_RCC_GetSysClockFreq+0x204>)
 800a1b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a1b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a1b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3750      	adds	r7, #80	; 0x50
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a1c2:	bf00      	nop
 800a1c4:	40023800 	.word	0x40023800
 800a1c8:	00f42400 	.word	0x00f42400
 800a1cc:	007a1200 	.word	0x007a1200

0800a1d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a1d4:	4b03      	ldr	r3, [pc, #12]	; (800a1e4 <HAL_RCC_GetHCLKFreq+0x14>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr
 800a1e2:	bf00      	nop
 800a1e4:	20002bf8 	.word	0x20002bf8

0800a1e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a1ec:	f7ff fff0 	bl	800a1d0 <HAL_RCC_GetHCLKFreq>
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	4b05      	ldr	r3, [pc, #20]	; (800a208 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a1f4:	689b      	ldr	r3, [r3, #8]
 800a1f6:	0a9b      	lsrs	r3, r3, #10
 800a1f8:	f003 0307 	and.w	r3, r3, #7
 800a1fc:	4903      	ldr	r1, [pc, #12]	; (800a20c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a1fe:	5ccb      	ldrb	r3, [r1, r3]
 800a200:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a204:	4618      	mov	r0, r3
 800a206:	bd80      	pop	{r7, pc}
 800a208:	40023800 	.word	0x40023800
 800a20c:	08011138 	.word	0x08011138

0800a210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a214:	f7ff ffdc 	bl	800a1d0 <HAL_RCC_GetHCLKFreq>
 800a218:	4602      	mov	r2, r0
 800a21a:	4b05      	ldr	r3, [pc, #20]	; (800a230 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a21c:	689b      	ldr	r3, [r3, #8]
 800a21e:	0b5b      	lsrs	r3, r3, #13
 800a220:	f003 0307 	and.w	r3, r3, #7
 800a224:	4903      	ldr	r1, [pc, #12]	; (800a234 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a226:	5ccb      	ldrb	r3, [r1, r3]
 800a228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	40023800 	.word	0x40023800
 800a234:	08011138 	.word	0x08011138

0800a238 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	220f      	movs	r2, #15
 800a246:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a248:	4b12      	ldr	r3, [pc, #72]	; (800a294 <HAL_RCC_GetClockConfig+0x5c>)
 800a24a:	689b      	ldr	r3, [r3, #8]
 800a24c:	f003 0203 	and.w	r2, r3, #3
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a254:	4b0f      	ldr	r3, [pc, #60]	; (800a294 <HAL_RCC_GetClockConfig+0x5c>)
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a260:	4b0c      	ldr	r3, [pc, #48]	; (800a294 <HAL_RCC_GetClockConfig+0x5c>)
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a26c:	4b09      	ldr	r3, [pc, #36]	; (800a294 <HAL_RCC_GetClockConfig+0x5c>)
 800a26e:	689b      	ldr	r3, [r3, #8]
 800a270:	08db      	lsrs	r3, r3, #3
 800a272:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a27a:	4b07      	ldr	r3, [pc, #28]	; (800a298 <HAL_RCC_GetClockConfig+0x60>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f003 020f 	and.w	r2, r3, #15
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	601a      	str	r2, [r3, #0]
}
 800a286:	bf00      	nop
 800a288:	370c      	adds	r7, #12
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr
 800a292:	bf00      	nop
 800a294:	40023800 	.word	0x40023800
 800a298:	40023c00 	.word	0x40023c00

0800a29c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b086      	sub	sp, #24
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f003 0301 	and.w	r3, r3, #1
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d10b      	bne.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d105      	bne.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d075      	beq.n	800a3bc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a2d0:	4b91      	ldr	r3, [pc, #580]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a2d6:	f7fa fb3b 	bl	8004950 <HAL_GetTick>
 800a2da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a2dc:	e008      	b.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a2de:	f7fa fb37 	bl	8004950 <HAL_GetTick>
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	1ad3      	subs	r3, r2, r3
 800a2e8:	2b02      	cmp	r3, #2
 800a2ea:	d901      	bls.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a2ec:	2303      	movs	r3, #3
 800a2ee:	e189      	b.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a2f0:	4b8a      	ldr	r3, [pc, #552]	; (800a51c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d1f0      	bne.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f003 0301 	and.w	r3, r3, #1
 800a304:	2b00      	cmp	r3, #0
 800a306:	d009      	beq.n	800a31c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	019a      	lsls	r2, r3, #6
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	689b      	ldr	r3, [r3, #8]
 800a312:	071b      	lsls	r3, r3, #28
 800a314:	4981      	ldr	r1, [pc, #516]	; (800a51c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a316:	4313      	orrs	r3, r2
 800a318:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f003 0302 	and.w	r3, r3, #2
 800a324:	2b00      	cmp	r3, #0
 800a326:	d01f      	beq.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a328:	4b7c      	ldr	r3, [pc, #496]	; (800a51c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a32a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a32e:	0f1b      	lsrs	r3, r3, #28
 800a330:	f003 0307 	and.w	r3, r3, #7
 800a334:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	019a      	lsls	r2, r3, #6
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	68db      	ldr	r3, [r3, #12]
 800a340:	061b      	lsls	r3, r3, #24
 800a342:	431a      	orrs	r2, r3
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	071b      	lsls	r3, r3, #28
 800a348:	4974      	ldr	r1, [pc, #464]	; (800a51c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a34a:	4313      	orrs	r3, r2
 800a34c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a350:	4b72      	ldr	r3, [pc, #456]	; (800a51c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a352:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a356:	f023 021f 	bic.w	r2, r3, #31
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	69db      	ldr	r3, [r3, #28]
 800a35e:	3b01      	subs	r3, #1
 800a360:	496e      	ldr	r1, [pc, #440]	; (800a51c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a362:	4313      	orrs	r3, r2
 800a364:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a370:	2b00      	cmp	r3, #0
 800a372:	d00d      	beq.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	019a      	lsls	r2, r3, #6
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	68db      	ldr	r3, [r3, #12]
 800a37e:	061b      	lsls	r3, r3, #24
 800a380:	431a      	orrs	r2, r3
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	689b      	ldr	r3, [r3, #8]
 800a386:	071b      	lsls	r3, r3, #28
 800a388:	4964      	ldr	r1, [pc, #400]	; (800a51c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a38a:	4313      	orrs	r3, r2
 800a38c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a390:	4b61      	ldr	r3, [pc, #388]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800a392:	2201      	movs	r2, #1
 800a394:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a396:	f7fa fadb 	bl	8004950 <HAL_GetTick>
 800a39a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a39c:	e008      	b.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a39e:	f7fa fad7 	bl	8004950 <HAL_GetTick>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	1ad3      	subs	r3, r2, r3
 800a3a8:	2b02      	cmp	r3, #2
 800a3aa:	d901      	bls.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a3ac:	2303      	movs	r3, #3
 800a3ae:	e129      	b.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a3b0:	4b5a      	ldr	r3, [pc, #360]	; (800a51c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d0f0      	beq.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f003 0304 	and.w	r3, r3, #4
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d105      	bne.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d079      	beq.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a3d4:	4b52      	ldr	r3, [pc, #328]	; (800a520 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a3da:	f7fa fab9 	bl	8004950 <HAL_GetTick>
 800a3de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a3e0:	e008      	b.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a3e2:	f7fa fab5 	bl	8004950 <HAL_GetTick>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	1ad3      	subs	r3, r2, r3
 800a3ec:	2b02      	cmp	r3, #2
 800a3ee:	d901      	bls.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a3f0:	2303      	movs	r3, #3
 800a3f2:	e107      	b.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a3f4:	4b49      	ldr	r3, [pc, #292]	; (800a51c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a3fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a400:	d0ef      	beq.n	800a3e2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f003 0304 	and.w	r3, r3, #4
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d020      	beq.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a40e:	4b43      	ldr	r3, [pc, #268]	; (800a51c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a414:	0f1b      	lsrs	r3, r3, #28
 800a416:	f003 0307 	and.w	r3, r3, #7
 800a41a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	691b      	ldr	r3, [r3, #16]
 800a420:	019a      	lsls	r2, r3, #6
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	695b      	ldr	r3, [r3, #20]
 800a426:	061b      	lsls	r3, r3, #24
 800a428:	431a      	orrs	r2, r3
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	071b      	lsls	r3, r3, #28
 800a42e:	493b      	ldr	r1, [pc, #236]	; (800a51c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a430:	4313      	orrs	r3, r2
 800a432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a436:	4b39      	ldr	r3, [pc, #228]	; (800a51c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a43c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6a1b      	ldr	r3, [r3, #32]
 800a444:	3b01      	subs	r3, #1
 800a446:	021b      	lsls	r3, r3, #8
 800a448:	4934      	ldr	r1, [pc, #208]	; (800a51c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a44a:	4313      	orrs	r3, r2
 800a44c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f003 0308 	and.w	r3, r3, #8
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d01e      	beq.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a45c:	4b2f      	ldr	r3, [pc, #188]	; (800a51c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a45e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a462:	0e1b      	lsrs	r3, r3, #24
 800a464:	f003 030f 	and.w	r3, r3, #15
 800a468:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	691b      	ldr	r3, [r3, #16]
 800a46e:	019a      	lsls	r2, r3, #6
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	061b      	lsls	r3, r3, #24
 800a474:	431a      	orrs	r2, r3
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	699b      	ldr	r3, [r3, #24]
 800a47a:	071b      	lsls	r3, r3, #28
 800a47c:	4927      	ldr	r1, [pc, #156]	; (800a51c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a47e:	4313      	orrs	r3, r2
 800a480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a484:	4b25      	ldr	r3, [pc, #148]	; (800a51c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a486:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a48a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a492:	4922      	ldr	r1, [pc, #136]	; (800a51c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a494:	4313      	orrs	r3, r2
 800a496:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a49a:	4b21      	ldr	r3, [pc, #132]	; (800a520 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800a49c:	2201      	movs	r2, #1
 800a49e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a4a0:	f7fa fa56 	bl	8004950 <HAL_GetTick>
 800a4a4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a4a6:	e008      	b.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a4a8:	f7fa fa52 	bl	8004950 <HAL_GetTick>
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	1ad3      	subs	r3, r2, r3
 800a4b2:	2b02      	cmp	r3, #2
 800a4b4:	d901      	bls.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a4b6:	2303      	movs	r3, #3
 800a4b8:	e0a4      	b.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a4ba:	4b18      	ldr	r3, [pc, #96]	; (800a51c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4c6:	d1ef      	bne.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f003 0320 	and.w	r3, r3, #32
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	f000 808b 	beq.w	800a5ec <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	60fb      	str	r3, [r7, #12]
 800a4da:	4b10      	ldr	r3, [pc, #64]	; (800a51c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4de:	4a0f      	ldr	r2, [pc, #60]	; (800a51c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a4e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4e4:	6413      	str	r3, [r2, #64]	; 0x40
 800a4e6:	4b0d      	ldr	r3, [pc, #52]	; (800a51c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a4e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a4ee:	60fb      	str	r3, [r7, #12]
 800a4f0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a4f2:	4b0c      	ldr	r3, [pc, #48]	; (800a524 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	4a0b      	ldr	r2, [pc, #44]	; (800a524 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800a4f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4fc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a4fe:	f7fa fa27 	bl	8004950 <HAL_GetTick>
 800a502:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a504:	e010      	b.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a506:	f7fa fa23 	bl	8004950 <HAL_GetTick>
 800a50a:	4602      	mov	r2, r0
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	1ad3      	subs	r3, r2, r3
 800a510:	2b02      	cmp	r3, #2
 800a512:	d909      	bls.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800a514:	2303      	movs	r3, #3
 800a516:	e075      	b.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800a518:	42470068 	.word	0x42470068
 800a51c:	40023800 	.word	0x40023800
 800a520:	42470070 	.word	0x42470070
 800a524:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a528:	4b38      	ldr	r3, [pc, #224]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a530:	2b00      	cmp	r3, #0
 800a532:	d0e8      	beq.n	800a506 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a534:	4b36      	ldr	r3, [pc, #216]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a538:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a53c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d02f      	beq.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a548:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a54c:	693a      	ldr	r2, [r7, #16]
 800a54e:	429a      	cmp	r2, r3
 800a550:	d028      	beq.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a552:	4b2f      	ldr	r3, [pc, #188]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a55a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a55c:	4b2d      	ldr	r3, [pc, #180]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800a55e:	2201      	movs	r2, #1
 800a560:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a562:	4b2c      	ldr	r3, [pc, #176]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800a564:	2200      	movs	r2, #0
 800a566:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a568:	4a29      	ldr	r2, [pc, #164]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a56e:	4b28      	ldr	r3, [pc, #160]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a572:	f003 0301 	and.w	r3, r3, #1
 800a576:	2b01      	cmp	r3, #1
 800a578:	d114      	bne.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a57a:	f7fa f9e9 	bl	8004950 <HAL_GetTick>
 800a57e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a580:	e00a      	b.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a582:	f7fa f9e5 	bl	8004950 <HAL_GetTick>
 800a586:	4602      	mov	r2, r0
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	1ad3      	subs	r3, r2, r3
 800a58c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a590:	4293      	cmp	r3, r2
 800a592:	d901      	bls.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800a594:	2303      	movs	r3, #3
 800a596:	e035      	b.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a598:	4b1d      	ldr	r3, [pc, #116]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a59a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a59c:	f003 0302 	and.w	r3, r3, #2
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d0ee      	beq.n	800a582 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5b0:	d10d      	bne.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0x332>
 800a5b2:	4b17      	ldr	r3, [pc, #92]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a5b4:	689b      	ldr	r3, [r3, #8]
 800a5b6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a5c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5c6:	4912      	ldr	r1, [pc, #72]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	608b      	str	r3, [r1, #8]
 800a5cc:	e005      	b.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800a5ce:	4b10      	ldr	r3, [pc, #64]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a5d0:	689b      	ldr	r3, [r3, #8]
 800a5d2:	4a0f      	ldr	r2, [pc, #60]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a5d4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a5d8:	6093      	str	r3, [r2, #8]
 800a5da:	4b0d      	ldr	r3, [pc, #52]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a5dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a5e6:	490a      	ldr	r1, [pc, #40]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f003 0310 	and.w	r3, r3, #16
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d004      	beq.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800a5fe:	4b06      	ldr	r3, [pc, #24]	; (800a618 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800a600:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800a602:	2300      	movs	r3, #0
}
 800a604:	4618      	mov	r0, r3
 800a606:	3718      	adds	r7, #24
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}
 800a60c:	40007000 	.word	0x40007000
 800a610:	40023800 	.word	0x40023800
 800a614:	42470e40 	.word	0x42470e40
 800a618:	424711e0 	.word	0x424711e0

0800a61c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d101      	bne.n	800a630 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a62c:	2301      	movs	r3, #1
 800a62e:	e025      	b.n	800a67c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a636:	b2db      	uxtb	r3, r3
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d106      	bne.n	800a64a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2200      	movs	r2, #0
 800a640:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f7f6 fb57 	bl	8000cf8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2202      	movs	r2, #2
 800a64e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681a      	ldr	r2, [r3, #0]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	3304      	adds	r3, #4
 800a65a:	4619      	mov	r1, r3
 800a65c:	4610      	mov	r0, r2
 800a65e:	f001 fdb5 	bl	800c1cc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6818      	ldr	r0, [r3, #0]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	685b      	ldr	r3, [r3, #4]
 800a66a:	461a      	mov	r2, r3
 800a66c:	6839      	ldr	r1, [r7, #0]
 800a66e:	f001 fe0a 	bl	800c286 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2201      	movs	r2, #1
 800a676:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a67a:	2300      	movs	r3, #0
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3708      	adds	r7, #8
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}

0800a684 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b086      	sub	sp, #24
 800a688:	af00      	add	r7, sp, #0
 800a68a:	60f8      	str	r0, [r7, #12]
 800a68c:	60b9      	str	r1, [r7, #8]
 800a68e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a696:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a698:	7dfb      	ldrb	r3, [r7, #23]
 800a69a:	2b02      	cmp	r3, #2
 800a69c:	d101      	bne.n	800a6a2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800a69e:	2302      	movs	r3, #2
 800a6a0:	e021      	b.n	800a6e6 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a6a2:	7dfb      	ldrb	r3, [r7, #23]
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d002      	beq.n	800a6ae <HAL_SDRAM_SendCommand+0x2a>
 800a6a8:	7dfb      	ldrb	r3, [r7, #23]
 800a6aa:	2b05      	cmp	r3, #5
 800a6ac:	d118      	bne.n	800a6e0 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2202      	movs	r2, #2
 800a6b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	68b9      	ldr	r1, [r7, #8]
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f001 fe4a 	bl	800c358 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	2b02      	cmp	r3, #2
 800a6ca:	d104      	bne.n	800a6d6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2205      	movs	r2, #5
 800a6d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a6d4:	e006      	b.n	800a6e4 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2201      	movs	r2, #1
 800a6da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a6de:	e001      	b.n	800a6e4 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	e000      	b.n	800a6e6 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800a6e4:	2300      	movs	r3, #0
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3718      	adds	r7, #24
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}

0800a6ee <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a6ee:	b580      	push	{r7, lr}
 800a6f0:	b082      	sub	sp, #8
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	6078      	str	r0, [r7, #4]
 800a6f6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	2b02      	cmp	r3, #2
 800a702:	d101      	bne.n	800a708 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a704:	2302      	movs	r3, #2
 800a706:	e016      	b.n	800a736 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	2b01      	cmp	r3, #1
 800a712:	d10f      	bne.n	800a734 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2202      	movs	r2, #2
 800a718:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	6839      	ldr	r1, [r7, #0]
 800a722:	4618      	mov	r0, r3
 800a724:	f001 fe55 	bl	800c3d2 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a730:	2300      	movs	r3, #0
 800a732:	e000      	b.n	800a736 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800a734:	2301      	movs	r3, #1
}
 800a736:	4618      	mov	r0, r3
 800a738:	3708      	adds	r7, #8
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}

0800a73e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a73e:	b580      	push	{r7, lr}
 800a740:	b082      	sub	sp, #8
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d101      	bne.n	800a750 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a74c:	2301      	movs	r3, #1
 800a74e:	e07b      	b.n	800a848 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a754:	2b00      	cmp	r3, #0
 800a756:	d108      	bne.n	800a76a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a760:	d009      	beq.n	800a776 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2200      	movs	r2, #0
 800a766:	61da      	str	r2, [r3, #28]
 800a768:	e005      	b.n	800a776 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2200      	movs	r2, #0
 800a76e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2200      	movs	r2, #0
 800a774:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2200      	movs	r2, #0
 800a77a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a782:	b2db      	uxtb	r3, r3
 800a784:	2b00      	cmp	r3, #0
 800a786:	d106      	bne.n	800a796 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2200      	movs	r2, #0
 800a78c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f7f7 fe5d 	bl	8002450 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2202      	movs	r2, #2
 800a79a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a7ac:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	689b      	ldr	r3, [r3, #8]
 800a7ba:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a7be:	431a      	orrs	r2, r3
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7c8:	431a      	orrs	r2, r3
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	691b      	ldr	r3, [r3, #16]
 800a7ce:	f003 0302 	and.w	r3, r3, #2
 800a7d2:	431a      	orrs	r2, r3
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	695b      	ldr	r3, [r3, #20]
 800a7d8:	f003 0301 	and.w	r3, r3, #1
 800a7dc:	431a      	orrs	r2, r3
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	699b      	ldr	r3, [r3, #24]
 800a7e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a7e6:	431a      	orrs	r2, r3
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	69db      	ldr	r3, [r3, #28]
 800a7ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a7f0:	431a      	orrs	r2, r3
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6a1b      	ldr	r3, [r3, #32]
 800a7f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7fa:	ea42 0103 	orr.w	r1, r2, r3
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a802:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	430a      	orrs	r2, r1
 800a80c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	699b      	ldr	r3, [r3, #24]
 800a812:	0c1b      	lsrs	r3, r3, #16
 800a814:	f003 0104 	and.w	r1, r3, #4
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81c:	f003 0210 	and.w	r2, r3, #16
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	430a      	orrs	r2, r1
 800a826:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	69da      	ldr	r2, [r3, #28]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a836:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2200      	movs	r2, #0
 800a83c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2201      	movs	r2, #1
 800a842:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a846:	2300      	movs	r3, #0
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3708      	adds	r7, #8
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}

0800a850 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b082      	sub	sp, #8
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d101      	bne.n	800a862 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800a85e:	2301      	movs	r3, #1
 800a860:	e01a      	b.n	800a898 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2202      	movs	r2, #2
 800a866:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a878:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f7f7 fe30 	bl	80024e0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2200      	movs	r2, #0
 800a884:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2200      	movs	r2, #0
 800a892:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a896:	2300      	movs	r3, #0
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3708      	adds	r7, #8
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b088      	sub	sp, #32
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	60f8      	str	r0, [r7, #12]
 800a8a8:	60b9      	str	r1, [r7, #8]
 800a8aa:	603b      	str	r3, [r7, #0]
 800a8ac:	4613      	mov	r3, r2
 800a8ae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	d101      	bne.n	800a8c2 <HAL_SPI_Transmit+0x22>
 800a8be:	2302      	movs	r3, #2
 800a8c0:	e12d      	b.n	800ab1e <HAL_SPI_Transmit+0x27e>
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2201      	movs	r2, #1
 800a8c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a8ca:	f7fa f841 	bl	8004950 <HAL_GetTick>
 800a8ce:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a8d0:	88fb      	ldrh	r3, [r7, #6]
 800a8d2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	2b01      	cmp	r3, #1
 800a8de:	d002      	beq.n	800a8e6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a8e0:	2302      	movs	r3, #2
 800a8e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a8e4:	e116      	b.n	800ab14 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d002      	beq.n	800a8f2 <HAL_SPI_Transmit+0x52>
 800a8ec:	88fb      	ldrh	r3, [r7, #6]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d102      	bne.n	800a8f8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a8f6:	e10d      	b.n	800ab14 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2203      	movs	r2, #3
 800a8fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2200      	movs	r2, #0
 800a904:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	68ba      	ldr	r2, [r7, #8]
 800a90a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	88fa      	ldrh	r2, [r7, #6]
 800a910:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	88fa      	ldrh	r2, [r7, #6]
 800a916:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2200      	movs	r2, #0
 800a91c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	2200      	movs	r2, #0
 800a922:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2200      	movs	r2, #0
 800a928:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	2200      	movs	r2, #0
 800a92e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2200      	movs	r2, #0
 800a934:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	689b      	ldr	r3, [r3, #8]
 800a93a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a93e:	d10f      	bne.n	800a960 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a94e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	681a      	ldr	r2, [r3, #0]
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a95e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a96a:	2b40      	cmp	r3, #64	; 0x40
 800a96c:	d007      	beq.n	800a97e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a97c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	68db      	ldr	r3, [r3, #12]
 800a982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a986:	d14f      	bne.n	800aa28 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d002      	beq.n	800a996 <HAL_SPI_Transmit+0xf6>
 800a990:	8afb      	ldrh	r3, [r7, #22]
 800a992:	2b01      	cmp	r3, #1
 800a994:	d142      	bne.n	800aa1c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a99a:	881a      	ldrh	r2, [r3, #0]
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9a6:	1c9a      	adds	r2, r3, #2
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	3b01      	subs	r3, #1
 800a9b4:	b29a      	uxth	r2, r3
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a9ba:	e02f      	b.n	800aa1c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	689b      	ldr	r3, [r3, #8]
 800a9c2:	f003 0302 	and.w	r3, r3, #2
 800a9c6:	2b02      	cmp	r3, #2
 800a9c8:	d112      	bne.n	800a9f0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9ce:	881a      	ldrh	r2, [r3, #0]
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9da:	1c9a      	adds	r2, r3, #2
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a9e4:	b29b      	uxth	r3, r3
 800a9e6:	3b01      	subs	r3, #1
 800a9e8:	b29a      	uxth	r2, r3
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	86da      	strh	r2, [r3, #54]	; 0x36
 800a9ee:	e015      	b.n	800aa1c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a9f0:	f7f9 ffae 	bl	8004950 <HAL_GetTick>
 800a9f4:	4602      	mov	r2, r0
 800a9f6:	69bb      	ldr	r3, [r7, #24]
 800a9f8:	1ad3      	subs	r3, r2, r3
 800a9fa:	683a      	ldr	r2, [r7, #0]
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d803      	bhi.n	800aa08 <HAL_SPI_Transmit+0x168>
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa06:	d102      	bne.n	800aa0e <HAL_SPI_Transmit+0x16e>
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d106      	bne.n	800aa1c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800aa0e:	2303      	movs	r3, #3
 800aa10:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2201      	movs	r2, #1
 800aa16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800aa1a:	e07b      	b.n	800ab14 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa20:	b29b      	uxth	r3, r3
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d1ca      	bne.n	800a9bc <HAL_SPI_Transmit+0x11c>
 800aa26:	e050      	b.n	800aaca <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d002      	beq.n	800aa36 <HAL_SPI_Transmit+0x196>
 800aa30:	8afb      	ldrh	r3, [r7, #22]
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	d144      	bne.n	800aac0 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	330c      	adds	r3, #12
 800aa40:	7812      	ldrb	r2, [r2, #0]
 800aa42:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa48:	1c5a      	adds	r2, r3, #1
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa52:	b29b      	uxth	r3, r3
 800aa54:	3b01      	subs	r3, #1
 800aa56:	b29a      	uxth	r2, r3
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800aa5c:	e030      	b.n	800aac0 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	689b      	ldr	r3, [r3, #8]
 800aa64:	f003 0302 	and.w	r3, r3, #2
 800aa68:	2b02      	cmp	r3, #2
 800aa6a:	d113      	bne.n	800aa94 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	330c      	adds	r3, #12
 800aa76:	7812      	ldrb	r2, [r2, #0]
 800aa78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa7e:	1c5a      	adds	r2, r3, #1
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa88:	b29b      	uxth	r3, r3
 800aa8a:	3b01      	subs	r3, #1
 800aa8c:	b29a      	uxth	r2, r3
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	86da      	strh	r2, [r3, #54]	; 0x36
 800aa92:	e015      	b.n	800aac0 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa94:	f7f9 ff5c 	bl	8004950 <HAL_GetTick>
 800aa98:	4602      	mov	r2, r0
 800aa9a:	69bb      	ldr	r3, [r7, #24]
 800aa9c:	1ad3      	subs	r3, r2, r3
 800aa9e:	683a      	ldr	r2, [r7, #0]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d803      	bhi.n	800aaac <HAL_SPI_Transmit+0x20c>
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaaa:	d102      	bne.n	800aab2 <HAL_SPI_Transmit+0x212>
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d106      	bne.n	800aac0 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800aab2:	2303      	movs	r3, #3
 800aab4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2201      	movs	r2, #1
 800aaba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800aabe:	e029      	b.n	800ab14 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d1c9      	bne.n	800aa5e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800aaca:	69ba      	ldr	r2, [r7, #24]
 800aacc:	6839      	ldr	r1, [r7, #0]
 800aace:	68f8      	ldr	r0, [r7, #12]
 800aad0:	f000 fbee 	bl	800b2b0 <SPI_EndRxTxTransaction>
 800aad4:	4603      	mov	r3, r0
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d002      	beq.n	800aae0 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2220      	movs	r2, #32
 800aade:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	689b      	ldr	r3, [r3, #8]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d10a      	bne.n	800aafe <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aae8:	2300      	movs	r3, #0
 800aaea:	613b      	str	r3, [r7, #16]
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	68db      	ldr	r3, [r3, #12]
 800aaf2:	613b      	str	r3, [r7, #16]
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	689b      	ldr	r3, [r3, #8]
 800aafa:	613b      	str	r3, [r7, #16]
 800aafc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d002      	beq.n	800ab0c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800ab06:	2301      	movs	r3, #1
 800ab08:	77fb      	strb	r3, [r7, #31]
 800ab0a:	e003      	b.n	800ab14 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2201      	movs	r2, #1
 800ab10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2200      	movs	r2, #0
 800ab18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ab1c:	7ffb      	ldrb	r3, [r7, #31]
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3720      	adds	r7, #32
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}

0800ab26 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab26:	b580      	push	{r7, lr}
 800ab28:	b088      	sub	sp, #32
 800ab2a:	af02      	add	r7, sp, #8
 800ab2c:	60f8      	str	r0, [r7, #12]
 800ab2e:	60b9      	str	r1, [r7, #8]
 800ab30:	603b      	str	r3, [r7, #0]
 800ab32:	4613      	mov	r3, r2
 800ab34:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ab36:	2300      	movs	r3, #0
 800ab38:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ab40:	b2db      	uxtb	r3, r3
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d002      	beq.n	800ab4c <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800ab46:	2302      	movs	r3, #2
 800ab48:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ab4a:	e0fb      	b.n	800ad44 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ab54:	d112      	bne.n	800ab7c <HAL_SPI_Receive+0x56>
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	689b      	ldr	r3, [r3, #8]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d10e      	bne.n	800ab7c <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2204      	movs	r2, #4
 800ab62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ab66:	88fa      	ldrh	r2, [r7, #6]
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	9300      	str	r3, [sp, #0]
 800ab6c:	4613      	mov	r3, r2
 800ab6e:	68ba      	ldr	r2, [r7, #8]
 800ab70:	68b9      	ldr	r1, [r7, #8]
 800ab72:	68f8      	ldr	r0, [r7, #12]
 800ab74:	f000 f8ef 	bl	800ad56 <HAL_SPI_TransmitReceive>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	e0e8      	b.n	800ad4e <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d101      	bne.n	800ab8a <HAL_SPI_Receive+0x64>
 800ab86:	2302      	movs	r3, #2
 800ab88:	e0e1      	b.n	800ad4e <HAL_SPI_Receive+0x228>
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2201      	movs	r2, #1
 800ab8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ab92:	f7f9 fedd 	bl	8004950 <HAL_GetTick>
 800ab96:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d002      	beq.n	800aba4 <HAL_SPI_Receive+0x7e>
 800ab9e:	88fb      	ldrh	r3, [r7, #6]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d102      	bne.n	800abaa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800aba4:	2301      	movs	r3, #1
 800aba6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800aba8:	e0cc      	b.n	800ad44 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2204      	movs	r2, #4
 800abae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2200      	movs	r2, #0
 800abb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	68ba      	ldr	r2, [r7, #8]
 800abbc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	88fa      	ldrh	r2, [r7, #6]
 800abc2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	88fa      	ldrh	r2, [r7, #6]
 800abc8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2200      	movs	r2, #0
 800abce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2200      	movs	r2, #0
 800abd4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2200      	movs	r2, #0
 800abda:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2200      	movs	r2, #0
 800abe0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2200      	movs	r2, #0
 800abe6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	689b      	ldr	r3, [r3, #8]
 800abec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abf0:	d10f      	bne.n	800ac12 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ac10:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac1c:	2b40      	cmp	r3, #64	; 0x40
 800ac1e:	d007      	beq.n	800ac30 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac2e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	68db      	ldr	r3, [r3, #12]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d16a      	bne.n	800ad0e <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800ac38:	e032      	b.n	800aca0 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	689b      	ldr	r3, [r3, #8]
 800ac40:	f003 0301 	and.w	r3, r3, #1
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d115      	bne.n	800ac74 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f103 020c 	add.w	r2, r3, #12
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac54:	7812      	ldrb	r2, [r2, #0]
 800ac56:	b2d2      	uxtb	r2, r2
 800ac58:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac5e:	1c5a      	adds	r2, r3, #1
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac68:	b29b      	uxth	r3, r3
 800ac6a:	3b01      	subs	r3, #1
 800ac6c:	b29a      	uxth	r2, r3
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ac72:	e015      	b.n	800aca0 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ac74:	f7f9 fe6c 	bl	8004950 <HAL_GetTick>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	1ad3      	subs	r3, r2, r3
 800ac7e:	683a      	ldr	r2, [r7, #0]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d803      	bhi.n	800ac8c <HAL_SPI_Receive+0x166>
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac8a:	d102      	bne.n	800ac92 <HAL_SPI_Receive+0x16c>
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d106      	bne.n	800aca0 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800ac92:	2303      	movs	r3, #3
 800ac94:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2201      	movs	r2, #1
 800ac9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800ac9e:	e051      	b.n	800ad44 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aca4:	b29b      	uxth	r3, r3
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d1c7      	bne.n	800ac3a <HAL_SPI_Receive+0x114>
 800acaa:	e035      	b.n	800ad18 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	689b      	ldr	r3, [r3, #8]
 800acb2:	f003 0301 	and.w	r3, r3, #1
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d113      	bne.n	800ace2 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	68da      	ldr	r2, [r3, #12]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc4:	b292      	uxth	r2, r2
 800acc6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800accc:	1c9a      	adds	r2, r3, #2
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	3b01      	subs	r3, #1
 800acda:	b29a      	uxth	r2, r3
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ace0:	e015      	b.n	800ad0e <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ace2:	f7f9 fe35 	bl	8004950 <HAL_GetTick>
 800ace6:	4602      	mov	r2, r0
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	1ad3      	subs	r3, r2, r3
 800acec:	683a      	ldr	r2, [r7, #0]
 800acee:	429a      	cmp	r2, r3
 800acf0:	d803      	bhi.n	800acfa <HAL_SPI_Receive+0x1d4>
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acf8:	d102      	bne.n	800ad00 <HAL_SPI_Receive+0x1da>
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d106      	bne.n	800ad0e <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800ad00:	2303      	movs	r3, #3
 800ad02:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2201      	movs	r2, #1
 800ad08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800ad0c:	e01a      	b.n	800ad44 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad12:	b29b      	uxth	r3, r3
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d1c9      	bne.n	800acac <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ad18:	693a      	ldr	r2, [r7, #16]
 800ad1a:	6839      	ldr	r1, [r7, #0]
 800ad1c:	68f8      	ldr	r0, [r7, #12]
 800ad1e:	f000 fa61 	bl	800b1e4 <SPI_EndRxTransaction>
 800ad22:	4603      	mov	r3, r0
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d002      	beq.n	800ad2e <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2220      	movs	r2, #32
 800ad2c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d002      	beq.n	800ad3c <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800ad36:	2301      	movs	r3, #1
 800ad38:	75fb      	strb	r3, [r7, #23]
 800ad3a:	e003      	b.n	800ad44 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2201      	movs	r2, #1
 800ad40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2200      	movs	r2, #0
 800ad48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ad4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3718      	adds	r7, #24
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}

0800ad56 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ad56:	b580      	push	{r7, lr}
 800ad58:	b08c      	sub	sp, #48	; 0x30
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	60f8      	str	r0, [r7, #12]
 800ad5e:	60b9      	str	r1, [r7, #8]
 800ad60:	607a      	str	r2, [r7, #4]
 800ad62:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ad64:	2301      	movs	r3, #1
 800ad66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d101      	bne.n	800ad7c <HAL_SPI_TransmitReceive+0x26>
 800ad78:	2302      	movs	r3, #2
 800ad7a:	e198      	b.n	800b0ae <HAL_SPI_TransmitReceive+0x358>
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	2201      	movs	r2, #1
 800ad80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ad84:	f7f9 fde4 	bl	8004950 <HAL_GetTick>
 800ad88:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ad90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800ad9a:	887b      	ldrh	r3, [r7, #2]
 800ad9c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ad9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ada2:	2b01      	cmp	r3, #1
 800ada4:	d00f      	beq.n	800adc6 <HAL_SPI_TransmitReceive+0x70>
 800ada6:	69fb      	ldr	r3, [r7, #28]
 800ada8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800adac:	d107      	bne.n	800adbe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	689b      	ldr	r3, [r3, #8]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d103      	bne.n	800adbe <HAL_SPI_TransmitReceive+0x68>
 800adb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800adba:	2b04      	cmp	r3, #4
 800adbc:	d003      	beq.n	800adc6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800adbe:	2302      	movs	r3, #2
 800adc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800adc4:	e16d      	b.n	800b0a2 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d005      	beq.n	800add8 <HAL_SPI_TransmitReceive+0x82>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d002      	beq.n	800add8 <HAL_SPI_TransmitReceive+0x82>
 800add2:	887b      	ldrh	r3, [r7, #2]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d103      	bne.n	800ade0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800add8:	2301      	movs	r3, #1
 800adda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800adde:	e160      	b.n	800b0a2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ade6:	b2db      	uxtb	r3, r3
 800ade8:	2b04      	cmp	r3, #4
 800adea:	d003      	beq.n	800adf4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	2205      	movs	r2, #5
 800adf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2200      	movs	r2, #0
 800adf8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	887a      	ldrh	r2, [r7, #2]
 800ae04:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	887a      	ldrh	r2, [r7, #2]
 800ae0a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	68ba      	ldr	r2, [r7, #8]
 800ae10:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	887a      	ldrh	r2, [r7, #2]
 800ae16:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	887a      	ldrh	r2, [r7, #2]
 800ae1c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2200      	movs	r2, #0
 800ae22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2200      	movs	r2, #0
 800ae28:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae34:	2b40      	cmp	r3, #64	; 0x40
 800ae36:	d007      	beq.n	800ae48 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	681a      	ldr	r2, [r3, #0]
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	68db      	ldr	r3, [r3, #12]
 800ae4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae50:	d17c      	bne.n	800af4c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	685b      	ldr	r3, [r3, #4]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d002      	beq.n	800ae60 <HAL_SPI_TransmitReceive+0x10a>
 800ae5a:	8b7b      	ldrh	r3, [r7, #26]
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	d16a      	bne.n	800af36 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae64:	881a      	ldrh	r2, [r3, #0]
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae70:	1c9a      	adds	r2, r3, #2
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae7a:	b29b      	uxth	r3, r3
 800ae7c:	3b01      	subs	r3, #1
 800ae7e:	b29a      	uxth	r2, r3
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ae84:	e057      	b.n	800af36 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	f003 0302 	and.w	r3, r3, #2
 800ae90:	2b02      	cmp	r3, #2
 800ae92:	d11b      	bne.n	800aecc <HAL_SPI_TransmitReceive+0x176>
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d016      	beq.n	800aecc <HAL_SPI_TransmitReceive+0x176>
 800ae9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	d113      	bne.n	800aecc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aea8:	881a      	ldrh	r2, [r3, #0]
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeb4:	1c9a      	adds	r2, r3, #2
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	3b01      	subs	r3, #1
 800aec2:	b29a      	uxth	r2, r3
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aec8:	2300      	movs	r3, #0
 800aeca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	689b      	ldr	r3, [r3, #8]
 800aed2:	f003 0301 	and.w	r3, r3, #1
 800aed6:	2b01      	cmp	r3, #1
 800aed8:	d119      	bne.n	800af0e <HAL_SPI_TransmitReceive+0x1b8>
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aede:	b29b      	uxth	r3, r3
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d014      	beq.n	800af0e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	68da      	ldr	r2, [r3, #12]
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeee:	b292      	uxth	r2, r2
 800aef0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aef6:	1c9a      	adds	r2, r3, #2
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af00:	b29b      	uxth	r3, r3
 800af02:	3b01      	subs	r3, #1
 800af04:	b29a      	uxth	r2, r3
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800af0a:	2301      	movs	r3, #1
 800af0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800af0e:	f7f9 fd1f 	bl	8004950 <HAL_GetTick>
 800af12:	4602      	mov	r2, r0
 800af14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af16:	1ad3      	subs	r3, r2, r3
 800af18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d80b      	bhi.n	800af36 <HAL_SPI_TransmitReceive+0x1e0>
 800af1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af24:	d007      	beq.n	800af36 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800af26:	2303      	movs	r3, #3
 800af28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	2201      	movs	r2, #1
 800af30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800af34:	e0b5      	b.n	800b0a2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800af3a:	b29b      	uxth	r3, r3
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d1a2      	bne.n	800ae86 <HAL_SPI_TransmitReceive+0x130>
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af44:	b29b      	uxth	r3, r3
 800af46:	2b00      	cmp	r3, #0
 800af48:	d19d      	bne.n	800ae86 <HAL_SPI_TransmitReceive+0x130>
 800af4a:	e080      	b.n	800b04e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d002      	beq.n	800af5a <HAL_SPI_TransmitReceive+0x204>
 800af54:	8b7b      	ldrh	r3, [r7, #26]
 800af56:	2b01      	cmp	r3, #1
 800af58:	d16f      	bne.n	800b03a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	330c      	adds	r3, #12
 800af64:	7812      	ldrb	r2, [r2, #0]
 800af66:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af6c:	1c5a      	adds	r2, r3, #1
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800af76:	b29b      	uxth	r3, r3
 800af78:	3b01      	subs	r3, #1
 800af7a:	b29a      	uxth	r2, r3
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800af80:	e05b      	b.n	800b03a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	f003 0302 	and.w	r3, r3, #2
 800af8c:	2b02      	cmp	r3, #2
 800af8e:	d11c      	bne.n	800afca <HAL_SPI_TransmitReceive+0x274>
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800af94:	b29b      	uxth	r3, r3
 800af96:	2b00      	cmp	r3, #0
 800af98:	d017      	beq.n	800afca <HAL_SPI_TransmitReceive+0x274>
 800af9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d114      	bne.n	800afca <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	330c      	adds	r3, #12
 800afaa:	7812      	ldrb	r2, [r2, #0]
 800afac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afb2:	1c5a      	adds	r2, r3, #1
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800afbc:	b29b      	uxth	r3, r3
 800afbe:	3b01      	subs	r3, #1
 800afc0:	b29a      	uxth	r2, r3
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800afc6:	2300      	movs	r3, #0
 800afc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	f003 0301 	and.w	r3, r3, #1
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	d119      	bne.n	800b00c <HAL_SPI_TransmitReceive+0x2b6>
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800afdc:	b29b      	uxth	r3, r3
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d014      	beq.n	800b00c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	68da      	ldr	r2, [r3, #12]
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afec:	b2d2      	uxtb	r2, r2
 800afee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aff4:	1c5a      	adds	r2, r3, #1
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800affe:	b29b      	uxth	r3, r3
 800b000:	3b01      	subs	r3, #1
 800b002:	b29a      	uxth	r2, r3
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b008:	2301      	movs	r3, #1
 800b00a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b00c:	f7f9 fca0 	bl	8004950 <HAL_GetTick>
 800b010:	4602      	mov	r2, r0
 800b012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b014:	1ad3      	subs	r3, r2, r3
 800b016:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b018:	429a      	cmp	r2, r3
 800b01a:	d803      	bhi.n	800b024 <HAL_SPI_TransmitReceive+0x2ce>
 800b01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b01e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b022:	d102      	bne.n	800b02a <HAL_SPI_TransmitReceive+0x2d4>
 800b024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b026:	2b00      	cmp	r3, #0
 800b028:	d107      	bne.n	800b03a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800b02a:	2303      	movs	r3, #3
 800b02c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2201      	movs	r2, #1
 800b034:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800b038:	e033      	b.n	800b0a2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b03e:	b29b      	uxth	r3, r3
 800b040:	2b00      	cmp	r3, #0
 800b042:	d19e      	bne.n	800af82 <HAL_SPI_TransmitReceive+0x22c>
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b048:	b29b      	uxth	r3, r3
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d199      	bne.n	800af82 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b04e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b050:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b052:	68f8      	ldr	r0, [r7, #12]
 800b054:	f000 f92c 	bl	800b2b0 <SPI_EndRxTxTransaction>
 800b058:	4603      	mov	r3, r0
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d006      	beq.n	800b06c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800b05e:	2301      	movs	r3, #1
 800b060:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2220      	movs	r2, #32
 800b068:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b06a:	e01a      	b.n	800b0a2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	689b      	ldr	r3, [r3, #8]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d10a      	bne.n	800b08a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b074:	2300      	movs	r3, #0
 800b076:	617b      	str	r3, [r7, #20]
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	68db      	ldr	r3, [r3, #12]
 800b07e:	617b      	str	r3, [r7, #20]
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	689b      	ldr	r3, [r3, #8]
 800b086:	617b      	str	r3, [r7, #20]
 800b088:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d003      	beq.n	800b09a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800b092:	2301      	movs	r3, #1
 800b094:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b098:	e003      	b.n	800b0a2 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2201      	movs	r2, #1
 800b09e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b0aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3730      	adds	r7, #48	; 0x30
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}

0800b0b6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800b0b6:	b480      	push	{r7}
 800b0b8:	b083      	sub	sp, #12
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b0c4:	b2db      	uxtb	r3, r3
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	370c      	adds	r7, #12
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d0:	4770      	bx	lr
	...

0800b0d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b088      	sub	sp, #32
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	603b      	str	r3, [r7, #0]
 800b0e0:	4613      	mov	r3, r2
 800b0e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b0e4:	f7f9 fc34 	bl	8004950 <HAL_GetTick>
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ec:	1a9b      	subs	r3, r3, r2
 800b0ee:	683a      	ldr	r2, [r7, #0]
 800b0f0:	4413      	add	r3, r2
 800b0f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b0f4:	f7f9 fc2c 	bl	8004950 <HAL_GetTick>
 800b0f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b0fa:	4b39      	ldr	r3, [pc, #228]	; (800b1e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	015b      	lsls	r3, r3, #5
 800b100:	0d1b      	lsrs	r3, r3, #20
 800b102:	69fa      	ldr	r2, [r7, #28]
 800b104:	fb02 f303 	mul.w	r3, r2, r3
 800b108:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b10a:	e054      	b.n	800b1b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b112:	d050      	beq.n	800b1b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b114:	f7f9 fc1c 	bl	8004950 <HAL_GetTick>
 800b118:	4602      	mov	r2, r0
 800b11a:	69bb      	ldr	r3, [r7, #24]
 800b11c:	1ad3      	subs	r3, r2, r3
 800b11e:	69fa      	ldr	r2, [r7, #28]
 800b120:	429a      	cmp	r2, r3
 800b122:	d902      	bls.n	800b12a <SPI_WaitFlagStateUntilTimeout+0x56>
 800b124:	69fb      	ldr	r3, [r7, #28]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d13d      	bne.n	800b1a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	685a      	ldr	r2, [r3, #4]
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b138:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b142:	d111      	bne.n	800b168 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	689b      	ldr	r3, [r3, #8]
 800b148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b14c:	d004      	beq.n	800b158 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	689b      	ldr	r3, [r3, #8]
 800b152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b156:	d107      	bne.n	800b168 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	681a      	ldr	r2, [r3, #0]
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b166:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b16c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b170:	d10f      	bne.n	800b192 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	681a      	ldr	r2, [r3, #0]
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b180:	601a      	str	r2, [r3, #0]
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	681a      	ldr	r2, [r3, #0]
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b190:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2201      	movs	r2, #1
 800b196:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2200      	movs	r2, #0
 800b19e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b1a2:	2303      	movs	r3, #3
 800b1a4:	e017      	b.n	800b1d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d101      	bne.n	800b1b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	3b01      	subs	r3, #1
 800b1b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	689a      	ldr	r2, [r3, #8]
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	4013      	ands	r3, r2
 800b1c0:	68ba      	ldr	r2, [r7, #8]
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	bf0c      	ite	eq
 800b1c6:	2301      	moveq	r3, #1
 800b1c8:	2300      	movne	r3, #0
 800b1ca:	b2db      	uxtb	r3, r3
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	79fb      	ldrb	r3, [r7, #7]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d19b      	bne.n	800b10c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b1d4:	2300      	movs	r3, #0
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3720      	adds	r7, #32
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}
 800b1de:	bf00      	nop
 800b1e0:	20002bf8 	.word	0x20002bf8

0800b1e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b086      	sub	sp, #24
 800b1e8:	af02      	add	r7, sp, #8
 800b1ea:	60f8      	str	r0, [r7, #12]
 800b1ec:	60b9      	str	r1, [r7, #8]
 800b1ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b1f8:	d111      	bne.n	800b21e <SPI_EndRxTransaction+0x3a>
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	689b      	ldr	r3, [r3, #8]
 800b1fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b202:	d004      	beq.n	800b20e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	689b      	ldr	r3, [r3, #8]
 800b208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b20c:	d107      	bne.n	800b21e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	681a      	ldr	r2, [r3, #0]
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b21c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b226:	d12a      	bne.n	800b27e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	689b      	ldr	r3, [r3, #8]
 800b22c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b230:	d012      	beq.n	800b258 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	9300      	str	r3, [sp, #0]
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	2200      	movs	r2, #0
 800b23a:	2180      	movs	r1, #128	; 0x80
 800b23c:	68f8      	ldr	r0, [r7, #12]
 800b23e:	f7ff ff49 	bl	800b0d4 <SPI_WaitFlagStateUntilTimeout>
 800b242:	4603      	mov	r3, r0
 800b244:	2b00      	cmp	r3, #0
 800b246:	d02d      	beq.n	800b2a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b24c:	f043 0220 	orr.w	r2, r3, #32
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b254:	2303      	movs	r3, #3
 800b256:	e026      	b.n	800b2a6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	9300      	str	r3, [sp, #0]
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	2200      	movs	r2, #0
 800b260:	2101      	movs	r1, #1
 800b262:	68f8      	ldr	r0, [r7, #12]
 800b264:	f7ff ff36 	bl	800b0d4 <SPI_WaitFlagStateUntilTimeout>
 800b268:	4603      	mov	r3, r0
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d01a      	beq.n	800b2a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b272:	f043 0220 	orr.w	r2, r3, #32
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b27a:	2303      	movs	r3, #3
 800b27c:	e013      	b.n	800b2a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	9300      	str	r3, [sp, #0]
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	2200      	movs	r2, #0
 800b286:	2101      	movs	r1, #1
 800b288:	68f8      	ldr	r0, [r7, #12]
 800b28a:	f7ff ff23 	bl	800b0d4 <SPI_WaitFlagStateUntilTimeout>
 800b28e:	4603      	mov	r3, r0
 800b290:	2b00      	cmp	r3, #0
 800b292:	d007      	beq.n	800b2a4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b298:	f043 0220 	orr.w	r2, r3, #32
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b2a0:	2303      	movs	r3, #3
 800b2a2:	e000      	b.n	800b2a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800b2a4:	2300      	movs	r3, #0
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3710      	adds	r7, #16
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
	...

0800b2b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b088      	sub	sp, #32
 800b2b4:	af02      	add	r7, sp, #8
 800b2b6:	60f8      	str	r0, [r7, #12]
 800b2b8:	60b9      	str	r1, [r7, #8]
 800b2ba:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	9300      	str	r3, [sp, #0]
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	2102      	movs	r1, #2
 800b2c6:	68f8      	ldr	r0, [r7, #12]
 800b2c8:	f7ff ff04 	bl	800b0d4 <SPI_WaitFlagStateUntilTimeout>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d007      	beq.n	800b2e2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2d6:	f043 0220 	orr.w	r2, r3, #32
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800b2de:	2303      	movs	r3, #3
 800b2e0:	e032      	b.n	800b348 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b2e2:	4b1b      	ldr	r3, [pc, #108]	; (800b350 <SPI_EndRxTxTransaction+0xa0>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	4a1b      	ldr	r2, [pc, #108]	; (800b354 <SPI_EndRxTxTransaction+0xa4>)
 800b2e8:	fba2 2303 	umull	r2, r3, r2, r3
 800b2ec:	0d5b      	lsrs	r3, r3, #21
 800b2ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b2f2:	fb02 f303 	mul.w	r3, r2, r3
 800b2f6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b300:	d112      	bne.n	800b328 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	9300      	str	r3, [sp, #0]
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	2200      	movs	r2, #0
 800b30a:	2180      	movs	r1, #128	; 0x80
 800b30c:	68f8      	ldr	r0, [r7, #12]
 800b30e:	f7ff fee1 	bl	800b0d4 <SPI_WaitFlagStateUntilTimeout>
 800b312:	4603      	mov	r3, r0
 800b314:	2b00      	cmp	r3, #0
 800b316:	d016      	beq.n	800b346 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b31c:	f043 0220 	orr.w	r2, r3, #32
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b324:	2303      	movs	r3, #3
 800b326:	e00f      	b.n	800b348 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d00a      	beq.n	800b344 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	3b01      	subs	r3, #1
 800b332:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	689b      	ldr	r3, [r3, #8]
 800b33a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b33e:	2b80      	cmp	r3, #128	; 0x80
 800b340:	d0f2      	beq.n	800b328 <SPI_EndRxTxTransaction+0x78>
 800b342:	e000      	b.n	800b346 <SPI_EndRxTxTransaction+0x96>
        break;
 800b344:	bf00      	nop
  }

  return HAL_OK;
 800b346:	2300      	movs	r3, #0
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3718      	adds	r7, #24
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	20002bf8 	.word	0x20002bf8
 800b354:	165e9f81 	.word	0x165e9f81

0800b358 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b082      	sub	sp, #8
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d101      	bne.n	800b36a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b366:	2301      	movs	r3, #1
 800b368:	e041      	b.n	800b3ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b370:	b2db      	uxtb	r3, r3
 800b372:	2b00      	cmp	r3, #0
 800b374:	d106      	bne.n	800b384 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2200      	movs	r2, #0
 800b37a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f7f7 faf6 	bl	8002970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2202      	movs	r2, #2
 800b388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681a      	ldr	r2, [r3, #0]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	3304      	adds	r3, #4
 800b394:	4619      	mov	r1, r3
 800b396:	4610      	mov	r0, r2
 800b398:	f000 fa7e 	bl	800b898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2201      	movs	r2, #1
 800b3a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2201      	movs	r2, #1
 800b3c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2201      	movs	r2, #1
 800b3e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b3ec:	2300      	movs	r3, #0
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3708      	adds	r7, #8
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}
	...

0800b3f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b085      	sub	sp, #20
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b406:	b2db      	uxtb	r3, r3
 800b408:	2b01      	cmp	r3, #1
 800b40a:	d001      	beq.n	800b410 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b40c:	2301      	movs	r3, #1
 800b40e:	e04e      	b.n	800b4ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2202      	movs	r2, #2
 800b414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	68da      	ldr	r2, [r3, #12]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f042 0201 	orr.w	r2, r2, #1
 800b426:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4a23      	ldr	r2, [pc, #140]	; (800b4bc <HAL_TIM_Base_Start_IT+0xc4>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d022      	beq.n	800b478 <HAL_TIM_Base_Start_IT+0x80>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b43a:	d01d      	beq.n	800b478 <HAL_TIM_Base_Start_IT+0x80>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4a1f      	ldr	r2, [pc, #124]	; (800b4c0 <HAL_TIM_Base_Start_IT+0xc8>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d018      	beq.n	800b478 <HAL_TIM_Base_Start_IT+0x80>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a1e      	ldr	r2, [pc, #120]	; (800b4c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d013      	beq.n	800b478 <HAL_TIM_Base_Start_IT+0x80>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	4a1c      	ldr	r2, [pc, #112]	; (800b4c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800b456:	4293      	cmp	r3, r2
 800b458:	d00e      	beq.n	800b478 <HAL_TIM_Base_Start_IT+0x80>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	4a1b      	ldr	r2, [pc, #108]	; (800b4cc <HAL_TIM_Base_Start_IT+0xd4>)
 800b460:	4293      	cmp	r3, r2
 800b462:	d009      	beq.n	800b478 <HAL_TIM_Base_Start_IT+0x80>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	4a19      	ldr	r2, [pc, #100]	; (800b4d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d004      	beq.n	800b478 <HAL_TIM_Base_Start_IT+0x80>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	4a18      	ldr	r2, [pc, #96]	; (800b4d4 <HAL_TIM_Base_Start_IT+0xdc>)
 800b474:	4293      	cmp	r3, r2
 800b476:	d111      	bne.n	800b49c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	689b      	ldr	r3, [r3, #8]
 800b47e:	f003 0307 	and.w	r3, r3, #7
 800b482:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2b06      	cmp	r3, #6
 800b488:	d010      	beq.n	800b4ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	681a      	ldr	r2, [r3, #0]
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f042 0201 	orr.w	r2, r2, #1
 800b498:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b49a:	e007      	b.n	800b4ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	681a      	ldr	r2, [r3, #0]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f042 0201 	orr.w	r2, r2, #1
 800b4aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b4ac:	2300      	movs	r3, #0
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3714      	adds	r7, #20
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b8:	4770      	bx	lr
 800b4ba:	bf00      	nop
 800b4bc:	40010000 	.word	0x40010000
 800b4c0:	40000400 	.word	0x40000400
 800b4c4:	40000800 	.word	0x40000800
 800b4c8:	40000c00 	.word	0x40000c00
 800b4cc:	40010400 	.word	0x40010400
 800b4d0:	40014000 	.word	0x40014000
 800b4d4:	40001800 	.word	0x40001800

0800b4d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b084      	sub	sp, #16
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	68db      	ldr	r3, [r3, #12]
 800b4e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	691b      	ldr	r3, [r3, #16]
 800b4ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	f003 0302 	and.w	r3, r3, #2
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d020      	beq.n	800b53c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	f003 0302 	and.w	r3, r3, #2
 800b500:	2b00      	cmp	r3, #0
 800b502:	d01b      	beq.n	800b53c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f06f 0202 	mvn.w	r2, #2
 800b50c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2201      	movs	r2, #1
 800b512:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	699b      	ldr	r3, [r3, #24]
 800b51a:	f003 0303 	and.w	r3, r3, #3
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d003      	beq.n	800b52a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f000 f999 	bl	800b85a <HAL_TIM_IC_CaptureCallback>
 800b528:	e005      	b.n	800b536 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f000 f98b 	bl	800b846 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f000 f99c 	bl	800b86e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2200      	movs	r2, #0
 800b53a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	f003 0304 	and.w	r3, r3, #4
 800b542:	2b00      	cmp	r3, #0
 800b544:	d020      	beq.n	800b588 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	f003 0304 	and.w	r3, r3, #4
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d01b      	beq.n	800b588 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f06f 0204 	mvn.w	r2, #4
 800b558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2202      	movs	r2, #2
 800b55e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	699b      	ldr	r3, [r3, #24]
 800b566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d003      	beq.n	800b576 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f000 f973 	bl	800b85a <HAL_TIM_IC_CaptureCallback>
 800b574:	e005      	b.n	800b582 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f000 f965 	bl	800b846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f000 f976 	bl	800b86e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2200      	movs	r2, #0
 800b586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	f003 0308 	and.w	r3, r3, #8
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d020      	beq.n	800b5d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	f003 0308 	and.w	r3, r3, #8
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d01b      	beq.n	800b5d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f06f 0208 	mvn.w	r2, #8
 800b5a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2204      	movs	r2, #4
 800b5aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	69db      	ldr	r3, [r3, #28]
 800b5b2:	f003 0303 	and.w	r3, r3, #3
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d003      	beq.n	800b5c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f000 f94d 	bl	800b85a <HAL_TIM_IC_CaptureCallback>
 800b5c0:	e005      	b.n	800b5ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f000 f93f 	bl	800b846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f000 f950 	bl	800b86e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	f003 0310 	and.w	r3, r3, #16
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d020      	beq.n	800b620 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	f003 0310 	and.w	r3, r3, #16
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d01b      	beq.n	800b620 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f06f 0210 	mvn.w	r2, #16
 800b5f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2208      	movs	r2, #8
 800b5f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	69db      	ldr	r3, [r3, #28]
 800b5fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b602:	2b00      	cmp	r3, #0
 800b604:	d003      	beq.n	800b60e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f000 f927 	bl	800b85a <HAL_TIM_IC_CaptureCallback>
 800b60c:	e005      	b.n	800b61a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 f919 	bl	800b846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 f92a 	bl	800b86e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2200      	movs	r2, #0
 800b61e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	f003 0301 	and.w	r3, r3, #1
 800b626:	2b00      	cmp	r3, #0
 800b628:	d00c      	beq.n	800b644 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	f003 0301 	and.w	r3, r3, #1
 800b630:	2b00      	cmp	r3, #0
 800b632:	d007      	beq.n	800b644 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f06f 0201 	mvn.w	r2, #1
 800b63c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f7f6 feb8 	bl	80023b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d00c      	beq.n	800b668 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b654:	2b00      	cmp	r3, #0
 800b656:	d007      	beq.n	800b668 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f000 fae4 	bl	800bc30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d00c      	beq.n	800b68c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d007      	beq.n	800b68c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f000 f8fb 	bl	800b882 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	f003 0320 	and.w	r3, r3, #32
 800b692:	2b00      	cmp	r3, #0
 800b694:	d00c      	beq.n	800b6b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	f003 0320 	and.w	r3, r3, #32
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d007      	beq.n	800b6b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f06f 0220 	mvn.w	r2, #32
 800b6a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f000 fab6 	bl	800bc1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b6b0:	bf00      	nop
 800b6b2:	3710      	adds	r7, #16
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}

0800b6b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	d101      	bne.n	800b6d4 <HAL_TIM_ConfigClockSource+0x1c>
 800b6d0:	2302      	movs	r3, #2
 800b6d2:	e0b4      	b.n	800b83e <HAL_TIM_ConfigClockSource+0x186>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2202      	movs	r2, #2
 800b6e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	689b      	ldr	r3, [r3, #8]
 800b6ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b6f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b6fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	68ba      	ldr	r2, [r7, #8]
 800b702:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b70c:	d03e      	beq.n	800b78c <HAL_TIM_ConfigClockSource+0xd4>
 800b70e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b712:	f200 8087 	bhi.w	800b824 <HAL_TIM_ConfigClockSource+0x16c>
 800b716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b71a:	f000 8086 	beq.w	800b82a <HAL_TIM_ConfigClockSource+0x172>
 800b71e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b722:	d87f      	bhi.n	800b824 <HAL_TIM_ConfigClockSource+0x16c>
 800b724:	2b70      	cmp	r3, #112	; 0x70
 800b726:	d01a      	beq.n	800b75e <HAL_TIM_ConfigClockSource+0xa6>
 800b728:	2b70      	cmp	r3, #112	; 0x70
 800b72a:	d87b      	bhi.n	800b824 <HAL_TIM_ConfigClockSource+0x16c>
 800b72c:	2b60      	cmp	r3, #96	; 0x60
 800b72e:	d050      	beq.n	800b7d2 <HAL_TIM_ConfigClockSource+0x11a>
 800b730:	2b60      	cmp	r3, #96	; 0x60
 800b732:	d877      	bhi.n	800b824 <HAL_TIM_ConfigClockSource+0x16c>
 800b734:	2b50      	cmp	r3, #80	; 0x50
 800b736:	d03c      	beq.n	800b7b2 <HAL_TIM_ConfigClockSource+0xfa>
 800b738:	2b50      	cmp	r3, #80	; 0x50
 800b73a:	d873      	bhi.n	800b824 <HAL_TIM_ConfigClockSource+0x16c>
 800b73c:	2b40      	cmp	r3, #64	; 0x40
 800b73e:	d058      	beq.n	800b7f2 <HAL_TIM_ConfigClockSource+0x13a>
 800b740:	2b40      	cmp	r3, #64	; 0x40
 800b742:	d86f      	bhi.n	800b824 <HAL_TIM_ConfigClockSource+0x16c>
 800b744:	2b30      	cmp	r3, #48	; 0x30
 800b746:	d064      	beq.n	800b812 <HAL_TIM_ConfigClockSource+0x15a>
 800b748:	2b30      	cmp	r3, #48	; 0x30
 800b74a:	d86b      	bhi.n	800b824 <HAL_TIM_ConfigClockSource+0x16c>
 800b74c:	2b20      	cmp	r3, #32
 800b74e:	d060      	beq.n	800b812 <HAL_TIM_ConfigClockSource+0x15a>
 800b750:	2b20      	cmp	r3, #32
 800b752:	d867      	bhi.n	800b824 <HAL_TIM_ConfigClockSource+0x16c>
 800b754:	2b00      	cmp	r3, #0
 800b756:	d05c      	beq.n	800b812 <HAL_TIM_ConfigClockSource+0x15a>
 800b758:	2b10      	cmp	r3, #16
 800b75a:	d05a      	beq.n	800b812 <HAL_TIM_ConfigClockSource+0x15a>
 800b75c:	e062      	b.n	800b824 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b76e:	f000 f9b9 	bl	800bae4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	689b      	ldr	r3, [r3, #8]
 800b778:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b780:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	68ba      	ldr	r2, [r7, #8]
 800b788:	609a      	str	r2, [r3, #8]
      break;
 800b78a:	e04f      	b.n	800b82c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b79c:	f000 f9a2 	bl	800bae4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	689a      	ldr	r2, [r3, #8]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b7ae:	609a      	str	r2, [r3, #8]
      break;
 800b7b0:	e03c      	b.n	800b82c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7be:	461a      	mov	r2, r3
 800b7c0:	f000 f916 	bl	800b9f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	2150      	movs	r1, #80	; 0x50
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f000 f96f 	bl	800baae <TIM_ITRx_SetConfig>
      break;
 800b7d0:	e02c      	b.n	800b82c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b7de:	461a      	mov	r2, r3
 800b7e0:	f000 f935 	bl	800ba4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	2160      	movs	r1, #96	; 0x60
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f000 f95f 	bl	800baae <TIM_ITRx_SetConfig>
      break;
 800b7f0:	e01c      	b.n	800b82c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7fe:	461a      	mov	r2, r3
 800b800:	f000 f8f6 	bl	800b9f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	2140      	movs	r1, #64	; 0x40
 800b80a:	4618      	mov	r0, r3
 800b80c:	f000 f94f 	bl	800baae <TIM_ITRx_SetConfig>
      break;
 800b810:	e00c      	b.n	800b82c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681a      	ldr	r2, [r3, #0]
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	4619      	mov	r1, r3
 800b81c:	4610      	mov	r0, r2
 800b81e:	f000 f946 	bl	800baae <TIM_ITRx_SetConfig>
      break;
 800b822:	e003      	b.n	800b82c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b824:	2301      	movs	r3, #1
 800b826:	73fb      	strb	r3, [r7, #15]
      break;
 800b828:	e000      	b.n	800b82c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b82a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2201      	movs	r2, #1
 800b830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2200      	movs	r2, #0
 800b838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b83c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3710      	adds	r7, #16
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}

0800b846 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b846:	b480      	push	{r7}
 800b848:	b083      	sub	sp, #12
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b84e:	bf00      	nop
 800b850:	370c      	adds	r7, #12
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr

0800b85a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b85a:	b480      	push	{r7}
 800b85c:	b083      	sub	sp, #12
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b862:	bf00      	nop
 800b864:	370c      	adds	r7, #12
 800b866:	46bd      	mov	sp, r7
 800b868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86c:	4770      	bx	lr

0800b86e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b86e:	b480      	push	{r7}
 800b870:	b083      	sub	sp, #12
 800b872:	af00      	add	r7, sp, #0
 800b874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b876:	bf00      	nop
 800b878:	370c      	adds	r7, #12
 800b87a:	46bd      	mov	sp, r7
 800b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b880:	4770      	bx	lr

0800b882 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b882:	b480      	push	{r7}
 800b884:	b083      	sub	sp, #12
 800b886:	af00      	add	r7, sp, #0
 800b888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b88a:	bf00      	nop
 800b88c:	370c      	adds	r7, #12
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr
	...

0800b898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b898:	b480      	push	{r7}
 800b89a:	b085      	sub	sp, #20
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	4a46      	ldr	r2, [pc, #280]	; (800b9c4 <TIM_Base_SetConfig+0x12c>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d013      	beq.n	800b8d8 <TIM_Base_SetConfig+0x40>
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8b6:	d00f      	beq.n	800b8d8 <TIM_Base_SetConfig+0x40>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	4a43      	ldr	r2, [pc, #268]	; (800b9c8 <TIM_Base_SetConfig+0x130>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d00b      	beq.n	800b8d8 <TIM_Base_SetConfig+0x40>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	4a42      	ldr	r2, [pc, #264]	; (800b9cc <TIM_Base_SetConfig+0x134>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d007      	beq.n	800b8d8 <TIM_Base_SetConfig+0x40>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	4a41      	ldr	r2, [pc, #260]	; (800b9d0 <TIM_Base_SetConfig+0x138>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d003      	beq.n	800b8d8 <TIM_Base_SetConfig+0x40>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	4a40      	ldr	r2, [pc, #256]	; (800b9d4 <TIM_Base_SetConfig+0x13c>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d108      	bne.n	800b8ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	685b      	ldr	r3, [r3, #4]
 800b8e4:	68fa      	ldr	r2, [r7, #12]
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	4a35      	ldr	r2, [pc, #212]	; (800b9c4 <TIM_Base_SetConfig+0x12c>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d02b      	beq.n	800b94a <TIM_Base_SetConfig+0xb2>
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8f8:	d027      	beq.n	800b94a <TIM_Base_SetConfig+0xb2>
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	4a32      	ldr	r2, [pc, #200]	; (800b9c8 <TIM_Base_SetConfig+0x130>)
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d023      	beq.n	800b94a <TIM_Base_SetConfig+0xb2>
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	4a31      	ldr	r2, [pc, #196]	; (800b9cc <TIM_Base_SetConfig+0x134>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d01f      	beq.n	800b94a <TIM_Base_SetConfig+0xb2>
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	4a30      	ldr	r2, [pc, #192]	; (800b9d0 <TIM_Base_SetConfig+0x138>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d01b      	beq.n	800b94a <TIM_Base_SetConfig+0xb2>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	4a2f      	ldr	r2, [pc, #188]	; (800b9d4 <TIM_Base_SetConfig+0x13c>)
 800b916:	4293      	cmp	r3, r2
 800b918:	d017      	beq.n	800b94a <TIM_Base_SetConfig+0xb2>
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	4a2e      	ldr	r2, [pc, #184]	; (800b9d8 <TIM_Base_SetConfig+0x140>)
 800b91e:	4293      	cmp	r3, r2
 800b920:	d013      	beq.n	800b94a <TIM_Base_SetConfig+0xb2>
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	4a2d      	ldr	r2, [pc, #180]	; (800b9dc <TIM_Base_SetConfig+0x144>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d00f      	beq.n	800b94a <TIM_Base_SetConfig+0xb2>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	4a2c      	ldr	r2, [pc, #176]	; (800b9e0 <TIM_Base_SetConfig+0x148>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d00b      	beq.n	800b94a <TIM_Base_SetConfig+0xb2>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	4a2b      	ldr	r2, [pc, #172]	; (800b9e4 <TIM_Base_SetConfig+0x14c>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d007      	beq.n	800b94a <TIM_Base_SetConfig+0xb2>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	4a2a      	ldr	r2, [pc, #168]	; (800b9e8 <TIM_Base_SetConfig+0x150>)
 800b93e:	4293      	cmp	r3, r2
 800b940:	d003      	beq.n	800b94a <TIM_Base_SetConfig+0xb2>
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	4a29      	ldr	r2, [pc, #164]	; (800b9ec <TIM_Base_SetConfig+0x154>)
 800b946:	4293      	cmp	r3, r2
 800b948:	d108      	bne.n	800b95c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	68db      	ldr	r3, [r3, #12]
 800b956:	68fa      	ldr	r2, [r7, #12]
 800b958:	4313      	orrs	r3, r2
 800b95a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	695b      	ldr	r3, [r3, #20]
 800b966:	4313      	orrs	r3, r2
 800b968:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	68fa      	ldr	r2, [r7, #12]
 800b96e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	689a      	ldr	r2, [r3, #8]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	681a      	ldr	r2, [r3, #0]
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	4a10      	ldr	r2, [pc, #64]	; (800b9c4 <TIM_Base_SetConfig+0x12c>)
 800b984:	4293      	cmp	r3, r2
 800b986:	d003      	beq.n	800b990 <TIM_Base_SetConfig+0xf8>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	4a12      	ldr	r2, [pc, #72]	; (800b9d4 <TIM_Base_SetConfig+0x13c>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d103      	bne.n	800b998 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	691a      	ldr	r2, [r3, #16]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2201      	movs	r2, #1
 800b99c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	691b      	ldr	r3, [r3, #16]
 800b9a2:	f003 0301 	and.w	r3, r3, #1
 800b9a6:	2b01      	cmp	r3, #1
 800b9a8:	d105      	bne.n	800b9b6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	691b      	ldr	r3, [r3, #16]
 800b9ae:	f023 0201 	bic.w	r2, r3, #1
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	611a      	str	r2, [r3, #16]
  }
}
 800b9b6:	bf00      	nop
 800b9b8:	3714      	adds	r7, #20
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c0:	4770      	bx	lr
 800b9c2:	bf00      	nop
 800b9c4:	40010000 	.word	0x40010000
 800b9c8:	40000400 	.word	0x40000400
 800b9cc:	40000800 	.word	0x40000800
 800b9d0:	40000c00 	.word	0x40000c00
 800b9d4:	40010400 	.word	0x40010400
 800b9d8:	40014000 	.word	0x40014000
 800b9dc:	40014400 	.word	0x40014400
 800b9e0:	40014800 	.word	0x40014800
 800b9e4:	40001800 	.word	0x40001800
 800b9e8:	40001c00 	.word	0x40001c00
 800b9ec:	40002000 	.word	0x40002000

0800b9f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b087      	sub	sp, #28
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	60f8      	str	r0, [r7, #12]
 800b9f8:	60b9      	str	r1, [r7, #8]
 800b9fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	6a1b      	ldr	r3, [r3, #32]
 800ba00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	6a1b      	ldr	r3, [r3, #32]
 800ba06:	f023 0201 	bic.w	r2, r3, #1
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	699b      	ldr	r3, [r3, #24]
 800ba12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ba1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	011b      	lsls	r3, r3, #4
 800ba20:	693a      	ldr	r2, [r7, #16]
 800ba22:	4313      	orrs	r3, r2
 800ba24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	f023 030a 	bic.w	r3, r3, #10
 800ba2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ba2e:	697a      	ldr	r2, [r7, #20]
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	4313      	orrs	r3, r2
 800ba34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	693a      	ldr	r2, [r7, #16]
 800ba3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	697a      	ldr	r2, [r7, #20]
 800ba40:	621a      	str	r2, [r3, #32]
}
 800ba42:	bf00      	nop
 800ba44:	371c      	adds	r7, #28
 800ba46:	46bd      	mov	sp, r7
 800ba48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4c:	4770      	bx	lr

0800ba4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ba4e:	b480      	push	{r7}
 800ba50:	b087      	sub	sp, #28
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	60f8      	str	r0, [r7, #12]
 800ba56:	60b9      	str	r1, [r7, #8]
 800ba58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	6a1b      	ldr	r3, [r3, #32]
 800ba5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	6a1b      	ldr	r3, [r3, #32]
 800ba64:	f023 0210 	bic.w	r2, r3, #16
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	699b      	ldr	r3, [r3, #24]
 800ba70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ba78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	031b      	lsls	r3, r3, #12
 800ba7e:	693a      	ldr	r2, [r7, #16]
 800ba80:	4313      	orrs	r3, r2
 800ba82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ba8a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	011b      	lsls	r3, r3, #4
 800ba90:	697a      	ldr	r2, [r7, #20]
 800ba92:	4313      	orrs	r3, r2
 800ba94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	693a      	ldr	r2, [r7, #16]
 800ba9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	697a      	ldr	r2, [r7, #20]
 800baa0:	621a      	str	r2, [r3, #32]
}
 800baa2:	bf00      	nop
 800baa4:	371c      	adds	r7, #28
 800baa6:	46bd      	mov	sp, r7
 800baa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baac:	4770      	bx	lr

0800baae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800baae:	b480      	push	{r7}
 800bab0:	b085      	sub	sp, #20
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	6078      	str	r0, [r7, #4]
 800bab6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	689b      	ldr	r3, [r3, #8]
 800babc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bac4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bac6:	683a      	ldr	r2, [r7, #0]
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	4313      	orrs	r3, r2
 800bacc:	f043 0307 	orr.w	r3, r3, #7
 800bad0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	68fa      	ldr	r2, [r7, #12]
 800bad6:	609a      	str	r2, [r3, #8]
}
 800bad8:	bf00      	nop
 800bada:	3714      	adds	r7, #20
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr

0800bae4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b087      	sub	sp, #28
 800bae8:	af00      	add	r7, sp, #0
 800baea:	60f8      	str	r0, [r7, #12]
 800baec:	60b9      	str	r1, [r7, #8]
 800baee:	607a      	str	r2, [r7, #4]
 800baf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	689b      	ldr	r3, [r3, #8]
 800baf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bafe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	021a      	lsls	r2, r3, #8
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	431a      	orrs	r2, r3
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	4313      	orrs	r3, r2
 800bb0c:	697a      	ldr	r2, [r7, #20]
 800bb0e:	4313      	orrs	r3, r2
 800bb10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	697a      	ldr	r2, [r7, #20]
 800bb16:	609a      	str	r2, [r3, #8]
}
 800bb18:	bf00      	nop
 800bb1a:	371c      	adds	r7, #28
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb22:	4770      	bx	lr

0800bb24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b085      	sub	sp, #20
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb34:	2b01      	cmp	r3, #1
 800bb36:	d101      	bne.n	800bb3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bb38:	2302      	movs	r3, #2
 800bb3a:	e05a      	b.n	800bbf2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2201      	movs	r2, #1
 800bb40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2202      	movs	r2, #2
 800bb48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	689b      	ldr	r3, [r3, #8]
 800bb5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	68fa      	ldr	r2, [r7, #12]
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	68fa      	ldr	r2, [r7, #12]
 800bb74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	4a21      	ldr	r2, [pc, #132]	; (800bc00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	d022      	beq.n	800bbc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb88:	d01d      	beq.n	800bbc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	4a1d      	ldr	r2, [pc, #116]	; (800bc04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800bb90:	4293      	cmp	r3, r2
 800bb92:	d018      	beq.n	800bbc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	4a1b      	ldr	r2, [pc, #108]	; (800bc08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d013      	beq.n	800bbc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	4a1a      	ldr	r2, [pc, #104]	; (800bc0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800bba4:	4293      	cmp	r3, r2
 800bba6:	d00e      	beq.n	800bbc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	4a18      	ldr	r2, [pc, #96]	; (800bc10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	d009      	beq.n	800bbc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	4a17      	ldr	r2, [pc, #92]	; (800bc14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	d004      	beq.n	800bbc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	4a15      	ldr	r2, [pc, #84]	; (800bc18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	d10c      	bne.n	800bbe0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bbcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	685b      	ldr	r3, [r3, #4]
 800bbd2:	68ba      	ldr	r2, [r7, #8]
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	68ba      	ldr	r2, [r7, #8]
 800bbde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2201      	movs	r2, #1
 800bbe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2200      	movs	r2, #0
 800bbec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bbf0:	2300      	movs	r3, #0
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3714      	adds	r7, #20
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr
 800bbfe:	bf00      	nop
 800bc00:	40010000 	.word	0x40010000
 800bc04:	40000400 	.word	0x40000400
 800bc08:	40000800 	.word	0x40000800
 800bc0c:	40000c00 	.word	0x40000c00
 800bc10:	40010400 	.word	0x40010400
 800bc14:	40014000 	.word	0x40014000
 800bc18:	40001800 	.word	0x40001800

0800bc1c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b083      	sub	sp, #12
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bc24:	bf00      	nop
 800bc26:	370c      	adds	r7, #12
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr

0800bc30 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b083      	sub	sp, #12
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bc38:	bf00      	nop
 800bc3a:	370c      	adds	r7, #12
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr

0800bc44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b082      	sub	sp, #8
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d101      	bne.n	800bc56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bc52:	2301      	movs	r3, #1
 800bc54:	e042      	b.n	800bcdc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc5c:	b2db      	uxtb	r3, r3
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d106      	bne.n	800bc70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2200      	movs	r2, #0
 800bc66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f7f6 fecc 	bl	8002a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2224      	movs	r2, #36	; 0x24
 800bc74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	68da      	ldr	r2, [r3, #12]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bc86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f000 f82b 	bl	800bce4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	691a      	ldr	r2, [r3, #16]
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bc9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	695a      	ldr	r2, [r3, #20]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bcac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	68da      	ldr	r2, [r3, #12]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bcbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2220      	movs	r2, #32
 800bcc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2220      	movs	r2, #32
 800bcd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800bcda:	2300      	movs	r3, #0
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3708      	adds	r7, #8
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}

0800bce4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bce8:	b0c0      	sub	sp, #256	; 0x100
 800bcea:	af00      	add	r7, sp, #0
 800bcec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bcf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	691b      	ldr	r3, [r3, #16]
 800bcf8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bcfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd00:	68d9      	ldr	r1, [r3, #12]
 800bd02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd06:	681a      	ldr	r2, [r3, #0]
 800bd08:	ea40 0301 	orr.w	r3, r0, r1
 800bd0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bd0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd12:	689a      	ldr	r2, [r3, #8]
 800bd14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd18:	691b      	ldr	r3, [r3, #16]
 800bd1a:	431a      	orrs	r2, r3
 800bd1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd20:	695b      	ldr	r3, [r3, #20]
 800bd22:	431a      	orrs	r2, r3
 800bd24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd28:	69db      	ldr	r3, [r3, #28]
 800bd2a:	4313      	orrs	r3, r2
 800bd2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bd30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	68db      	ldr	r3, [r3, #12]
 800bd38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bd3c:	f021 010c 	bic.w	r1, r1, #12
 800bd40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd44:	681a      	ldr	r2, [r3, #0]
 800bd46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bd4a:	430b      	orrs	r3, r1
 800bd4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bd4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	695b      	ldr	r3, [r3, #20]
 800bd56:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bd5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd5e:	6999      	ldr	r1, [r3, #24]
 800bd60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd64:	681a      	ldr	r2, [r3, #0]
 800bd66:	ea40 0301 	orr.w	r3, r0, r1
 800bd6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bd6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd70:	681a      	ldr	r2, [r3, #0]
 800bd72:	4b8f      	ldr	r3, [pc, #572]	; (800bfb0 <UART_SetConfig+0x2cc>)
 800bd74:	429a      	cmp	r2, r3
 800bd76:	d005      	beq.n	800bd84 <UART_SetConfig+0xa0>
 800bd78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd7c:	681a      	ldr	r2, [r3, #0]
 800bd7e:	4b8d      	ldr	r3, [pc, #564]	; (800bfb4 <UART_SetConfig+0x2d0>)
 800bd80:	429a      	cmp	r2, r3
 800bd82:	d104      	bne.n	800bd8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bd84:	f7fe fa44 	bl	800a210 <HAL_RCC_GetPCLK2Freq>
 800bd88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800bd8c:	e003      	b.n	800bd96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bd8e:	f7fe fa2b 	bl	800a1e8 <HAL_RCC_GetPCLK1Freq>
 800bd92:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd9a:	69db      	ldr	r3, [r3, #28]
 800bd9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bda0:	f040 810c 	bne.w	800bfbc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bda4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bda8:	2200      	movs	r2, #0
 800bdaa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bdae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800bdb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800bdb6:	4622      	mov	r2, r4
 800bdb8:	462b      	mov	r3, r5
 800bdba:	1891      	adds	r1, r2, r2
 800bdbc:	65b9      	str	r1, [r7, #88]	; 0x58
 800bdbe:	415b      	adcs	r3, r3
 800bdc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bdc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800bdc6:	4621      	mov	r1, r4
 800bdc8:	eb12 0801 	adds.w	r8, r2, r1
 800bdcc:	4629      	mov	r1, r5
 800bdce:	eb43 0901 	adc.w	r9, r3, r1
 800bdd2:	f04f 0200 	mov.w	r2, #0
 800bdd6:	f04f 0300 	mov.w	r3, #0
 800bdda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bdde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bde2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bde6:	4690      	mov	r8, r2
 800bde8:	4699      	mov	r9, r3
 800bdea:	4623      	mov	r3, r4
 800bdec:	eb18 0303 	adds.w	r3, r8, r3
 800bdf0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bdf4:	462b      	mov	r3, r5
 800bdf6:	eb49 0303 	adc.w	r3, r9, r3
 800bdfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bdfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be02:	685b      	ldr	r3, [r3, #4]
 800be04:	2200      	movs	r2, #0
 800be06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800be0a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800be0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800be12:	460b      	mov	r3, r1
 800be14:	18db      	adds	r3, r3, r3
 800be16:	653b      	str	r3, [r7, #80]	; 0x50
 800be18:	4613      	mov	r3, r2
 800be1a:	eb42 0303 	adc.w	r3, r2, r3
 800be1e:	657b      	str	r3, [r7, #84]	; 0x54
 800be20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800be24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800be28:	f7f4 fc76 	bl	8000718 <__aeabi_uldivmod>
 800be2c:	4602      	mov	r2, r0
 800be2e:	460b      	mov	r3, r1
 800be30:	4b61      	ldr	r3, [pc, #388]	; (800bfb8 <UART_SetConfig+0x2d4>)
 800be32:	fba3 2302 	umull	r2, r3, r3, r2
 800be36:	095b      	lsrs	r3, r3, #5
 800be38:	011c      	lsls	r4, r3, #4
 800be3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800be3e:	2200      	movs	r2, #0
 800be40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800be44:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800be48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800be4c:	4642      	mov	r2, r8
 800be4e:	464b      	mov	r3, r9
 800be50:	1891      	adds	r1, r2, r2
 800be52:	64b9      	str	r1, [r7, #72]	; 0x48
 800be54:	415b      	adcs	r3, r3
 800be56:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800be5c:	4641      	mov	r1, r8
 800be5e:	eb12 0a01 	adds.w	sl, r2, r1
 800be62:	4649      	mov	r1, r9
 800be64:	eb43 0b01 	adc.w	fp, r3, r1
 800be68:	f04f 0200 	mov.w	r2, #0
 800be6c:	f04f 0300 	mov.w	r3, #0
 800be70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800be74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800be78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800be7c:	4692      	mov	sl, r2
 800be7e:	469b      	mov	fp, r3
 800be80:	4643      	mov	r3, r8
 800be82:	eb1a 0303 	adds.w	r3, sl, r3
 800be86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800be8a:	464b      	mov	r3, r9
 800be8c:	eb4b 0303 	adc.w	r3, fp, r3
 800be90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800be94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	2200      	movs	r2, #0
 800be9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bea0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800bea4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bea8:	460b      	mov	r3, r1
 800beaa:	18db      	adds	r3, r3, r3
 800beac:	643b      	str	r3, [r7, #64]	; 0x40
 800beae:	4613      	mov	r3, r2
 800beb0:	eb42 0303 	adc.w	r3, r2, r3
 800beb4:	647b      	str	r3, [r7, #68]	; 0x44
 800beb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800beba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800bebe:	f7f4 fc2b 	bl	8000718 <__aeabi_uldivmod>
 800bec2:	4602      	mov	r2, r0
 800bec4:	460b      	mov	r3, r1
 800bec6:	4611      	mov	r1, r2
 800bec8:	4b3b      	ldr	r3, [pc, #236]	; (800bfb8 <UART_SetConfig+0x2d4>)
 800beca:	fba3 2301 	umull	r2, r3, r3, r1
 800bece:	095b      	lsrs	r3, r3, #5
 800bed0:	2264      	movs	r2, #100	; 0x64
 800bed2:	fb02 f303 	mul.w	r3, r2, r3
 800bed6:	1acb      	subs	r3, r1, r3
 800bed8:	00db      	lsls	r3, r3, #3
 800beda:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bede:	4b36      	ldr	r3, [pc, #216]	; (800bfb8 <UART_SetConfig+0x2d4>)
 800bee0:	fba3 2302 	umull	r2, r3, r3, r2
 800bee4:	095b      	lsrs	r3, r3, #5
 800bee6:	005b      	lsls	r3, r3, #1
 800bee8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800beec:	441c      	add	r4, r3
 800beee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bef2:	2200      	movs	r2, #0
 800bef4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bef8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800befc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bf00:	4642      	mov	r2, r8
 800bf02:	464b      	mov	r3, r9
 800bf04:	1891      	adds	r1, r2, r2
 800bf06:	63b9      	str	r1, [r7, #56]	; 0x38
 800bf08:	415b      	adcs	r3, r3
 800bf0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bf10:	4641      	mov	r1, r8
 800bf12:	1851      	adds	r1, r2, r1
 800bf14:	6339      	str	r1, [r7, #48]	; 0x30
 800bf16:	4649      	mov	r1, r9
 800bf18:	414b      	adcs	r3, r1
 800bf1a:	637b      	str	r3, [r7, #52]	; 0x34
 800bf1c:	f04f 0200 	mov.w	r2, #0
 800bf20:	f04f 0300 	mov.w	r3, #0
 800bf24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bf28:	4659      	mov	r1, fp
 800bf2a:	00cb      	lsls	r3, r1, #3
 800bf2c:	4651      	mov	r1, sl
 800bf2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bf32:	4651      	mov	r1, sl
 800bf34:	00ca      	lsls	r2, r1, #3
 800bf36:	4610      	mov	r0, r2
 800bf38:	4619      	mov	r1, r3
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	4642      	mov	r2, r8
 800bf3e:	189b      	adds	r3, r3, r2
 800bf40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bf44:	464b      	mov	r3, r9
 800bf46:	460a      	mov	r2, r1
 800bf48:	eb42 0303 	adc.w	r3, r2, r3
 800bf4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bf50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	2200      	movs	r2, #0
 800bf58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bf5c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bf60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bf64:	460b      	mov	r3, r1
 800bf66:	18db      	adds	r3, r3, r3
 800bf68:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf6a:	4613      	mov	r3, r2
 800bf6c:	eb42 0303 	adc.w	r3, r2, r3
 800bf70:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bf76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bf7a:	f7f4 fbcd 	bl	8000718 <__aeabi_uldivmod>
 800bf7e:	4602      	mov	r2, r0
 800bf80:	460b      	mov	r3, r1
 800bf82:	4b0d      	ldr	r3, [pc, #52]	; (800bfb8 <UART_SetConfig+0x2d4>)
 800bf84:	fba3 1302 	umull	r1, r3, r3, r2
 800bf88:	095b      	lsrs	r3, r3, #5
 800bf8a:	2164      	movs	r1, #100	; 0x64
 800bf8c:	fb01 f303 	mul.w	r3, r1, r3
 800bf90:	1ad3      	subs	r3, r2, r3
 800bf92:	00db      	lsls	r3, r3, #3
 800bf94:	3332      	adds	r3, #50	; 0x32
 800bf96:	4a08      	ldr	r2, [pc, #32]	; (800bfb8 <UART_SetConfig+0x2d4>)
 800bf98:	fba2 2303 	umull	r2, r3, r2, r3
 800bf9c:	095b      	lsrs	r3, r3, #5
 800bf9e:	f003 0207 	and.w	r2, r3, #7
 800bfa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	4422      	add	r2, r4
 800bfaa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bfac:	e106      	b.n	800c1bc <UART_SetConfig+0x4d8>
 800bfae:	bf00      	nop
 800bfb0:	40011000 	.word	0x40011000
 800bfb4:	40011400 	.word	0x40011400
 800bfb8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bfbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bfc6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bfca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bfce:	4642      	mov	r2, r8
 800bfd0:	464b      	mov	r3, r9
 800bfd2:	1891      	adds	r1, r2, r2
 800bfd4:	6239      	str	r1, [r7, #32]
 800bfd6:	415b      	adcs	r3, r3
 800bfd8:	627b      	str	r3, [r7, #36]	; 0x24
 800bfda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bfde:	4641      	mov	r1, r8
 800bfe0:	1854      	adds	r4, r2, r1
 800bfe2:	4649      	mov	r1, r9
 800bfe4:	eb43 0501 	adc.w	r5, r3, r1
 800bfe8:	f04f 0200 	mov.w	r2, #0
 800bfec:	f04f 0300 	mov.w	r3, #0
 800bff0:	00eb      	lsls	r3, r5, #3
 800bff2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bff6:	00e2      	lsls	r2, r4, #3
 800bff8:	4614      	mov	r4, r2
 800bffa:	461d      	mov	r5, r3
 800bffc:	4643      	mov	r3, r8
 800bffe:	18e3      	adds	r3, r4, r3
 800c000:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c004:	464b      	mov	r3, r9
 800c006:	eb45 0303 	adc.w	r3, r5, r3
 800c00a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c00e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c012:	685b      	ldr	r3, [r3, #4]
 800c014:	2200      	movs	r2, #0
 800c016:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c01a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c01e:	f04f 0200 	mov.w	r2, #0
 800c022:	f04f 0300 	mov.w	r3, #0
 800c026:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c02a:	4629      	mov	r1, r5
 800c02c:	008b      	lsls	r3, r1, #2
 800c02e:	4621      	mov	r1, r4
 800c030:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c034:	4621      	mov	r1, r4
 800c036:	008a      	lsls	r2, r1, #2
 800c038:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c03c:	f7f4 fb6c 	bl	8000718 <__aeabi_uldivmod>
 800c040:	4602      	mov	r2, r0
 800c042:	460b      	mov	r3, r1
 800c044:	4b60      	ldr	r3, [pc, #384]	; (800c1c8 <UART_SetConfig+0x4e4>)
 800c046:	fba3 2302 	umull	r2, r3, r3, r2
 800c04a:	095b      	lsrs	r3, r3, #5
 800c04c:	011c      	lsls	r4, r3, #4
 800c04e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c052:	2200      	movs	r2, #0
 800c054:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c058:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c05c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c060:	4642      	mov	r2, r8
 800c062:	464b      	mov	r3, r9
 800c064:	1891      	adds	r1, r2, r2
 800c066:	61b9      	str	r1, [r7, #24]
 800c068:	415b      	adcs	r3, r3
 800c06a:	61fb      	str	r3, [r7, #28]
 800c06c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c070:	4641      	mov	r1, r8
 800c072:	1851      	adds	r1, r2, r1
 800c074:	6139      	str	r1, [r7, #16]
 800c076:	4649      	mov	r1, r9
 800c078:	414b      	adcs	r3, r1
 800c07a:	617b      	str	r3, [r7, #20]
 800c07c:	f04f 0200 	mov.w	r2, #0
 800c080:	f04f 0300 	mov.w	r3, #0
 800c084:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c088:	4659      	mov	r1, fp
 800c08a:	00cb      	lsls	r3, r1, #3
 800c08c:	4651      	mov	r1, sl
 800c08e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c092:	4651      	mov	r1, sl
 800c094:	00ca      	lsls	r2, r1, #3
 800c096:	4610      	mov	r0, r2
 800c098:	4619      	mov	r1, r3
 800c09a:	4603      	mov	r3, r0
 800c09c:	4642      	mov	r2, r8
 800c09e:	189b      	adds	r3, r3, r2
 800c0a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c0a4:	464b      	mov	r3, r9
 800c0a6:	460a      	mov	r2, r1
 800c0a8:	eb42 0303 	adc.w	r3, r2, r3
 800c0ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c0b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0b4:	685b      	ldr	r3, [r3, #4]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	67bb      	str	r3, [r7, #120]	; 0x78
 800c0ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c0bc:	f04f 0200 	mov.w	r2, #0
 800c0c0:	f04f 0300 	mov.w	r3, #0
 800c0c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c0c8:	4649      	mov	r1, r9
 800c0ca:	008b      	lsls	r3, r1, #2
 800c0cc:	4641      	mov	r1, r8
 800c0ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c0d2:	4641      	mov	r1, r8
 800c0d4:	008a      	lsls	r2, r1, #2
 800c0d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c0da:	f7f4 fb1d 	bl	8000718 <__aeabi_uldivmod>
 800c0de:	4602      	mov	r2, r0
 800c0e0:	460b      	mov	r3, r1
 800c0e2:	4611      	mov	r1, r2
 800c0e4:	4b38      	ldr	r3, [pc, #224]	; (800c1c8 <UART_SetConfig+0x4e4>)
 800c0e6:	fba3 2301 	umull	r2, r3, r3, r1
 800c0ea:	095b      	lsrs	r3, r3, #5
 800c0ec:	2264      	movs	r2, #100	; 0x64
 800c0ee:	fb02 f303 	mul.w	r3, r2, r3
 800c0f2:	1acb      	subs	r3, r1, r3
 800c0f4:	011b      	lsls	r3, r3, #4
 800c0f6:	3332      	adds	r3, #50	; 0x32
 800c0f8:	4a33      	ldr	r2, [pc, #204]	; (800c1c8 <UART_SetConfig+0x4e4>)
 800c0fa:	fba2 2303 	umull	r2, r3, r2, r3
 800c0fe:	095b      	lsrs	r3, r3, #5
 800c100:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c104:	441c      	add	r4, r3
 800c106:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c10a:	2200      	movs	r2, #0
 800c10c:	673b      	str	r3, [r7, #112]	; 0x70
 800c10e:	677a      	str	r2, [r7, #116]	; 0x74
 800c110:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c114:	4642      	mov	r2, r8
 800c116:	464b      	mov	r3, r9
 800c118:	1891      	adds	r1, r2, r2
 800c11a:	60b9      	str	r1, [r7, #8]
 800c11c:	415b      	adcs	r3, r3
 800c11e:	60fb      	str	r3, [r7, #12]
 800c120:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c124:	4641      	mov	r1, r8
 800c126:	1851      	adds	r1, r2, r1
 800c128:	6039      	str	r1, [r7, #0]
 800c12a:	4649      	mov	r1, r9
 800c12c:	414b      	adcs	r3, r1
 800c12e:	607b      	str	r3, [r7, #4]
 800c130:	f04f 0200 	mov.w	r2, #0
 800c134:	f04f 0300 	mov.w	r3, #0
 800c138:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c13c:	4659      	mov	r1, fp
 800c13e:	00cb      	lsls	r3, r1, #3
 800c140:	4651      	mov	r1, sl
 800c142:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c146:	4651      	mov	r1, sl
 800c148:	00ca      	lsls	r2, r1, #3
 800c14a:	4610      	mov	r0, r2
 800c14c:	4619      	mov	r1, r3
 800c14e:	4603      	mov	r3, r0
 800c150:	4642      	mov	r2, r8
 800c152:	189b      	adds	r3, r3, r2
 800c154:	66bb      	str	r3, [r7, #104]	; 0x68
 800c156:	464b      	mov	r3, r9
 800c158:	460a      	mov	r2, r1
 800c15a:	eb42 0303 	adc.w	r3, r2, r3
 800c15e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c164:	685b      	ldr	r3, [r3, #4]
 800c166:	2200      	movs	r2, #0
 800c168:	663b      	str	r3, [r7, #96]	; 0x60
 800c16a:	667a      	str	r2, [r7, #100]	; 0x64
 800c16c:	f04f 0200 	mov.w	r2, #0
 800c170:	f04f 0300 	mov.w	r3, #0
 800c174:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c178:	4649      	mov	r1, r9
 800c17a:	008b      	lsls	r3, r1, #2
 800c17c:	4641      	mov	r1, r8
 800c17e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c182:	4641      	mov	r1, r8
 800c184:	008a      	lsls	r2, r1, #2
 800c186:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c18a:	f7f4 fac5 	bl	8000718 <__aeabi_uldivmod>
 800c18e:	4602      	mov	r2, r0
 800c190:	460b      	mov	r3, r1
 800c192:	4b0d      	ldr	r3, [pc, #52]	; (800c1c8 <UART_SetConfig+0x4e4>)
 800c194:	fba3 1302 	umull	r1, r3, r3, r2
 800c198:	095b      	lsrs	r3, r3, #5
 800c19a:	2164      	movs	r1, #100	; 0x64
 800c19c:	fb01 f303 	mul.w	r3, r1, r3
 800c1a0:	1ad3      	subs	r3, r2, r3
 800c1a2:	011b      	lsls	r3, r3, #4
 800c1a4:	3332      	adds	r3, #50	; 0x32
 800c1a6:	4a08      	ldr	r2, [pc, #32]	; (800c1c8 <UART_SetConfig+0x4e4>)
 800c1a8:	fba2 2303 	umull	r2, r3, r2, r3
 800c1ac:	095b      	lsrs	r3, r3, #5
 800c1ae:	f003 020f 	and.w	r2, r3, #15
 800c1b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	4422      	add	r2, r4
 800c1ba:	609a      	str	r2, [r3, #8]
}
 800c1bc:	bf00      	nop
 800c1be:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c1c8:	51eb851f 	.word	0x51eb851f

0800c1cc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b083      	sub	sp, #12
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
 800c1d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d123      	bne.n	800c226 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800c1e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c1ea:	683a      	ldr	r2, [r7, #0]
 800c1ec:	6851      	ldr	r1, [r2, #4]
 800c1ee:	683a      	ldr	r2, [r7, #0]
 800c1f0:	6892      	ldr	r2, [r2, #8]
 800c1f2:	4311      	orrs	r1, r2
 800c1f4:	683a      	ldr	r2, [r7, #0]
 800c1f6:	68d2      	ldr	r2, [r2, #12]
 800c1f8:	4311      	orrs	r1, r2
 800c1fa:	683a      	ldr	r2, [r7, #0]
 800c1fc:	6912      	ldr	r2, [r2, #16]
 800c1fe:	4311      	orrs	r1, r2
 800c200:	683a      	ldr	r2, [r7, #0]
 800c202:	6952      	ldr	r2, [r2, #20]
 800c204:	4311      	orrs	r1, r2
 800c206:	683a      	ldr	r2, [r7, #0]
 800c208:	6992      	ldr	r2, [r2, #24]
 800c20a:	4311      	orrs	r1, r2
 800c20c:	683a      	ldr	r2, [r7, #0]
 800c20e:	69d2      	ldr	r2, [r2, #28]
 800c210:	4311      	orrs	r1, r2
 800c212:	683a      	ldr	r2, [r7, #0]
 800c214:	6a12      	ldr	r2, [r2, #32]
 800c216:	4311      	orrs	r1, r2
 800c218:	683a      	ldr	r2, [r7, #0]
 800c21a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c21c:	430a      	orrs	r2, r1
 800c21e:	431a      	orrs	r2, r3
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	601a      	str	r2, [r3, #0]
 800c224:	e028      	b.n	800c278 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	69d9      	ldr	r1, [r3, #28]
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	6a1b      	ldr	r3, [r3, #32]
 800c236:	4319      	orrs	r1, r3
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c23c:	430b      	orrs	r3, r1
 800c23e:	431a      	orrs	r2, r3
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	685b      	ldr	r3, [r3, #4]
 800c248:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800c24c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c250:	683a      	ldr	r2, [r7, #0]
 800c252:	6851      	ldr	r1, [r2, #4]
 800c254:	683a      	ldr	r2, [r7, #0]
 800c256:	6892      	ldr	r2, [r2, #8]
 800c258:	4311      	orrs	r1, r2
 800c25a:	683a      	ldr	r2, [r7, #0]
 800c25c:	68d2      	ldr	r2, [r2, #12]
 800c25e:	4311      	orrs	r1, r2
 800c260:	683a      	ldr	r2, [r7, #0]
 800c262:	6912      	ldr	r2, [r2, #16]
 800c264:	4311      	orrs	r1, r2
 800c266:	683a      	ldr	r2, [r7, #0]
 800c268:	6952      	ldr	r2, [r2, #20]
 800c26a:	4311      	orrs	r1, r2
 800c26c:	683a      	ldr	r2, [r7, #0]
 800c26e:	6992      	ldr	r2, [r2, #24]
 800c270:	430a      	orrs	r2, r1
 800c272:	431a      	orrs	r2, r3
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c278:	2300      	movs	r3, #0
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	370c      	adds	r7, #12
 800c27e:	46bd      	mov	sp, r7
 800c280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c284:	4770      	bx	lr

0800c286 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c286:	b480      	push	{r7}
 800c288:	b085      	sub	sp, #20
 800c28a:	af00      	add	r7, sp, #0
 800c28c:	60f8      	str	r0, [r7, #12]
 800c28e:	60b9      	str	r1, [r7, #8]
 800c290:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d128      	bne.n	800c2ea <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	689b      	ldr	r3, [r3, #8]
 800c29c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	1e59      	subs	r1, r3, #1
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	685b      	ldr	r3, [r3, #4]
 800c2aa:	3b01      	subs	r3, #1
 800c2ac:	011b      	lsls	r3, r3, #4
 800c2ae:	4319      	orrs	r1, r3
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	689b      	ldr	r3, [r3, #8]
 800c2b4:	3b01      	subs	r3, #1
 800c2b6:	021b      	lsls	r3, r3, #8
 800c2b8:	4319      	orrs	r1, r3
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	68db      	ldr	r3, [r3, #12]
 800c2be:	3b01      	subs	r3, #1
 800c2c0:	031b      	lsls	r3, r3, #12
 800c2c2:	4319      	orrs	r1, r3
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	691b      	ldr	r3, [r3, #16]
 800c2c8:	3b01      	subs	r3, #1
 800c2ca:	041b      	lsls	r3, r3, #16
 800c2cc:	4319      	orrs	r1, r3
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	695b      	ldr	r3, [r3, #20]
 800c2d2:	3b01      	subs	r3, #1
 800c2d4:	051b      	lsls	r3, r3, #20
 800c2d6:	4319      	orrs	r1, r3
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	699b      	ldr	r3, [r3, #24]
 800c2dc:	3b01      	subs	r3, #1
 800c2de:	061b      	lsls	r3, r3, #24
 800c2e0:	430b      	orrs	r3, r1
 800c2e2:	431a      	orrs	r2, r3
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	609a      	str	r2, [r3, #8]
 800c2e8:	e02f      	b.n	800c34a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	689b      	ldr	r3, [r3, #8]
 800c2ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c2f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c2f6:	68ba      	ldr	r2, [r7, #8]
 800c2f8:	68d2      	ldr	r2, [r2, #12]
 800c2fa:	3a01      	subs	r2, #1
 800c2fc:	0311      	lsls	r1, r2, #12
 800c2fe:	68ba      	ldr	r2, [r7, #8]
 800c300:	6952      	ldr	r2, [r2, #20]
 800c302:	3a01      	subs	r2, #1
 800c304:	0512      	lsls	r2, r2, #20
 800c306:	430a      	orrs	r2, r1
 800c308:	431a      	orrs	r2, r3
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	68db      	ldr	r3, [r3, #12]
 800c312:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	1e59      	subs	r1, r3, #1
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	685b      	ldr	r3, [r3, #4]
 800c320:	3b01      	subs	r3, #1
 800c322:	011b      	lsls	r3, r3, #4
 800c324:	4319      	orrs	r1, r3
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	689b      	ldr	r3, [r3, #8]
 800c32a:	3b01      	subs	r3, #1
 800c32c:	021b      	lsls	r3, r3, #8
 800c32e:	4319      	orrs	r1, r3
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	691b      	ldr	r3, [r3, #16]
 800c334:	3b01      	subs	r3, #1
 800c336:	041b      	lsls	r3, r3, #16
 800c338:	4319      	orrs	r1, r3
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	699b      	ldr	r3, [r3, #24]
 800c33e:	3b01      	subs	r3, #1
 800c340:	061b      	lsls	r3, r3, #24
 800c342:	430b      	orrs	r3, r1
 800c344:	431a      	orrs	r2, r3
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800c34a:	2300      	movs	r3, #0
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	3714      	adds	r7, #20
 800c350:	46bd      	mov	sp, r7
 800c352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c356:	4770      	bx	lr

0800c358 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b086      	sub	sp, #24
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	60f8      	str	r0, [r7, #12]
 800c360:	60b9      	str	r1, [r7, #8]
 800c362:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800c364:	2300      	movs	r3, #0
 800c366:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	691b      	ldr	r3, [r3, #16]
 800c36c:	0d9b      	lsrs	r3, r3, #22
 800c36e:	059b      	lsls	r3, r3, #22
 800c370:	68ba      	ldr	r2, [r7, #8]
 800c372:	6811      	ldr	r1, [r2, #0]
 800c374:	68ba      	ldr	r2, [r7, #8]
 800c376:	6852      	ldr	r2, [r2, #4]
 800c378:	4311      	orrs	r1, r2
 800c37a:	68ba      	ldr	r2, [r7, #8]
 800c37c:	6892      	ldr	r2, [r2, #8]
 800c37e:	3a01      	subs	r2, #1
 800c380:	0152      	lsls	r2, r2, #5
 800c382:	4311      	orrs	r1, r2
 800c384:	68ba      	ldr	r2, [r7, #8]
 800c386:	68d2      	ldr	r2, [r2, #12]
 800c388:	0252      	lsls	r2, r2, #9
 800c38a:	430a      	orrs	r2, r1
 800c38c:	431a      	orrs	r2, r3
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800c392:	f7f8 fadd 	bl	8004950 <HAL_GetTick>
 800c396:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800c398:	e010      	b.n	800c3bc <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3a0:	d00c      	beq.n	800c3bc <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d007      	beq.n	800c3b8 <FMC_SDRAM_SendCommand+0x60>
 800c3a8:	f7f8 fad2 	bl	8004950 <HAL_GetTick>
 800c3ac:	4602      	mov	r2, r0
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	1ad3      	subs	r3, r2, r3
 800c3b2:	687a      	ldr	r2, [r7, #4]
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d201      	bcs.n	800c3bc <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800c3b8:	2303      	movs	r3, #3
 800c3ba:	e006      	b.n	800c3ca <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	699b      	ldr	r3, [r3, #24]
 800c3c0:	f003 0320 	and.w	r3, r3, #32
 800c3c4:	2b20      	cmp	r3, #32
 800c3c6:	d0e8      	beq.n	800c39a <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800c3c8:	2300      	movs	r3, #0
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3718      	adds	r7, #24
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}

0800c3d2 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800c3d2:	b480      	push	{r7}
 800c3d4:	b083      	sub	sp, #12
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	6078      	str	r0, [r7, #4]
 800c3da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	695b      	ldr	r3, [r3, #20]
 800c3e0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800c3e4:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800c3e8:	683a      	ldr	r2, [r7, #0]
 800c3ea:	0052      	lsls	r2, r2, #1
 800c3ec:	431a      	orrs	r2, r3
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800c3f2:	2300      	movs	r3, #0
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	370c      	adds	r7, #12
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fe:	4770      	bx	lr

0800c400 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c400:	b480      	push	{r7}
 800c402:	b083      	sub	sp, #12
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	689b      	ldr	r3, [r3, #8]
 800c40c:	f043 0201 	orr.w	r2, r3, #1
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c414:	2300      	movs	r3, #0
}
 800c416:	4618      	mov	r0, r3
 800c418:	370c      	adds	r7, #12
 800c41a:	46bd      	mov	sp, r7
 800c41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c420:	4770      	bx	lr

0800c422 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c422:	b480      	push	{r7}
 800c424:	b083      	sub	sp, #12
 800c426:	af00      	add	r7, sp, #0
 800c428:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	689b      	ldr	r3, [r3, #8]
 800c42e:	f023 0201 	bic.w	r2, r3, #1
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c436:	2300      	movs	r3, #0
}
 800c438:	4618      	mov	r0, r3
 800c43a:	370c      	adds	r7, #12
 800c43c:	46bd      	mov	sp, r7
 800c43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c442:	4770      	bx	lr

0800c444 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c444:	b480      	push	{r7}
 800c446:	b085      	sub	sp, #20
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
 800c44c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c44e:	2300      	movs	r3, #0
 800c450:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	3301      	adds	r3, #1
 800c456:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800c45e:	d901      	bls.n	800c464 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c460:	2303      	movs	r3, #3
 800c462:	e01b      	b.n	800c49c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	691b      	ldr	r3, [r3, #16]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	daf2      	bge.n	800c452 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c46c:	2300      	movs	r3, #0
 800c46e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	019b      	lsls	r3, r3, #6
 800c474:	f043 0220 	orr.w	r2, r3, #32
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	3301      	adds	r3, #1
 800c480:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800c488:	d901      	bls.n	800c48e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c48a:	2303      	movs	r3, #3
 800c48c:	e006      	b.n	800c49c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	691b      	ldr	r3, [r3, #16]
 800c492:	f003 0320 	and.w	r3, r3, #32
 800c496:	2b20      	cmp	r3, #32
 800c498:	d0f0      	beq.n	800c47c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c49a:	2300      	movs	r3, #0
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	3714      	adds	r7, #20
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr

0800c4a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b085      	sub	sp, #20
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	3301      	adds	r3, #1
 800c4b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800c4c0:	d901      	bls.n	800c4c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c4c2:	2303      	movs	r3, #3
 800c4c4:	e018      	b.n	800c4f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	691b      	ldr	r3, [r3, #16]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	daf2      	bge.n	800c4b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2210      	movs	r2, #16
 800c4d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	3301      	adds	r3, #1
 800c4dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800c4e4:	d901      	bls.n	800c4ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c4e6:	2303      	movs	r3, #3
 800c4e8:	e006      	b.n	800c4f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	691b      	ldr	r3, [r3, #16]
 800c4ee:	f003 0310 	and.w	r3, r3, #16
 800c4f2:	2b10      	cmp	r3, #16
 800c4f4:	d0f0      	beq.n	800c4d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c4f6:	2300      	movs	r3, #0
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3714      	adds	r7, #20
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c502:	4770      	bx	lr

0800c504 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c504:	b480      	push	{r7}
 800c506:	b089      	sub	sp, #36	; 0x24
 800c508:	af00      	add	r7, sp, #0
 800c50a:	60f8      	str	r0, [r7, #12]
 800c50c:	60b9      	str	r1, [r7, #8]
 800c50e:	4611      	mov	r1, r2
 800c510:	461a      	mov	r2, r3
 800c512:	460b      	mov	r3, r1
 800c514:	71fb      	strb	r3, [r7, #7]
 800c516:	4613      	mov	r3, r2
 800c518:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c522:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c526:	2b00      	cmp	r3, #0
 800c528:	d123      	bne.n	800c572 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c52a:	88bb      	ldrh	r3, [r7, #4]
 800c52c:	3303      	adds	r3, #3
 800c52e:	089b      	lsrs	r3, r3, #2
 800c530:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c532:	2300      	movs	r3, #0
 800c534:	61bb      	str	r3, [r7, #24]
 800c536:	e018      	b.n	800c56a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c538:	79fb      	ldrb	r3, [r7, #7]
 800c53a:	031a      	lsls	r2, r3, #12
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	4413      	add	r3, r2
 800c540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c544:	461a      	mov	r2, r3
 800c546:	69fb      	ldr	r3, [r7, #28]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c54c:	69fb      	ldr	r3, [r7, #28]
 800c54e:	3301      	adds	r3, #1
 800c550:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c552:	69fb      	ldr	r3, [r7, #28]
 800c554:	3301      	adds	r3, #1
 800c556:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c558:	69fb      	ldr	r3, [r7, #28]
 800c55a:	3301      	adds	r3, #1
 800c55c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c55e:	69fb      	ldr	r3, [r7, #28]
 800c560:	3301      	adds	r3, #1
 800c562:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c564:	69bb      	ldr	r3, [r7, #24]
 800c566:	3301      	adds	r3, #1
 800c568:	61bb      	str	r3, [r7, #24]
 800c56a:	69ba      	ldr	r2, [r7, #24]
 800c56c:	693b      	ldr	r3, [r7, #16]
 800c56e:	429a      	cmp	r2, r3
 800c570:	d3e2      	bcc.n	800c538 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c572:	2300      	movs	r3, #0
}
 800c574:	4618      	mov	r0, r3
 800c576:	3724      	adds	r7, #36	; 0x24
 800c578:	46bd      	mov	sp, r7
 800c57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57e:	4770      	bx	lr

0800c580 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c580:	b480      	push	{r7}
 800c582:	b08b      	sub	sp, #44	; 0x2c
 800c584:	af00      	add	r7, sp, #0
 800c586:	60f8      	str	r0, [r7, #12]
 800c588:	60b9      	str	r1, [r7, #8]
 800c58a:	4613      	mov	r3, r2
 800c58c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c596:	88fb      	ldrh	r3, [r7, #6]
 800c598:	089b      	lsrs	r3, r3, #2
 800c59a:	b29b      	uxth	r3, r3
 800c59c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c59e:	88fb      	ldrh	r3, [r7, #6]
 800c5a0:	f003 0303 	and.w	r3, r3, #3
 800c5a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	623b      	str	r3, [r7, #32]
 800c5aa:	e014      	b.n	800c5d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c5ac:	69bb      	ldr	r3, [r7, #24]
 800c5ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5b2:	681a      	ldr	r2, [r3, #0]
 800c5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b6:	601a      	str	r2, [r3, #0]
    pDest++;
 800c5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ba:	3301      	adds	r3, #1
 800c5bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c0:	3301      	adds	r3, #1
 800c5c2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5cc:	3301      	adds	r3, #1
 800c5ce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c5d0:	6a3b      	ldr	r3, [r7, #32]
 800c5d2:	3301      	adds	r3, #1
 800c5d4:	623b      	str	r3, [r7, #32]
 800c5d6:	6a3a      	ldr	r2, [r7, #32]
 800c5d8:	697b      	ldr	r3, [r7, #20]
 800c5da:	429a      	cmp	r2, r3
 800c5dc:	d3e6      	bcc.n	800c5ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c5de:	8bfb      	ldrh	r3, [r7, #30]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d01e      	beq.n	800c622 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c5e8:	69bb      	ldr	r3, [r7, #24]
 800c5ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5ee:	461a      	mov	r2, r3
 800c5f0:	f107 0310 	add.w	r3, r7, #16
 800c5f4:	6812      	ldr	r2, [r2, #0]
 800c5f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c5f8:	693a      	ldr	r2, [r7, #16]
 800c5fa:	6a3b      	ldr	r3, [r7, #32]
 800c5fc:	b2db      	uxtb	r3, r3
 800c5fe:	00db      	lsls	r3, r3, #3
 800c600:	fa22 f303 	lsr.w	r3, r2, r3
 800c604:	b2da      	uxtb	r2, r3
 800c606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c608:	701a      	strb	r2, [r3, #0]
      i++;
 800c60a:	6a3b      	ldr	r3, [r7, #32]
 800c60c:	3301      	adds	r3, #1
 800c60e:	623b      	str	r3, [r7, #32]
      pDest++;
 800c610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c612:	3301      	adds	r3, #1
 800c614:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c616:	8bfb      	ldrh	r3, [r7, #30]
 800c618:	3b01      	subs	r3, #1
 800c61a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c61c:	8bfb      	ldrh	r3, [r7, #30]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d1ea      	bne.n	800c5f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c624:	4618      	mov	r0, r3
 800c626:	372c      	adds	r7, #44	; 0x2c
 800c628:	46bd      	mov	sp, r7
 800c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62e:	4770      	bx	lr

0800c630 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800c630:	b480      	push	{r7}
 800c632:	b085      	sub	sp, #20
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	695b      	ldr	r3, [r3, #20]
 800c63c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	699b      	ldr	r3, [r3, #24]
 800c642:	68fa      	ldr	r2, [r7, #12]
 800c644:	4013      	ands	r3, r2
 800c646:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c648:	68fb      	ldr	r3, [r7, #12]
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3714      	adds	r7, #20
 800c64e:	46bd      	mov	sp, r7
 800c650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c654:	4770      	bx	lr

0800c656 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800c656:	b480      	push	{r7}
 800c658:	b085      	sub	sp, #20
 800c65a:	af00      	add	r7, sp, #0
 800c65c:	6078      	str	r0, [r7, #4]
 800c65e:	460b      	mov	r3, r1
 800c660:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800c666:	78fb      	ldrb	r3, [r7, #3]
 800c668:	015a      	lsls	r2, r3, #5
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	4413      	add	r3, r2
 800c66e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c672:	689b      	ldr	r3, [r3, #8]
 800c674:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800c676:	78fb      	ldrb	r3, [r7, #3]
 800c678:	015a      	lsls	r2, r3, #5
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	4413      	add	r3, r2
 800c67e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c682:	68db      	ldr	r3, [r3, #12]
 800c684:	68ba      	ldr	r2, [r7, #8]
 800c686:	4013      	ands	r3, r2
 800c688:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c68a:	68bb      	ldr	r3, [r7, #8]
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3714      	adds	r7, #20
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr

0800c698 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800c698:	b480      	push	{r7}
 800c69a:	b083      	sub	sp, #12
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	695b      	ldr	r3, [r3, #20]
 800c6a4:	f003 0301 	and.w	r3, r3, #1
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	370c      	adds	r7, #12
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b2:	4770      	bx	lr

0800c6b4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800c6b4:	b480      	push	{r7}
 800c6b6:	b085      	sub	sp, #20
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	460b      	mov	r3, r1
 800c6be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	68fa      	ldr	r2, [r7, #12]
 800c6ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c6d2:	f023 0303 	bic.w	r3, r3, #3
 800c6d6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c6de:	681a      	ldr	r2, [r3, #0]
 800c6e0:	78fb      	ldrb	r3, [r7, #3]
 800c6e2:	f003 0303 	and.w	r3, r3, #3
 800c6e6:	68f9      	ldr	r1, [r7, #12]
 800c6e8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c6ec:	4313      	orrs	r3, r2
 800c6ee:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800c6f0:	78fb      	ldrb	r3, [r7, #3]
 800c6f2:	2b01      	cmp	r3, #1
 800c6f4:	d107      	bne.n	800c706 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c6fc:	461a      	mov	r2, r3
 800c6fe:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800c702:	6053      	str	r3, [r2, #4]
 800c704:	e00c      	b.n	800c720 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800c706:	78fb      	ldrb	r3, [r7, #3]
 800c708:	2b02      	cmp	r3, #2
 800c70a:	d107      	bne.n	800c71c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c712:	461a      	mov	r2, r3
 800c714:	f241 7370 	movw	r3, #6000	; 0x1770
 800c718:	6053      	str	r3, [r2, #4]
 800c71a:	e001      	b.n	800c720 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800c71c:	2301      	movs	r3, #1
 800c71e:	e000      	b.n	800c722 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800c720:	2300      	movs	r3, #0
}
 800c722:	4618      	mov	r0, r3
 800c724:	3714      	adds	r7, #20
 800c726:	46bd      	mov	sp, r7
 800c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72c:	4770      	bx	lr

0800c72e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800c72e:	b580      	push	{r7, lr}
 800c730:	b084      	sub	sp, #16
 800c732:	af00      	add	r7, sp, #0
 800c734:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800c73a:	2300      	movs	r3, #0
 800c73c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c74e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	68fa      	ldr	r2, [r7, #12]
 800c754:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c75c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800c75e:	2064      	movs	r0, #100	; 0x64
 800c760:	f7f8 f902 	bl	8004968 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	68fa      	ldr	r2, [r7, #12]
 800c768:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c76c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c770:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800c772:	200a      	movs	r0, #10
 800c774:	f7f8 f8f8 	bl	8004968 <HAL_Delay>

  return HAL_OK;
 800c778:	2300      	movs	r3, #0
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	3710      	adds	r7, #16
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}

0800c782 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800c782:	b480      	push	{r7}
 800c784:	b085      	sub	sp, #20
 800c786:	af00      	add	r7, sp, #0
 800c788:	6078      	str	r0, [r7, #4]
 800c78a:	460b      	mov	r3, r1
 800c78c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c792:	2300      	movs	r3, #0
 800c794:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c7a6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d109      	bne.n	800c7c6 <USB_DriveVbus+0x44>
 800c7b2:	78fb      	ldrb	r3, [r7, #3]
 800c7b4:	2b01      	cmp	r3, #1
 800c7b6:	d106      	bne.n	800c7c6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	68fa      	ldr	r2, [r7, #12]
 800c7bc:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c7c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c7c4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c7cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7d0:	d109      	bne.n	800c7e6 <USB_DriveVbus+0x64>
 800c7d2:	78fb      	ldrb	r3, [r7, #3]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d106      	bne.n	800c7e6 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	68fa      	ldr	r2, [r7, #12]
 800c7dc:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c7e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c7e4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800c7e6:	2300      	movs	r3, #0
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3714      	adds	r7, #20
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f2:	4770      	bx	lr

0800c7f4 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b085      	sub	sp, #20
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c800:	2300      	movs	r3, #0
 800c802:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	0c5b      	lsrs	r3, r3, #17
 800c812:	f003 0303 	and.w	r3, r3, #3
}
 800c816:	4618      	mov	r0, r3
 800c818:	3714      	adds	r7, #20
 800c81a:	46bd      	mov	sp, r7
 800c81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c820:	4770      	bx	lr
	...

0800c824 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b088      	sub	sp, #32
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	4608      	mov	r0, r1
 800c82e:	4611      	mov	r1, r2
 800c830:	461a      	mov	r2, r3
 800c832:	4603      	mov	r3, r0
 800c834:	70fb      	strb	r3, [r7, #3]
 800c836:	460b      	mov	r3, r1
 800c838:	70bb      	strb	r3, [r7, #2]
 800c83a:	4613      	mov	r3, r2
 800c83c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800c83e:	2300      	movs	r3, #0
 800c840:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800c846:	78fb      	ldrb	r3, [r7, #3]
 800c848:	015a      	lsls	r2, r3, #5
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	4413      	add	r3, r2
 800c84e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c852:	461a      	mov	r2, r3
 800c854:	f04f 33ff 	mov.w	r3, #4294967295
 800c858:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800c85a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c85e:	2b03      	cmp	r3, #3
 800c860:	d87c      	bhi.n	800c95c <USB_HC_Init+0x138>
 800c862:	a201      	add	r2, pc, #4	; (adr r2, 800c868 <USB_HC_Init+0x44>)
 800c864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c868:	0800c879 	.word	0x0800c879
 800c86c:	0800c91f 	.word	0x0800c91f
 800c870:	0800c879 	.word	0x0800c879
 800c874:	0800c8e1 	.word	0x0800c8e1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c878:	78fb      	ldrb	r3, [r7, #3]
 800c87a:	015a      	lsls	r2, r3, #5
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	4413      	add	r3, r2
 800c880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c884:	461a      	mov	r2, r3
 800c886:	f240 439d 	movw	r3, #1181	; 0x49d
 800c88a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800c88c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c890:	2b00      	cmp	r3, #0
 800c892:	da10      	bge.n	800c8b6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c894:	78fb      	ldrb	r3, [r7, #3]
 800c896:	015a      	lsls	r2, r3, #5
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	4413      	add	r3, r2
 800c89c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8a0:	68db      	ldr	r3, [r3, #12]
 800c8a2:	78fa      	ldrb	r2, [r7, #3]
 800c8a4:	0151      	lsls	r1, r2, #5
 800c8a6:	693a      	ldr	r2, [r7, #16]
 800c8a8:	440a      	add	r2, r1
 800c8aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c8ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c8b2:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800c8b4:	e055      	b.n	800c962 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	4a6f      	ldr	r2, [pc, #444]	; (800ca78 <USB_HC_Init+0x254>)
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d151      	bne.n	800c962 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800c8be:	78fb      	ldrb	r3, [r7, #3]
 800c8c0:	015a      	lsls	r2, r3, #5
 800c8c2:	693b      	ldr	r3, [r7, #16]
 800c8c4:	4413      	add	r3, r2
 800c8c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8ca:	68db      	ldr	r3, [r3, #12]
 800c8cc:	78fa      	ldrb	r2, [r7, #3]
 800c8ce:	0151      	lsls	r1, r2, #5
 800c8d0:	693a      	ldr	r2, [r7, #16]
 800c8d2:	440a      	add	r2, r1
 800c8d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c8d8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c8dc:	60d3      	str	r3, [r2, #12]
      break;
 800c8de:	e040      	b.n	800c962 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c8e0:	78fb      	ldrb	r3, [r7, #3]
 800c8e2:	015a      	lsls	r2, r3, #5
 800c8e4:	693b      	ldr	r3, [r7, #16]
 800c8e6:	4413      	add	r3, r2
 800c8e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8ec:	461a      	mov	r2, r3
 800c8ee:	f240 639d 	movw	r3, #1693	; 0x69d
 800c8f2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c8f4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	da34      	bge.n	800c966 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c8fc:	78fb      	ldrb	r3, [r7, #3]
 800c8fe:	015a      	lsls	r2, r3, #5
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	4413      	add	r3, r2
 800c904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c908:	68db      	ldr	r3, [r3, #12]
 800c90a:	78fa      	ldrb	r2, [r7, #3]
 800c90c:	0151      	lsls	r1, r2, #5
 800c90e:	693a      	ldr	r2, [r7, #16]
 800c910:	440a      	add	r2, r1
 800c912:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c91a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800c91c:	e023      	b.n	800c966 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c91e:	78fb      	ldrb	r3, [r7, #3]
 800c920:	015a      	lsls	r2, r3, #5
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	4413      	add	r3, r2
 800c926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c92a:	461a      	mov	r2, r3
 800c92c:	f240 2325 	movw	r3, #549	; 0x225
 800c930:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c932:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c936:	2b00      	cmp	r3, #0
 800c938:	da17      	bge.n	800c96a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800c93a:	78fb      	ldrb	r3, [r7, #3]
 800c93c:	015a      	lsls	r2, r3, #5
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	4413      	add	r3, r2
 800c942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c946:	68db      	ldr	r3, [r3, #12]
 800c948:	78fa      	ldrb	r2, [r7, #3]
 800c94a:	0151      	lsls	r1, r2, #5
 800c94c:	693a      	ldr	r2, [r7, #16]
 800c94e:	440a      	add	r2, r1
 800c950:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c954:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800c958:	60d3      	str	r3, [r2, #12]
      }
      break;
 800c95a:	e006      	b.n	800c96a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800c95c:	2301      	movs	r3, #1
 800c95e:	77fb      	strb	r3, [r7, #31]
      break;
 800c960:	e004      	b.n	800c96c <USB_HC_Init+0x148>
      break;
 800c962:	bf00      	nop
 800c964:	e002      	b.n	800c96c <USB_HC_Init+0x148>
      break;
 800c966:	bf00      	nop
 800c968:	e000      	b.n	800c96c <USB_HC_Init+0x148>
      break;
 800c96a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800c96c:	78fb      	ldrb	r3, [r7, #3]
 800c96e:	015a      	lsls	r2, r3, #5
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	4413      	add	r3, r2
 800c974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c978:	461a      	mov	r2, r3
 800c97a:	2300      	movs	r3, #0
 800c97c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800c97e:	78fb      	ldrb	r3, [r7, #3]
 800c980:	015a      	lsls	r2, r3, #5
 800c982:	693b      	ldr	r3, [r7, #16]
 800c984:	4413      	add	r3, r2
 800c986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c98a:	68db      	ldr	r3, [r3, #12]
 800c98c:	78fa      	ldrb	r2, [r7, #3]
 800c98e:	0151      	lsls	r1, r2, #5
 800c990:	693a      	ldr	r2, [r7, #16]
 800c992:	440a      	add	r2, r1
 800c994:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c998:	f043 0302 	orr.w	r3, r3, #2
 800c99c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c9a4:	699a      	ldr	r2, [r3, #24]
 800c9a6:	78fb      	ldrb	r3, [r7, #3]
 800c9a8:	f003 030f 	and.w	r3, r3, #15
 800c9ac:	2101      	movs	r1, #1
 800c9ae:	fa01 f303 	lsl.w	r3, r1, r3
 800c9b2:	6939      	ldr	r1, [r7, #16]
 800c9b4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c9b8:	4313      	orrs	r3, r2
 800c9ba:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	699b      	ldr	r3, [r3, #24]
 800c9c0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800c9c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	da03      	bge.n	800c9d8 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800c9d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c9d4:	61bb      	str	r3, [r7, #24]
 800c9d6:	e001      	b.n	800c9dc <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f7ff ff09 	bl	800c7f4 <USB_GetHostSpeed>
 800c9e2:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800c9e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c9e8:	2b02      	cmp	r3, #2
 800c9ea:	d106      	bne.n	800c9fa <USB_HC_Init+0x1d6>
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	2b02      	cmp	r3, #2
 800c9f0:	d003      	beq.n	800c9fa <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800c9f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c9f6:	617b      	str	r3, [r7, #20]
 800c9f8:	e001      	b.n	800c9fe <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c9fe:	787b      	ldrb	r3, [r7, #1]
 800ca00:	059b      	lsls	r3, r3, #22
 800ca02:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ca06:	78bb      	ldrb	r3, [r7, #2]
 800ca08:	02db      	lsls	r3, r3, #11
 800ca0a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ca0e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ca10:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ca14:	049b      	lsls	r3, r3, #18
 800ca16:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ca1a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800ca1c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ca1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ca22:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800ca24:	69bb      	ldr	r3, [r7, #24]
 800ca26:	431a      	orrs	r2, r3
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ca2c:	78fa      	ldrb	r2, [r7, #3]
 800ca2e:	0151      	lsls	r1, r2, #5
 800ca30:	693a      	ldr	r2, [r7, #16]
 800ca32:	440a      	add	r2, r1
 800ca34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800ca38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ca3c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800ca3e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ca42:	2b03      	cmp	r3, #3
 800ca44:	d003      	beq.n	800ca4e <USB_HC_Init+0x22a>
 800ca46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ca4a:	2b01      	cmp	r3, #1
 800ca4c:	d10f      	bne.n	800ca6e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800ca4e:	78fb      	ldrb	r3, [r7, #3]
 800ca50:	015a      	lsls	r2, r3, #5
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	4413      	add	r3, r2
 800ca56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	78fa      	ldrb	r2, [r7, #3]
 800ca5e:	0151      	lsls	r1, r2, #5
 800ca60:	693a      	ldr	r2, [r7, #16]
 800ca62:	440a      	add	r2, r1
 800ca64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ca68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ca6c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800ca6e:	7ffb      	ldrb	r3, [r7, #31]
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3720      	adds	r7, #32
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}
 800ca78:	40040000 	.word	0x40040000

0800ca7c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b08c      	sub	sp, #48	; 0x30
 800ca80:	af02      	add	r7, sp, #8
 800ca82:	60f8      	str	r0, [r7, #12]
 800ca84:	60b9      	str	r1, [r7, #8]
 800ca86:	4613      	mov	r3, r2
 800ca88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	785b      	ldrb	r3, [r3, #1]
 800ca92:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800ca94:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ca98:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	4a5d      	ldr	r2, [pc, #372]	; (800cc14 <USB_HC_StartXfer+0x198>)
 800ca9e:	4293      	cmp	r3, r2
 800caa0:	d12f      	bne.n	800cb02 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800caa2:	79fb      	ldrb	r3, [r7, #7]
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	d11c      	bne.n	800cae2 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	7c9b      	ldrb	r3, [r3, #18]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d003      	beq.n	800cab8 <USB_HC_StartXfer+0x3c>
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	7c9b      	ldrb	r3, [r3, #18]
 800cab4:	2b02      	cmp	r3, #2
 800cab6:	d124      	bne.n	800cb02 <USB_HC_StartXfer+0x86>
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	799b      	ldrb	r3, [r3, #6]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d120      	bne.n	800cb02 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800cac0:	69fb      	ldr	r3, [r7, #28]
 800cac2:	015a      	lsls	r2, r3, #5
 800cac4:	6a3b      	ldr	r3, [r7, #32]
 800cac6:	4413      	add	r3, r2
 800cac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cacc:	68db      	ldr	r3, [r3, #12]
 800cace:	69fa      	ldr	r2, [r7, #28]
 800cad0:	0151      	lsls	r1, r2, #5
 800cad2:	6a3a      	ldr	r2, [r7, #32]
 800cad4:	440a      	add	r2, r1
 800cad6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cade:	60d3      	str	r3, [r2, #12]
 800cae0:	e00f      	b.n	800cb02 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	791b      	ldrb	r3, [r3, #4]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d10b      	bne.n	800cb02 <USB_HC_StartXfer+0x86>
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	795b      	ldrb	r3, [r3, #5]
 800caee:	2b01      	cmp	r3, #1
 800caf0:	d107      	bne.n	800cb02 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	785b      	ldrb	r3, [r3, #1]
 800caf6:	4619      	mov	r1, r3
 800caf8:	68f8      	ldr	r0, [r7, #12]
 800cafa:	f000 fb6b 	bl	800d1d4 <USB_DoPing>
        return HAL_OK;
 800cafe:	2300      	movs	r3, #0
 800cb00:	e232      	b.n	800cf68 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	799b      	ldrb	r3, [r3, #6]
 800cb06:	2b01      	cmp	r3, #1
 800cb08:	d158      	bne.n	800cbbc <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	78db      	ldrb	r3, [r3, #3]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d007      	beq.n	800cb26 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800cb16:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cb18:	68ba      	ldr	r2, [r7, #8]
 800cb1a:	8a92      	ldrh	r2, [r2, #20]
 800cb1c:	fb03 f202 	mul.w	r2, r3, r2
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	61da      	str	r2, [r3, #28]
 800cb24:	e07c      	b.n	800cc20 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	7c9b      	ldrb	r3, [r3, #18]
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	d130      	bne.n	800cb90 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800cb2e:	68bb      	ldr	r3, [r7, #8]
 800cb30:	6a1b      	ldr	r3, [r3, #32]
 800cb32:	2bbc      	cmp	r3, #188	; 0xbc
 800cb34:	d918      	bls.n	800cb68 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	8a9b      	ldrh	r3, [r3, #20]
 800cb3a:	461a      	mov	r2, r3
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	69da      	ldr	r2, [r3, #28]
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	68db      	ldr	r3, [r3, #12]
 800cb4c:	2b01      	cmp	r3, #1
 800cb4e:	d003      	beq.n	800cb58 <USB_HC_StartXfer+0xdc>
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	68db      	ldr	r3, [r3, #12]
 800cb54:	2b02      	cmp	r3, #2
 800cb56:	d103      	bne.n	800cb60 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	2202      	movs	r2, #2
 800cb5c:	60da      	str	r2, [r3, #12]
 800cb5e:	e05f      	b.n	800cc20 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	2201      	movs	r2, #1
 800cb64:	60da      	str	r2, [r3, #12]
 800cb66:	e05b      	b.n	800cc20 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	6a1a      	ldr	r2, [r3, #32]
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	68db      	ldr	r3, [r3, #12]
 800cb74:	2b01      	cmp	r3, #1
 800cb76:	d007      	beq.n	800cb88 <USB_HC_StartXfer+0x10c>
 800cb78:	68bb      	ldr	r3, [r7, #8]
 800cb7a:	68db      	ldr	r3, [r3, #12]
 800cb7c:	2b02      	cmp	r3, #2
 800cb7e:	d003      	beq.n	800cb88 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	2204      	movs	r2, #4
 800cb84:	60da      	str	r2, [r3, #12]
 800cb86:	e04b      	b.n	800cc20 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	2203      	movs	r2, #3
 800cb8c:	60da      	str	r2, [r3, #12]
 800cb8e:	e047      	b.n	800cc20 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800cb90:	79fb      	ldrb	r3, [r7, #7]
 800cb92:	2b01      	cmp	r3, #1
 800cb94:	d10d      	bne.n	800cbb2 <USB_HC_StartXfer+0x136>
 800cb96:	68bb      	ldr	r3, [r7, #8]
 800cb98:	6a1b      	ldr	r3, [r3, #32]
 800cb9a:	68ba      	ldr	r2, [r7, #8]
 800cb9c:	8a92      	ldrh	r2, [r2, #20]
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d907      	bls.n	800cbb2 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800cba2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cba4:	68ba      	ldr	r2, [r7, #8]
 800cba6:	8a92      	ldrh	r2, [r2, #20]
 800cba8:	fb03 f202 	mul.w	r2, r3, r2
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	61da      	str	r2, [r3, #28]
 800cbb0:	e036      	b.n	800cc20 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	6a1a      	ldr	r2, [r3, #32]
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	61da      	str	r2, [r3, #28]
 800cbba:	e031      	b.n	800cc20 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	6a1b      	ldr	r3, [r3, #32]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d018      	beq.n	800cbf6 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	6a1b      	ldr	r3, [r3, #32]
 800cbc8:	68ba      	ldr	r2, [r7, #8]
 800cbca:	8a92      	ldrh	r2, [r2, #20]
 800cbcc:	4413      	add	r3, r2
 800cbce:	3b01      	subs	r3, #1
 800cbd0:	68ba      	ldr	r2, [r7, #8]
 800cbd2:	8a92      	ldrh	r2, [r2, #20]
 800cbd4:	fbb3 f3f2 	udiv	r3, r3, r2
 800cbd8:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 800cbda:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cbdc:	8b7b      	ldrh	r3, [r7, #26]
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d90b      	bls.n	800cbfa <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800cbe2:	8b7b      	ldrh	r3, [r7, #26]
 800cbe4:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800cbe6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cbe8:	68ba      	ldr	r2, [r7, #8]
 800cbea:	8a92      	ldrh	r2, [r2, #20]
 800cbec:	fb03 f202 	mul.w	r2, r3, r2
 800cbf0:	68bb      	ldr	r3, [r7, #8]
 800cbf2:	61da      	str	r2, [r3, #28]
 800cbf4:	e001      	b.n	800cbfa <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	78db      	ldrb	r3, [r3, #3]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d00a      	beq.n	800cc18 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800cc02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cc04:	68ba      	ldr	r2, [r7, #8]
 800cc06:	8a92      	ldrh	r2, [r2, #20]
 800cc08:	fb03 f202 	mul.w	r2, r3, r2
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	61da      	str	r2, [r3, #28]
 800cc10:	e006      	b.n	800cc20 <USB_HC_StartXfer+0x1a4>
 800cc12:	bf00      	nop
 800cc14:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	6a1a      	ldr	r2, [r3, #32]
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	69db      	ldr	r3, [r3, #28]
 800cc24:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800cc28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cc2a:	04d9      	lsls	r1, r3, #19
 800cc2c:	4ba3      	ldr	r3, [pc, #652]	; (800cebc <USB_HC_StartXfer+0x440>)
 800cc2e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800cc30:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	7d9b      	ldrb	r3, [r3, #22]
 800cc36:	075b      	lsls	r3, r3, #29
 800cc38:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800cc3c:	69f9      	ldr	r1, [r7, #28]
 800cc3e:	0148      	lsls	r0, r1, #5
 800cc40:	6a39      	ldr	r1, [r7, #32]
 800cc42:	4401      	add	r1, r0
 800cc44:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800cc48:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800cc4a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800cc4c:	79fb      	ldrb	r3, [r7, #7]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d009      	beq.n	800cc66 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	6999      	ldr	r1, [r3, #24]
 800cc56:	69fb      	ldr	r3, [r7, #28]
 800cc58:	015a      	lsls	r2, r3, #5
 800cc5a:	6a3b      	ldr	r3, [r7, #32]
 800cc5c:	4413      	add	r3, r2
 800cc5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc62:	460a      	mov	r2, r1
 800cc64:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800cc66:	6a3b      	ldr	r3, [r7, #32]
 800cc68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cc6c:	689b      	ldr	r3, [r3, #8]
 800cc6e:	f003 0301 	and.w	r3, r3, #1
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	bf0c      	ite	eq
 800cc76:	2301      	moveq	r3, #1
 800cc78:	2300      	movne	r3, #0
 800cc7a:	b2db      	uxtb	r3, r3
 800cc7c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800cc7e:	69fb      	ldr	r3, [r7, #28]
 800cc80:	015a      	lsls	r2, r3, #5
 800cc82:	6a3b      	ldr	r3, [r7, #32]
 800cc84:	4413      	add	r3, r2
 800cc86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	69fa      	ldr	r2, [r7, #28]
 800cc8e:	0151      	lsls	r1, r2, #5
 800cc90:	6a3a      	ldr	r2, [r7, #32]
 800cc92:	440a      	add	r2, r1
 800cc94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cc98:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cc9c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800cc9e:	69fb      	ldr	r3, [r7, #28]
 800cca0:	015a      	lsls	r2, r3, #5
 800cca2:	6a3b      	ldr	r3, [r7, #32]
 800cca4:	4413      	add	r3, r2
 800cca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ccaa:	681a      	ldr	r2, [r3, #0]
 800ccac:	7e7b      	ldrb	r3, [r7, #25]
 800ccae:	075b      	lsls	r3, r3, #29
 800ccb0:	69f9      	ldr	r1, [r7, #28]
 800ccb2:	0148      	lsls	r0, r1, #5
 800ccb4:	6a39      	ldr	r1, [r7, #32]
 800ccb6:	4401      	add	r1, r0
 800ccb8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800ccbc:	4313      	orrs	r3, r2
 800ccbe:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800ccc0:	68bb      	ldr	r3, [r7, #8]
 800ccc2:	799b      	ldrb	r3, [r3, #6]
 800ccc4:	2b01      	cmp	r3, #1
 800ccc6:	f040 80c3 	bne.w	800ce50 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800ccca:	68bb      	ldr	r3, [r7, #8]
 800cccc:	7c5b      	ldrb	r3, [r3, #17]
 800ccce:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800ccd0:	68ba      	ldr	r2, [r7, #8]
 800ccd2:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800ccd4:	4313      	orrs	r3, r2
 800ccd6:	69fa      	ldr	r2, [r7, #28]
 800ccd8:	0151      	lsls	r1, r2, #5
 800ccda:	6a3a      	ldr	r2, [r7, #32]
 800ccdc:	440a      	add	r2, r1
 800ccde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800cce2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800cce6:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800cce8:	69fb      	ldr	r3, [r7, #28]
 800ccea:	015a      	lsls	r2, r3, #5
 800ccec:	6a3b      	ldr	r3, [r7, #32]
 800ccee:	4413      	add	r3, r2
 800ccf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ccf4:	68db      	ldr	r3, [r3, #12]
 800ccf6:	69fa      	ldr	r2, [r7, #28]
 800ccf8:	0151      	lsls	r1, r2, #5
 800ccfa:	6a3a      	ldr	r2, [r7, #32]
 800ccfc:	440a      	add	r2, r1
 800ccfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cd02:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800cd06:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	79db      	ldrb	r3, [r3, #7]
 800cd0c:	2b01      	cmp	r3, #1
 800cd0e:	d123      	bne.n	800cd58 <USB_HC_StartXfer+0x2dc>
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	78db      	ldrb	r3, [r3, #3]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d11f      	bne.n	800cd58 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800cd18:	69fb      	ldr	r3, [r7, #28]
 800cd1a:	015a      	lsls	r2, r3, #5
 800cd1c:	6a3b      	ldr	r3, [r7, #32]
 800cd1e:	4413      	add	r3, r2
 800cd20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd24:	685b      	ldr	r3, [r3, #4]
 800cd26:	69fa      	ldr	r2, [r7, #28]
 800cd28:	0151      	lsls	r1, r2, #5
 800cd2a:	6a3a      	ldr	r2, [r7, #32]
 800cd2c:	440a      	add	r2, r1
 800cd2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cd32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd36:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800cd38:	69fb      	ldr	r3, [r7, #28]
 800cd3a:	015a      	lsls	r2, r3, #5
 800cd3c:	6a3b      	ldr	r3, [r7, #32]
 800cd3e:	4413      	add	r3, r2
 800cd40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd44:	68db      	ldr	r3, [r3, #12]
 800cd46:	69fa      	ldr	r2, [r7, #28]
 800cd48:	0151      	lsls	r1, r2, #5
 800cd4a:	6a3a      	ldr	r2, [r7, #32]
 800cd4c:	440a      	add	r2, r1
 800cd4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cd52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd56:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	7c9b      	ldrb	r3, [r3, #18]
 800cd5c:	2b01      	cmp	r3, #1
 800cd5e:	d003      	beq.n	800cd68 <USB_HC_StartXfer+0x2ec>
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	7c9b      	ldrb	r3, [r3, #18]
 800cd64:	2b03      	cmp	r3, #3
 800cd66:	d117      	bne.n	800cd98 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800cd6c:	2b01      	cmp	r3, #1
 800cd6e:	d113      	bne.n	800cd98 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	78db      	ldrb	r3, [r3, #3]
 800cd74:	2b01      	cmp	r3, #1
 800cd76:	d10f      	bne.n	800cd98 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800cd78:	69fb      	ldr	r3, [r7, #28]
 800cd7a:	015a      	lsls	r2, r3, #5
 800cd7c:	6a3b      	ldr	r3, [r7, #32]
 800cd7e:	4413      	add	r3, r2
 800cd80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd84:	685b      	ldr	r3, [r3, #4]
 800cd86:	69fa      	ldr	r2, [r7, #28]
 800cd88:	0151      	lsls	r1, r2, #5
 800cd8a:	6a3a      	ldr	r2, [r7, #32]
 800cd8c:	440a      	add	r2, r1
 800cd8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cd92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd96:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	7c9b      	ldrb	r3, [r3, #18]
 800cd9c:	2b01      	cmp	r3, #1
 800cd9e:	d162      	bne.n	800ce66 <USB_HC_StartXfer+0x3ea>
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	78db      	ldrb	r3, [r3, #3]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d15e      	bne.n	800ce66 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800cda8:	68bb      	ldr	r3, [r7, #8]
 800cdaa:	68db      	ldr	r3, [r3, #12]
 800cdac:	3b01      	subs	r3, #1
 800cdae:	2b03      	cmp	r3, #3
 800cdb0:	d858      	bhi.n	800ce64 <USB_HC_StartXfer+0x3e8>
 800cdb2:	a201      	add	r2, pc, #4	; (adr r2, 800cdb8 <USB_HC_StartXfer+0x33c>)
 800cdb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdb8:	0800cdc9 	.word	0x0800cdc9
 800cdbc:	0800cdeb 	.word	0x0800cdeb
 800cdc0:	0800ce0d 	.word	0x0800ce0d
 800cdc4:	0800ce2f 	.word	0x0800ce2f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800cdc8:	69fb      	ldr	r3, [r7, #28]
 800cdca:	015a      	lsls	r2, r3, #5
 800cdcc:	6a3b      	ldr	r3, [r7, #32]
 800cdce:	4413      	add	r3, r2
 800cdd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cdd4:	685b      	ldr	r3, [r3, #4]
 800cdd6:	69fa      	ldr	r2, [r7, #28]
 800cdd8:	0151      	lsls	r1, r2, #5
 800cdda:	6a3a      	ldr	r2, [r7, #32]
 800cddc:	440a      	add	r2, r1
 800cdde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cde2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cde6:	6053      	str	r3, [r2, #4]
          break;
 800cde8:	e03d      	b.n	800ce66 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800cdea:	69fb      	ldr	r3, [r7, #28]
 800cdec:	015a      	lsls	r2, r3, #5
 800cdee:	6a3b      	ldr	r3, [r7, #32]
 800cdf0:	4413      	add	r3, r2
 800cdf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cdf6:	685b      	ldr	r3, [r3, #4]
 800cdf8:	69fa      	ldr	r2, [r7, #28]
 800cdfa:	0151      	lsls	r1, r2, #5
 800cdfc:	6a3a      	ldr	r2, [r7, #32]
 800cdfe:	440a      	add	r2, r1
 800ce00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ce04:	f043 030e 	orr.w	r3, r3, #14
 800ce08:	6053      	str	r3, [r2, #4]
          break;
 800ce0a:	e02c      	b.n	800ce66 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800ce0c:	69fb      	ldr	r3, [r7, #28]
 800ce0e:	015a      	lsls	r2, r3, #5
 800ce10:	6a3b      	ldr	r3, [r7, #32]
 800ce12:	4413      	add	r3, r2
 800ce14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce18:	685b      	ldr	r3, [r3, #4]
 800ce1a:	69fa      	ldr	r2, [r7, #28]
 800ce1c:	0151      	lsls	r1, r2, #5
 800ce1e:	6a3a      	ldr	r2, [r7, #32]
 800ce20:	440a      	add	r2, r1
 800ce22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ce26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ce2a:	6053      	str	r3, [r2, #4]
          break;
 800ce2c:	e01b      	b.n	800ce66 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800ce2e:	69fb      	ldr	r3, [r7, #28]
 800ce30:	015a      	lsls	r2, r3, #5
 800ce32:	6a3b      	ldr	r3, [r7, #32]
 800ce34:	4413      	add	r3, r2
 800ce36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce3a:	685b      	ldr	r3, [r3, #4]
 800ce3c:	69fa      	ldr	r2, [r7, #28]
 800ce3e:	0151      	lsls	r1, r2, #5
 800ce40:	6a3a      	ldr	r2, [r7, #32]
 800ce42:	440a      	add	r2, r1
 800ce44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ce48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ce4c:	6053      	str	r3, [r2, #4]
          break;
 800ce4e:	e00a      	b.n	800ce66 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800ce50:	69fb      	ldr	r3, [r7, #28]
 800ce52:	015a      	lsls	r2, r3, #5
 800ce54:	6a3b      	ldr	r3, [r7, #32]
 800ce56:	4413      	add	r3, r2
 800ce58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce5c:	461a      	mov	r2, r3
 800ce5e:	2300      	movs	r3, #0
 800ce60:	6053      	str	r3, [r2, #4]
 800ce62:	e000      	b.n	800ce66 <USB_HC_StartXfer+0x3ea>
          break;
 800ce64:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800ce66:	69fb      	ldr	r3, [r7, #28]
 800ce68:	015a      	lsls	r2, r3, #5
 800ce6a:	6a3b      	ldr	r3, [r7, #32]
 800ce6c:	4413      	add	r3, r2
 800ce6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ce76:	693b      	ldr	r3, [r7, #16]
 800ce78:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ce7c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	78db      	ldrb	r3, [r3, #3]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d004      	beq.n	800ce90 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800ce86:	693b      	ldr	r3, [r7, #16]
 800ce88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ce8c:	613b      	str	r3, [r7, #16]
 800ce8e:	e003      	b.n	800ce98 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ce96:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ce98:	693b      	ldr	r3, [r7, #16]
 800ce9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ce9e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800cea0:	69fb      	ldr	r3, [r7, #28]
 800cea2:	015a      	lsls	r2, r3, #5
 800cea4:	6a3b      	ldr	r3, [r7, #32]
 800cea6:	4413      	add	r3, r2
 800cea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ceac:	461a      	mov	r2, r3
 800ceae:	693b      	ldr	r3, [r7, #16]
 800ceb0:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800ceb2:	79fb      	ldrb	r3, [r7, #7]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d003      	beq.n	800cec0 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	e055      	b.n	800cf68 <USB_HC_StartXfer+0x4ec>
 800cebc:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800cec0:	68bb      	ldr	r3, [r7, #8]
 800cec2:	78db      	ldrb	r3, [r3, #3]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d14e      	bne.n	800cf66 <USB_HC_StartXfer+0x4ea>
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	6a1b      	ldr	r3, [r3, #32]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d04a      	beq.n	800cf66 <USB_HC_StartXfer+0x4ea>
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	79db      	ldrb	r3, [r3, #7]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d146      	bne.n	800cf66 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	7c9b      	ldrb	r3, [r3, #18]
 800cedc:	2b03      	cmp	r3, #3
 800cede:	d831      	bhi.n	800cf44 <USB_HC_StartXfer+0x4c8>
 800cee0:	a201      	add	r2, pc, #4	; (adr r2, 800cee8 <USB_HC_StartXfer+0x46c>)
 800cee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cee6:	bf00      	nop
 800cee8:	0800cef9 	.word	0x0800cef9
 800ceec:	0800cf1d 	.word	0x0800cf1d
 800cef0:	0800cef9 	.word	0x0800cef9
 800cef4:	0800cf1d 	.word	0x0800cf1d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	6a1b      	ldr	r3, [r3, #32]
 800cefc:	3303      	adds	r3, #3
 800cefe:	089b      	lsrs	r3, r3, #2
 800cf00:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800cf02:	8afa      	ldrh	r2, [r7, #22]
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf08:	b29b      	uxth	r3, r3
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	d91c      	bls.n	800cf48 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	699b      	ldr	r3, [r3, #24]
 800cf12:	f043 0220 	orr.w	r2, r3, #32
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	619a      	str	r2, [r3, #24]
        }
        break;
 800cf1a:	e015      	b.n	800cf48 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	6a1b      	ldr	r3, [r3, #32]
 800cf20:	3303      	adds	r3, #3
 800cf22:	089b      	lsrs	r3, r3, #2
 800cf24:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800cf26:	8afa      	ldrh	r2, [r7, #22]
 800cf28:	6a3b      	ldr	r3, [r7, #32]
 800cf2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cf2e:	691b      	ldr	r3, [r3, #16]
 800cf30:	b29b      	uxth	r3, r3
 800cf32:	429a      	cmp	r2, r3
 800cf34:	d90a      	bls.n	800cf4c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	699b      	ldr	r3, [r3, #24]
 800cf3a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	619a      	str	r2, [r3, #24]
        }
        break;
 800cf42:	e003      	b.n	800cf4c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800cf44:	bf00      	nop
 800cf46:	e002      	b.n	800cf4e <USB_HC_StartXfer+0x4d2>
        break;
 800cf48:	bf00      	nop
 800cf4a:	e000      	b.n	800cf4e <USB_HC_StartXfer+0x4d2>
        break;
 800cf4c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	6999      	ldr	r1, [r3, #24]
 800cf52:	68bb      	ldr	r3, [r7, #8]
 800cf54:	785a      	ldrb	r2, [r3, #1]
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	6a1b      	ldr	r3, [r3, #32]
 800cf5a:	b29b      	uxth	r3, r3
 800cf5c:	2000      	movs	r0, #0
 800cf5e:	9000      	str	r0, [sp, #0]
 800cf60:	68f8      	ldr	r0, [r7, #12]
 800cf62:	f7ff facf 	bl	800c504 <USB_WritePacket>
  }

  return HAL_OK;
 800cf66:	2300      	movs	r3, #0
}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	3728      	adds	r7, #40	; 0x28
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}

0800cf70 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800cf70:	b480      	push	{r7}
 800cf72:	b085      	sub	sp, #20
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cf82:	695b      	ldr	r3, [r3, #20]
 800cf84:	b29b      	uxth	r3, r3
}
 800cf86:	4618      	mov	r0, r3
 800cf88:	3714      	adds	r7, #20
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf90:	4770      	bx	lr

0800cf92 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800cf92:	b480      	push	{r7}
 800cf94:	b089      	sub	sp, #36	; 0x24
 800cf96:	af00      	add	r7, sp, #0
 800cf98:	6078      	str	r0, [r7, #4]
 800cf9a:	460b      	mov	r3, r1
 800cf9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800cfa2:	78fb      	ldrb	r3, [r7, #3]
 800cfa4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800cfaa:	69bb      	ldr	r3, [r7, #24]
 800cfac:	015a      	lsls	r2, r3, #5
 800cfae:	69fb      	ldr	r3, [r7, #28]
 800cfb0:	4413      	add	r3, r2
 800cfb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	0c9b      	lsrs	r3, r3, #18
 800cfba:	f003 0303 	and.w	r3, r3, #3
 800cfbe:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800cfc0:	69bb      	ldr	r3, [r7, #24]
 800cfc2:	015a      	lsls	r2, r3, #5
 800cfc4:	69fb      	ldr	r3, [r7, #28]
 800cfc6:	4413      	add	r3, r2
 800cfc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	0fdb      	lsrs	r3, r3, #31
 800cfd0:	f003 0301 	and.w	r3, r3, #1
 800cfd4:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800cfd6:	69bb      	ldr	r3, [r7, #24]
 800cfd8:	015a      	lsls	r2, r3, #5
 800cfda:	69fb      	ldr	r3, [r7, #28]
 800cfdc:	4413      	add	r3, r2
 800cfde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cfe2:	685b      	ldr	r3, [r3, #4]
 800cfe4:	0fdb      	lsrs	r3, r3, #31
 800cfe6:	f003 0301 	and.w	r3, r3, #1
 800cfea:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	689b      	ldr	r3, [r3, #8]
 800cff0:	f003 0320 	and.w	r3, r3, #32
 800cff4:	2b20      	cmp	r3, #32
 800cff6:	d10d      	bne.n	800d014 <USB_HC_Halt+0x82>
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d10a      	bne.n	800d014 <USB_HC_Halt+0x82>
 800cffe:	693b      	ldr	r3, [r7, #16]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d005      	beq.n	800d010 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800d004:	697b      	ldr	r3, [r7, #20]
 800d006:	2b01      	cmp	r3, #1
 800d008:	d002      	beq.n	800d010 <USB_HC_Halt+0x7e>
 800d00a:	697b      	ldr	r3, [r7, #20]
 800d00c:	2b03      	cmp	r3, #3
 800d00e:	d101      	bne.n	800d014 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800d010:	2300      	movs	r3, #0
 800d012:	e0d8      	b.n	800d1c6 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800d014:	697b      	ldr	r3, [r7, #20]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d002      	beq.n	800d020 <USB_HC_Halt+0x8e>
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	2b02      	cmp	r3, #2
 800d01e:	d173      	bne.n	800d108 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d020:	69bb      	ldr	r3, [r7, #24]
 800d022:	015a      	lsls	r2, r3, #5
 800d024:	69fb      	ldr	r3, [r7, #28]
 800d026:	4413      	add	r3, r2
 800d028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	69ba      	ldr	r2, [r7, #24]
 800d030:	0151      	lsls	r1, r2, #5
 800d032:	69fa      	ldr	r2, [r7, #28]
 800d034:	440a      	add	r2, r1
 800d036:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d03a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d03e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	689b      	ldr	r3, [r3, #8]
 800d044:	f003 0320 	and.w	r3, r3, #32
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d14a      	bne.n	800d0e2 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d050:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d054:	2b00      	cmp	r3, #0
 800d056:	d133      	bne.n	800d0c0 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d058:	69bb      	ldr	r3, [r7, #24]
 800d05a:	015a      	lsls	r2, r3, #5
 800d05c:	69fb      	ldr	r3, [r7, #28]
 800d05e:	4413      	add	r3, r2
 800d060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	69ba      	ldr	r2, [r7, #24]
 800d068:	0151      	lsls	r1, r2, #5
 800d06a:	69fa      	ldr	r2, [r7, #28]
 800d06c:	440a      	add	r2, r1
 800d06e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d072:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d076:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d078:	69bb      	ldr	r3, [r7, #24]
 800d07a:	015a      	lsls	r2, r3, #5
 800d07c:	69fb      	ldr	r3, [r7, #28]
 800d07e:	4413      	add	r3, r2
 800d080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	69ba      	ldr	r2, [r7, #24]
 800d088:	0151      	lsls	r1, r2, #5
 800d08a:	69fa      	ldr	r2, [r7, #28]
 800d08c:	440a      	add	r2, r1
 800d08e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d092:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d096:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800d098:	68bb      	ldr	r3, [r7, #8]
 800d09a:	3301      	adds	r3, #1
 800d09c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d0a4:	d82e      	bhi.n	800d104 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d0a6:	69bb      	ldr	r3, [r7, #24]
 800d0a8:	015a      	lsls	r2, r3, #5
 800d0aa:	69fb      	ldr	r3, [r7, #28]
 800d0ac:	4413      	add	r3, r2
 800d0ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d0b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d0bc:	d0ec      	beq.n	800d098 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d0be:	e081      	b.n	800d1c4 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d0c0:	69bb      	ldr	r3, [r7, #24]
 800d0c2:	015a      	lsls	r2, r3, #5
 800d0c4:	69fb      	ldr	r3, [r7, #28]
 800d0c6:	4413      	add	r3, r2
 800d0c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	69ba      	ldr	r2, [r7, #24]
 800d0d0:	0151      	lsls	r1, r2, #5
 800d0d2:	69fa      	ldr	r2, [r7, #28]
 800d0d4:	440a      	add	r2, r1
 800d0d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d0da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d0de:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d0e0:	e070      	b.n	800d1c4 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d0e2:	69bb      	ldr	r3, [r7, #24]
 800d0e4:	015a      	lsls	r2, r3, #5
 800d0e6:	69fb      	ldr	r3, [r7, #28]
 800d0e8:	4413      	add	r3, r2
 800d0ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	69ba      	ldr	r2, [r7, #24]
 800d0f2:	0151      	lsls	r1, r2, #5
 800d0f4:	69fa      	ldr	r2, [r7, #28]
 800d0f6:	440a      	add	r2, r1
 800d0f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d0fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d100:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d102:	e05f      	b.n	800d1c4 <USB_HC_Halt+0x232>
            break;
 800d104:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d106:	e05d      	b.n	800d1c4 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d108:	69bb      	ldr	r3, [r7, #24]
 800d10a:	015a      	lsls	r2, r3, #5
 800d10c:	69fb      	ldr	r3, [r7, #28]
 800d10e:	4413      	add	r3, r2
 800d110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	69ba      	ldr	r2, [r7, #24]
 800d118:	0151      	lsls	r1, r2, #5
 800d11a:	69fa      	ldr	r2, [r7, #28]
 800d11c:	440a      	add	r2, r1
 800d11e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d122:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d126:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800d128:	69fb      	ldr	r3, [r7, #28]
 800d12a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d12e:	691b      	ldr	r3, [r3, #16]
 800d130:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d134:	2b00      	cmp	r3, #0
 800d136:	d133      	bne.n	800d1a0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d138:	69bb      	ldr	r3, [r7, #24]
 800d13a:	015a      	lsls	r2, r3, #5
 800d13c:	69fb      	ldr	r3, [r7, #28]
 800d13e:	4413      	add	r3, r2
 800d140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	69ba      	ldr	r2, [r7, #24]
 800d148:	0151      	lsls	r1, r2, #5
 800d14a:	69fa      	ldr	r2, [r7, #28]
 800d14c:	440a      	add	r2, r1
 800d14e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d152:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d156:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d158:	69bb      	ldr	r3, [r7, #24]
 800d15a:	015a      	lsls	r2, r3, #5
 800d15c:	69fb      	ldr	r3, [r7, #28]
 800d15e:	4413      	add	r3, r2
 800d160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	69ba      	ldr	r2, [r7, #24]
 800d168:	0151      	lsls	r1, r2, #5
 800d16a:	69fa      	ldr	r2, [r7, #28]
 800d16c:	440a      	add	r2, r1
 800d16e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d172:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d176:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	3301      	adds	r3, #1
 800d17c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d184:	d81d      	bhi.n	800d1c2 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d186:	69bb      	ldr	r3, [r7, #24]
 800d188:	015a      	lsls	r2, r3, #5
 800d18a:	69fb      	ldr	r3, [r7, #28]
 800d18c:	4413      	add	r3, r2
 800d18e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d198:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d19c:	d0ec      	beq.n	800d178 <USB_HC_Halt+0x1e6>
 800d19e:	e011      	b.n	800d1c4 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d1a0:	69bb      	ldr	r3, [r7, #24]
 800d1a2:	015a      	lsls	r2, r3, #5
 800d1a4:	69fb      	ldr	r3, [r7, #28]
 800d1a6:	4413      	add	r3, r2
 800d1a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	69ba      	ldr	r2, [r7, #24]
 800d1b0:	0151      	lsls	r1, r2, #5
 800d1b2:	69fa      	ldr	r2, [r7, #28]
 800d1b4:	440a      	add	r2, r1
 800d1b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d1ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d1be:	6013      	str	r3, [r2, #0]
 800d1c0:	e000      	b.n	800d1c4 <USB_HC_Halt+0x232>
          break;
 800d1c2:	bf00      	nop
    }
  }

  return HAL_OK;
 800d1c4:	2300      	movs	r3, #0
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3724      	adds	r7, #36	; 0x24
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d0:	4770      	bx	lr
	...

0800d1d4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	b087      	sub	sp, #28
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
 800d1dc:	460b      	mov	r3, r1
 800d1de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800d1e4:	78fb      	ldrb	r3, [r7, #3]
 800d1e6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	04da      	lsls	r2, r3, #19
 800d1f0:	4b15      	ldr	r3, [pc, #84]	; (800d248 <USB_DoPing+0x74>)
 800d1f2:	4013      	ands	r3, r2
 800d1f4:	693a      	ldr	r2, [r7, #16]
 800d1f6:	0151      	lsls	r1, r2, #5
 800d1f8:	697a      	ldr	r2, [r7, #20]
 800d1fa:	440a      	add	r2, r1
 800d1fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d200:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d204:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800d206:	693b      	ldr	r3, [r7, #16]
 800d208:	015a      	lsls	r2, r3, #5
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	4413      	add	r3, r2
 800d20e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d21c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d224:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800d226:	693b      	ldr	r3, [r7, #16]
 800d228:	015a      	lsls	r2, r3, #5
 800d22a:	697b      	ldr	r3, [r7, #20]
 800d22c:	4413      	add	r3, r2
 800d22e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d232:	461a      	mov	r2, r3
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800d238:	2300      	movs	r3, #0
}
 800d23a:	4618      	mov	r0, r3
 800d23c:	371c      	adds	r7, #28
 800d23e:	46bd      	mov	sp, r7
 800d240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d244:	4770      	bx	lr
 800d246:	bf00      	nop
 800d248:	1ff80000 	.word	0x1ff80000

0800d24c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b088      	sub	sp, #32
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800d254:	2300      	movs	r3, #0
 800d256:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800d25c:	2300      	movs	r3, #0
 800d25e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f7ff f8de 	bl	800c422 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d266:	2110      	movs	r1, #16
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f7ff f8eb 	bl	800c444 <USB_FlushTxFifo>
 800d26e:	4603      	mov	r3, r0
 800d270:	2b00      	cmp	r3, #0
 800d272:	d001      	beq.n	800d278 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800d274:	2301      	movs	r3, #1
 800d276:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f7ff f915 	bl	800c4a8 <USB_FlushRxFifo>
 800d27e:	4603      	mov	r3, r0
 800d280:	2b00      	cmp	r3, #0
 800d282:	d001      	beq.n	800d288 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800d284:	2301      	movs	r3, #1
 800d286:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800d288:	2300      	movs	r3, #0
 800d28a:	61bb      	str	r3, [r7, #24]
 800d28c:	e01f      	b.n	800d2ce <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800d28e:	69bb      	ldr	r3, [r7, #24]
 800d290:	015a      	lsls	r2, r3, #5
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	4413      	add	r3, r2
 800d296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800d29e:	693b      	ldr	r3, [r7, #16]
 800d2a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d2a4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800d2a6:	693b      	ldr	r3, [r7, #16]
 800d2a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d2ac:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d2ae:	693b      	ldr	r3, [r7, #16]
 800d2b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d2b4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800d2b6:	69bb      	ldr	r3, [r7, #24]
 800d2b8:	015a      	lsls	r2, r3, #5
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	4413      	add	r3, r2
 800d2be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2c2:	461a      	mov	r2, r3
 800d2c4:	693b      	ldr	r3, [r7, #16]
 800d2c6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800d2c8:	69bb      	ldr	r3, [r7, #24]
 800d2ca:	3301      	adds	r3, #1
 800d2cc:	61bb      	str	r3, [r7, #24]
 800d2ce:	69bb      	ldr	r3, [r7, #24]
 800d2d0:	2b0f      	cmp	r3, #15
 800d2d2:	d9dc      	bls.n	800d28e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	61bb      	str	r3, [r7, #24]
 800d2d8:	e034      	b.n	800d344 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800d2da:	69bb      	ldr	r3, [r7, #24]
 800d2dc:	015a      	lsls	r2, r3, #5
 800d2de:	697b      	ldr	r3, [r7, #20]
 800d2e0:	4413      	add	r3, r2
 800d2e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d2f0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800d2f2:	693b      	ldr	r3, [r7, #16]
 800d2f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d2f8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d2fa:	693b      	ldr	r3, [r7, #16]
 800d2fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d300:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800d302:	69bb      	ldr	r3, [r7, #24]
 800d304:	015a      	lsls	r2, r3, #5
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	4413      	add	r3, r2
 800d30a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d30e:	461a      	mov	r2, r3
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	3301      	adds	r3, #1
 800d318:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d320:	d80c      	bhi.n	800d33c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d322:	69bb      	ldr	r3, [r7, #24]
 800d324:	015a      	lsls	r2, r3, #5
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	4413      	add	r3, r2
 800d32a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d334:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d338:	d0ec      	beq.n	800d314 <USB_StopHost+0xc8>
 800d33a:	e000      	b.n	800d33e <USB_StopHost+0xf2>
        break;
 800d33c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800d33e:	69bb      	ldr	r3, [r7, #24]
 800d340:	3301      	adds	r3, #1
 800d342:	61bb      	str	r3, [r7, #24]
 800d344:	69bb      	ldr	r3, [r7, #24]
 800d346:	2b0f      	cmp	r3, #15
 800d348:	d9c7      	bls.n	800d2da <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d350:	461a      	mov	r2, r3
 800d352:	f04f 33ff 	mov.w	r3, #4294967295
 800d356:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f04f 32ff 	mov.w	r2, #4294967295
 800d35e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800d360:	6878      	ldr	r0, [r7, #4]
 800d362:	f7ff f84d 	bl	800c400 <USB_EnableGlobalInt>

  return ret;
 800d366:	7ffb      	ldrb	r3, [r7, #31]
}
 800d368:	4618      	mov	r0, r3
 800d36a:	3720      	adds	r7, #32
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}

0800d370 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b084      	sub	sp, #16
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800d378:	2300      	movs	r3, #0
 800d37a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d37c:	2300      	movs	r3, #0
 800d37e:	60fb      	str	r3, [r7, #12]
 800d380:	e009      	b.n	800d396 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800d382:	687a      	ldr	r2, [r7, #4]
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	33e0      	adds	r3, #224	; 0xe0
 800d388:	009b      	lsls	r3, r3, #2
 800d38a:	4413      	add	r3, r2
 800d38c:	2200      	movs	r2, #0
 800d38e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	3301      	adds	r3, #1
 800d394:	60fb      	str	r3, [r7, #12]
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	2b0f      	cmp	r3, #15
 800d39a:	d9f2      	bls.n	800d382 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d39c:	2300      	movs	r3, #0
 800d39e:	60fb      	str	r3, [r7, #12]
 800d3a0:	e009      	b.n	800d3b6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800d3a2:	687a      	ldr	r2, [r7, #4]
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	4413      	add	r3, r2
 800d3a8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	3301      	adds	r3, #1
 800d3b4:	60fb      	str	r3, [r7, #12]
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d3bc:	d3f1      	bcc.n	800d3a2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2201      	movs	r2, #1
 800d3ce:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2201      	movs	r2, #1
 800d3dc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2240      	movs	r2, #64	; 0x40
 800d3e2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2201      	movs	r2, #1
 800d3f6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2200      	movs	r2, #0
 800d406:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	331c      	adds	r3, #28
 800d40e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d412:	2100      	movs	r1, #0
 800d414:	4618      	mov	r0, r3
 800d416:	f002 f84b 	bl	800f4b0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d420:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d424:	2100      	movs	r1, #0
 800d426:	4618      	mov	r0, r3
 800d428:	f002 f842 	bl	800f4b0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f203 3326 	addw	r3, r3, #806	; 0x326
 800d432:	2212      	movs	r2, #18
 800d434:	2100      	movs	r1, #0
 800d436:	4618      	mov	r0, r3
 800d438:	f002 f83a 	bl	800f4b0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d442:	223e      	movs	r2, #62	; 0x3e
 800d444:	2100      	movs	r1, #0
 800d446:	4618      	mov	r0, r3
 800d448:	f002 f832 	bl	800f4b0 <memset>

  return USBH_OK;
 800d44c:	2300      	movs	r3, #0
}
 800d44e:	4618      	mov	r0, r3
 800d450:	3710      	adds	r7, #16
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}

0800d456 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800d456:	b580      	push	{r7, lr}
 800d458:	b082      	sub	sp, #8
 800d45a:	af00      	add	r7, sp, #0
 800d45c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	f001 fb8e 	bl	800eb80 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800d464:	2101      	movs	r1, #1
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f001 fc75 	bl	800ed56 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800d46c:	2300      	movs	r3, #0
}
 800d46e:	4618      	mov	r0, r3
 800d470:	3708      	adds	r7, #8
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}
	...

0800d478 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b088      	sub	sp, #32
 800d47c:	af04      	add	r7, sp, #16
 800d47e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800d480:	2302      	movs	r3, #2
 800d482:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800d484:	2300      	movs	r3, #0
 800d486:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800d48e:	b2db      	uxtb	r3, r3
 800d490:	2b01      	cmp	r3, #1
 800d492:	d102      	bne.n	800d49a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2203      	movs	r2, #3
 800d498:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	781b      	ldrb	r3, [r3, #0]
 800d49e:	b2db      	uxtb	r3, r3
 800d4a0:	2b0b      	cmp	r3, #11
 800d4a2:	f200 81be 	bhi.w	800d822 <USBH_Process+0x3aa>
 800d4a6:	a201      	add	r2, pc, #4	; (adr r2, 800d4ac <USBH_Process+0x34>)
 800d4a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4ac:	0800d4dd 	.word	0x0800d4dd
 800d4b0:	0800d50f 	.word	0x0800d50f
 800d4b4:	0800d577 	.word	0x0800d577
 800d4b8:	0800d7bd 	.word	0x0800d7bd
 800d4bc:	0800d823 	.word	0x0800d823
 800d4c0:	0800d61b 	.word	0x0800d61b
 800d4c4:	0800d763 	.word	0x0800d763
 800d4c8:	0800d651 	.word	0x0800d651
 800d4cc:	0800d671 	.word	0x0800d671
 800d4d0:	0800d691 	.word	0x0800d691
 800d4d4:	0800d6d5 	.word	0x0800d6d5
 800d4d8:	0800d7a5 	.word	0x0800d7a5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800d4e2:	b2db      	uxtb	r3, r3
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	f000 819e 	beq.w	800d826 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	2201      	movs	r2, #1
 800d4ee:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800d4f0:	20c8      	movs	r0, #200	; 0xc8
 800d4f2:	f001 fc47 	bl	800ed84 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f001 fb9f 	bl	800ec3a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2200      	movs	r2, #0
 800d500:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2200      	movs	r2, #0
 800d508:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d50c:	e18b      	b.n	800d826 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800d514:	2b01      	cmp	r3, #1
 800d516:	d107      	bne.n	800d528 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2200      	movs	r2, #0
 800d51c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2202      	movs	r2, #2
 800d524:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d526:	e18d      	b.n	800d844 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d52e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d532:	d914      	bls.n	800d55e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d53a:	3301      	adds	r3, #1
 800d53c:	b2da      	uxtb	r2, r3
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d54a:	2b03      	cmp	r3, #3
 800d54c:	d903      	bls.n	800d556 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	220d      	movs	r2, #13
 800d552:	701a      	strb	r2, [r3, #0]
      break;
 800d554:	e176      	b.n	800d844 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2200      	movs	r2, #0
 800d55a:	701a      	strb	r2, [r3, #0]
      break;
 800d55c:	e172      	b.n	800d844 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d564:	f103 020a 	add.w	r2, r3, #10
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800d56e:	200a      	movs	r0, #10
 800d570:	f001 fc08 	bl	800ed84 <USBH_Delay>
      break;
 800d574:	e166      	b.n	800d844 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d005      	beq.n	800d58c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d586:	2104      	movs	r1, #4
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800d58c:	2064      	movs	r0, #100	; 0x64
 800d58e:	f001 fbf9 	bl	800ed84 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f001 fb2a 	bl	800ebec <USBH_LL_GetSpeed>
 800d598:	4603      	mov	r3, r0
 800d59a:	461a      	mov	r2, r3
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	2205      	movs	r2, #5
 800d5a6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800d5a8:	2100      	movs	r1, #0
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f001 fa26 	bl	800e9fc <USBH_AllocPipe>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800d5b8:	2180      	movs	r1, #128	; 0x80
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f001 fa1e 	bl	800e9fc <USBH_AllocPipe>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	461a      	mov	r2, r3
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	7919      	ldrb	r1, [r3, #4]
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d5d8:	687a      	ldr	r2, [r7, #4]
 800d5da:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d5dc:	b292      	uxth	r2, r2
 800d5de:	9202      	str	r2, [sp, #8]
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	9201      	str	r2, [sp, #4]
 800d5e4:	9300      	str	r3, [sp, #0]
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	2280      	movs	r2, #128	; 0x80
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f001 f9e7 	bl	800e9be <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	7959      	ldrb	r1, [r3, #5]
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d600:	687a      	ldr	r2, [r7, #4]
 800d602:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d604:	b292      	uxth	r2, r2
 800d606:	9202      	str	r2, [sp, #8]
 800d608:	2200      	movs	r2, #0
 800d60a:	9201      	str	r2, [sp, #4]
 800d60c:	9300      	str	r3, [sp, #0]
 800d60e:	4603      	mov	r3, r0
 800d610:	2200      	movs	r2, #0
 800d612:	6878      	ldr	r0, [r7, #4]
 800d614:	f001 f9d3 	bl	800e9be <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d618:	e114      	b.n	800d844 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f000 f918 	bl	800d850 <USBH_HandleEnum>
 800d620:	4603      	mov	r3, r0
 800d622:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800d624:	7bbb      	ldrb	r3, [r7, #14]
 800d626:	b2db      	uxtb	r3, r3
 800d628:	2b00      	cmp	r3, #0
 800d62a:	f040 80fe 	bne.w	800d82a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2200      	movs	r2, #0
 800d632:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800d63c:	2b01      	cmp	r3, #1
 800d63e:	d103      	bne.n	800d648 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2208      	movs	r2, #8
 800d644:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d646:	e0f0      	b.n	800d82a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2207      	movs	r2, #7
 800d64c:	701a      	strb	r2, [r3, #0]
      break;
 800d64e:	e0ec      	b.n	800d82a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d656:	2b00      	cmp	r3, #0
 800d658:	f000 80e9 	beq.w	800d82e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d662:	2101      	movs	r1, #1
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2208      	movs	r2, #8
 800d66c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800d66e:	e0de      	b.n	800d82e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800d676:	b29b      	uxth	r3, r3
 800d678:	4619      	mov	r1, r3
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f000 fc30 	bl	800dee0 <USBH_SetCfg>
 800d680:	4603      	mov	r3, r0
 800d682:	2b00      	cmp	r3, #0
 800d684:	f040 80d5 	bne.w	800d832 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2209      	movs	r2, #9
 800d68c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d68e:	e0d0      	b.n	800d832 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800d696:	f003 0320 	and.w	r3, r3, #32
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d016      	beq.n	800d6cc <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800d69e:	2101      	movs	r1, #1
 800d6a0:	6878      	ldr	r0, [r7, #4]
 800d6a2:	f000 fc40 	bl	800df26 <USBH_SetFeature>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d6aa:	7bbb      	ldrb	r3, [r7, #14]
 800d6ac:	b2db      	uxtb	r3, r3
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d103      	bne.n	800d6ba <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	220a      	movs	r2, #10
 800d6b6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d6b8:	e0bd      	b.n	800d836 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800d6ba:	7bbb      	ldrb	r3, [r7, #14]
 800d6bc:	b2db      	uxtb	r3, r3
 800d6be:	2b03      	cmp	r3, #3
 800d6c0:	f040 80b9 	bne.w	800d836 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	220a      	movs	r2, #10
 800d6c8:	701a      	strb	r2, [r3, #0]
      break;
 800d6ca:	e0b4      	b.n	800d836 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	220a      	movs	r2, #10
 800d6d0:	701a      	strb	r2, [r3, #0]
      break;
 800d6d2:	e0b0      	b.n	800d836 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	f000 80ad 	beq.w	800d83a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	73fb      	strb	r3, [r7, #15]
 800d6ec:	e016      	b.n	800d71c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800d6ee:	7bfa      	ldrb	r2, [r7, #15]
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	32de      	adds	r2, #222	; 0xde
 800d6f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6f8:	791a      	ldrb	r2, [r3, #4]
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800d700:	429a      	cmp	r2, r3
 800d702:	d108      	bne.n	800d716 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800d704:	7bfa      	ldrb	r2, [r7, #15]
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	32de      	adds	r2, #222	; 0xde
 800d70a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800d714:	e005      	b.n	800d722 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d716:	7bfb      	ldrb	r3, [r7, #15]
 800d718:	3301      	adds	r3, #1
 800d71a:	73fb      	strb	r3, [r7, #15]
 800d71c:	7bfb      	ldrb	r3, [r7, #15]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d0e5      	beq.n	800d6ee <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d016      	beq.n	800d75a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d732:	689b      	ldr	r3, [r3, #8]
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	4798      	blx	r3
 800d738:	4603      	mov	r3, r0
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d109      	bne.n	800d752 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2206      	movs	r2, #6
 800d742:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d74a:	2103      	movs	r1, #3
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d750:	e073      	b.n	800d83a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	220d      	movs	r2, #13
 800d756:	701a      	strb	r2, [r3, #0]
      break;
 800d758:	e06f      	b.n	800d83a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	220d      	movs	r2, #13
 800d75e:	701a      	strb	r2, [r3, #0]
      break;
 800d760:	e06b      	b.n	800d83a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d017      	beq.n	800d79c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d772:	691b      	ldr	r3, [r3, #16]
 800d774:	6878      	ldr	r0, [r7, #4]
 800d776:	4798      	blx	r3
 800d778:	4603      	mov	r3, r0
 800d77a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d77c:	7bbb      	ldrb	r3, [r7, #14]
 800d77e:	b2db      	uxtb	r3, r3
 800d780:	2b00      	cmp	r3, #0
 800d782:	d103      	bne.n	800d78c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	220b      	movs	r2, #11
 800d788:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d78a:	e058      	b.n	800d83e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800d78c:	7bbb      	ldrb	r3, [r7, #14]
 800d78e:	b2db      	uxtb	r3, r3
 800d790:	2b02      	cmp	r3, #2
 800d792:	d154      	bne.n	800d83e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	220d      	movs	r2, #13
 800d798:	701a      	strb	r2, [r3, #0]
      break;
 800d79a:	e050      	b.n	800d83e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	220d      	movs	r2, #13
 800d7a0:	701a      	strb	r2, [r3, #0]
      break;
 800d7a2:	e04c      	b.n	800d83e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d049      	beq.n	800d842 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d7b4:	695b      	ldr	r3, [r3, #20]
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	4798      	blx	r3
      }
      break;
 800d7ba:	e042      	b.n	800d842 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2200      	movs	r2, #0
 800d7c0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f7ff fdd3 	bl	800d370 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d009      	beq.n	800d7e8 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d7da:	68db      	ldr	r3, [r3, #12]
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d005      	beq.n	800d7fe <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d7f8:	2105      	movs	r1, #5
 800d7fa:	6878      	ldr	r0, [r7, #4]
 800d7fc:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800d804:	b2db      	uxtb	r3, r3
 800d806:	2b01      	cmp	r3, #1
 800d808:	d107      	bne.n	800d81a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2200      	movs	r2, #0
 800d80e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f7ff fe1f 	bl	800d456 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d818:	e014      	b.n	800d844 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	f001 f9b0 	bl	800eb80 <USBH_LL_Start>
      break;
 800d820:	e010      	b.n	800d844 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800d822:	bf00      	nop
 800d824:	e00e      	b.n	800d844 <USBH_Process+0x3cc>
      break;
 800d826:	bf00      	nop
 800d828:	e00c      	b.n	800d844 <USBH_Process+0x3cc>
      break;
 800d82a:	bf00      	nop
 800d82c:	e00a      	b.n	800d844 <USBH_Process+0x3cc>
    break;
 800d82e:	bf00      	nop
 800d830:	e008      	b.n	800d844 <USBH_Process+0x3cc>
      break;
 800d832:	bf00      	nop
 800d834:	e006      	b.n	800d844 <USBH_Process+0x3cc>
      break;
 800d836:	bf00      	nop
 800d838:	e004      	b.n	800d844 <USBH_Process+0x3cc>
      break;
 800d83a:	bf00      	nop
 800d83c:	e002      	b.n	800d844 <USBH_Process+0x3cc>
      break;
 800d83e:	bf00      	nop
 800d840:	e000      	b.n	800d844 <USBH_Process+0x3cc>
      break;
 800d842:	bf00      	nop
  }
  return USBH_OK;
 800d844:	2300      	movs	r3, #0
}
 800d846:	4618      	mov	r0, r3
 800d848:	3710      	adds	r7, #16
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bd80      	pop	{r7, pc}
 800d84e:	bf00      	nop

0800d850 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b088      	sub	sp, #32
 800d854:	af04      	add	r7, sp, #16
 800d856:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d858:	2301      	movs	r3, #1
 800d85a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800d85c:	2301      	movs	r3, #1
 800d85e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	785b      	ldrb	r3, [r3, #1]
 800d864:	2b07      	cmp	r3, #7
 800d866:	f200 81c1 	bhi.w	800dbec <USBH_HandleEnum+0x39c>
 800d86a:	a201      	add	r2, pc, #4	; (adr r2, 800d870 <USBH_HandleEnum+0x20>)
 800d86c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d870:	0800d891 	.word	0x0800d891
 800d874:	0800d94f 	.word	0x0800d94f
 800d878:	0800d9b9 	.word	0x0800d9b9
 800d87c:	0800da47 	.word	0x0800da47
 800d880:	0800dab1 	.word	0x0800dab1
 800d884:	0800db21 	.word	0x0800db21
 800d888:	0800db67 	.word	0x0800db67
 800d88c:	0800dbad 	.word	0x0800dbad
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800d890:	2108      	movs	r1, #8
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f000 fa41 	bl	800dd1a <USBH_Get_DevDesc>
 800d898:	4603      	mov	r3, r0
 800d89a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d89c:	7bbb      	ldrb	r3, [r7, #14]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d130      	bne.n	800d904 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2201      	movs	r2, #1
 800d8b0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	7919      	ldrb	r1, [r3, #4]
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d8c2:	687a      	ldr	r2, [r7, #4]
 800d8c4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d8c6:	b292      	uxth	r2, r2
 800d8c8:	9202      	str	r2, [sp, #8]
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	9201      	str	r2, [sp, #4]
 800d8ce:	9300      	str	r3, [sp, #0]
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	2280      	movs	r2, #128	; 0x80
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	f001 f872 	bl	800e9be <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	7959      	ldrb	r1, [r3, #5]
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d8ea:	687a      	ldr	r2, [r7, #4]
 800d8ec:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d8ee:	b292      	uxth	r2, r2
 800d8f0:	9202      	str	r2, [sp, #8]
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	9201      	str	r2, [sp, #4]
 800d8f6:	9300      	str	r3, [sp, #0]
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	6878      	ldr	r0, [r7, #4]
 800d8fe:	f001 f85e 	bl	800e9be <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d902:	e175      	b.n	800dbf0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d904:	7bbb      	ldrb	r3, [r7, #14]
 800d906:	2b03      	cmp	r3, #3
 800d908:	f040 8172 	bne.w	800dbf0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d912:	3301      	adds	r3, #1
 800d914:	b2da      	uxtb	r2, r3
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d922:	2b03      	cmp	r3, #3
 800d924:	d903      	bls.n	800d92e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	220d      	movs	r2, #13
 800d92a:	701a      	strb	r2, [r3, #0]
      break;
 800d92c:	e160      	b.n	800dbf0 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	795b      	ldrb	r3, [r3, #5]
 800d932:	4619      	mov	r1, r3
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f001 f882 	bl	800ea3e <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	791b      	ldrb	r3, [r3, #4]
 800d93e:	4619      	mov	r1, r3
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	f001 f87c 	bl	800ea3e <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2200      	movs	r2, #0
 800d94a:	701a      	strb	r2, [r3, #0]
      break;
 800d94c:	e150      	b.n	800dbf0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800d94e:	2112      	movs	r1, #18
 800d950:	6878      	ldr	r0, [r7, #4]
 800d952:	f000 f9e2 	bl	800dd1a <USBH_Get_DevDesc>
 800d956:	4603      	mov	r3, r0
 800d958:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d95a:	7bbb      	ldrb	r3, [r7, #14]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d103      	bne.n	800d968 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2202      	movs	r2, #2
 800d964:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d966:	e145      	b.n	800dbf4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d968:	7bbb      	ldrb	r3, [r7, #14]
 800d96a:	2b03      	cmp	r3, #3
 800d96c:	f040 8142 	bne.w	800dbf4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d976:	3301      	adds	r3, #1
 800d978:	b2da      	uxtb	r2, r3
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d986:	2b03      	cmp	r3, #3
 800d988:	d903      	bls.n	800d992 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	220d      	movs	r2, #13
 800d98e:	701a      	strb	r2, [r3, #0]
      break;
 800d990:	e130      	b.n	800dbf4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	795b      	ldrb	r3, [r3, #5]
 800d996:	4619      	mov	r1, r3
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f001 f850 	bl	800ea3e <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	791b      	ldrb	r3, [r3, #4]
 800d9a2:	4619      	mov	r1, r3
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	f001 f84a 	bl	800ea3e <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	701a      	strb	r2, [r3, #0]
      break;
 800d9b6:	e11d      	b.n	800dbf4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800d9b8:	2101      	movs	r1, #1
 800d9ba:	6878      	ldr	r0, [r7, #4]
 800d9bc:	f000 fa6c 	bl	800de98 <USBH_SetAddress>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d9c4:	7bbb      	ldrb	r3, [r7, #14]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d132      	bne.n	800da30 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800d9ca:	2002      	movs	r0, #2
 800d9cc:	f001 f9da 	bl	800ed84 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2201      	movs	r2, #1
 800d9d4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2203      	movs	r2, #3
 800d9dc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	7919      	ldrb	r1, [r3, #4]
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d9ee:	687a      	ldr	r2, [r7, #4]
 800d9f0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d9f2:	b292      	uxth	r2, r2
 800d9f4:	9202      	str	r2, [sp, #8]
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	9201      	str	r2, [sp, #4]
 800d9fa:	9300      	str	r3, [sp, #0]
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	2280      	movs	r2, #128	; 0x80
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f000 ffdc 	bl	800e9be <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	7959      	ldrb	r1, [r3, #5]
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800da16:	687a      	ldr	r2, [r7, #4]
 800da18:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800da1a:	b292      	uxth	r2, r2
 800da1c:	9202      	str	r2, [sp, #8]
 800da1e:	2200      	movs	r2, #0
 800da20:	9201      	str	r2, [sp, #4]
 800da22:	9300      	str	r3, [sp, #0]
 800da24:	4603      	mov	r3, r0
 800da26:	2200      	movs	r2, #0
 800da28:	6878      	ldr	r0, [r7, #4]
 800da2a:	f000 ffc8 	bl	800e9be <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800da2e:	e0e3      	b.n	800dbf8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800da30:	7bbb      	ldrb	r3, [r7, #14]
 800da32:	2b03      	cmp	r3, #3
 800da34:	f040 80e0 	bne.w	800dbf8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	220d      	movs	r2, #13
 800da3c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2200      	movs	r2, #0
 800da42:	705a      	strb	r2, [r3, #1]
      break;
 800da44:	e0d8      	b.n	800dbf8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800da46:	2109      	movs	r1, #9
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f000 f992 	bl	800dd72 <USBH_Get_CfgDesc>
 800da4e:	4603      	mov	r3, r0
 800da50:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800da52:	7bbb      	ldrb	r3, [r7, #14]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d103      	bne.n	800da60 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2204      	movs	r2, #4
 800da5c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800da5e:	e0cd      	b.n	800dbfc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800da60:	7bbb      	ldrb	r3, [r7, #14]
 800da62:	2b03      	cmp	r3, #3
 800da64:	f040 80ca 	bne.w	800dbfc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800da6e:	3301      	adds	r3, #1
 800da70:	b2da      	uxtb	r2, r3
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800da7e:	2b03      	cmp	r3, #3
 800da80:	d903      	bls.n	800da8a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	220d      	movs	r2, #13
 800da86:	701a      	strb	r2, [r3, #0]
      break;
 800da88:	e0b8      	b.n	800dbfc <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	795b      	ldrb	r3, [r3, #5]
 800da8e:	4619      	mov	r1, r3
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f000 ffd4 	bl	800ea3e <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	791b      	ldrb	r3, [r3, #4]
 800da9a:	4619      	mov	r1, r3
 800da9c:	6878      	ldr	r0, [r7, #4]
 800da9e:	f000 ffce 	bl	800ea3e <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2200      	movs	r2, #0
 800daa6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2200      	movs	r2, #0
 800daac:	701a      	strb	r2, [r3, #0]
      break;
 800daae:	e0a5      	b.n	800dbfc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800dab6:	4619      	mov	r1, r3
 800dab8:	6878      	ldr	r0, [r7, #4]
 800daba:	f000 f95a 	bl	800dd72 <USBH_Get_CfgDesc>
 800dabe:	4603      	mov	r3, r0
 800dac0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800dac2:	7bbb      	ldrb	r3, [r7, #14]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d103      	bne.n	800dad0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2205      	movs	r2, #5
 800dacc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800dace:	e097      	b.n	800dc00 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dad0:	7bbb      	ldrb	r3, [r7, #14]
 800dad2:	2b03      	cmp	r3, #3
 800dad4:	f040 8094 	bne.w	800dc00 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800dade:	3301      	adds	r3, #1
 800dae0:	b2da      	uxtb	r2, r3
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800daee:	2b03      	cmp	r3, #3
 800daf0:	d903      	bls.n	800dafa <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	220d      	movs	r2, #13
 800daf6:	701a      	strb	r2, [r3, #0]
      break;
 800daf8:	e082      	b.n	800dc00 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	795b      	ldrb	r3, [r3, #5]
 800dafe:	4619      	mov	r1, r3
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f000 ff9c 	bl	800ea3e <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	791b      	ldrb	r3, [r3, #4]
 800db0a:	4619      	mov	r1, r3
 800db0c:	6878      	ldr	r0, [r7, #4]
 800db0e:	f000 ff96 	bl	800ea3e <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2200      	movs	r2, #0
 800db16:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2200      	movs	r2, #0
 800db1c:	701a      	strb	r2, [r3, #0]
      break;
 800db1e:	e06f      	b.n	800dc00 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800db26:	2b00      	cmp	r3, #0
 800db28:	d019      	beq.n	800db5e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800db36:	23ff      	movs	r3, #255	; 0xff
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f000 f944 	bl	800ddc6 <USBH_Get_StringDesc>
 800db3e:	4603      	mov	r3, r0
 800db40:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800db42:	7bbb      	ldrb	r3, [r7, #14]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d103      	bne.n	800db50 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2206      	movs	r2, #6
 800db4c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800db4e:	e059      	b.n	800dc04 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800db50:	7bbb      	ldrb	r3, [r7, #14]
 800db52:	2b03      	cmp	r3, #3
 800db54:	d156      	bne.n	800dc04 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	2206      	movs	r2, #6
 800db5a:	705a      	strb	r2, [r3, #1]
      break;
 800db5c:	e052      	b.n	800dc04 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2206      	movs	r2, #6
 800db62:	705a      	strb	r2, [r3, #1]
      break;
 800db64:	e04e      	b.n	800dc04 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d019      	beq.n	800dba4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800db7c:	23ff      	movs	r3, #255	; 0xff
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f000 f921 	bl	800ddc6 <USBH_Get_StringDesc>
 800db84:	4603      	mov	r3, r0
 800db86:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800db88:	7bbb      	ldrb	r3, [r7, #14]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d103      	bne.n	800db96 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	2207      	movs	r2, #7
 800db92:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800db94:	e038      	b.n	800dc08 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800db96:	7bbb      	ldrb	r3, [r7, #14]
 800db98:	2b03      	cmp	r3, #3
 800db9a:	d135      	bne.n	800dc08 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2207      	movs	r2, #7
 800dba0:	705a      	strb	r2, [r3, #1]
      break;
 800dba2:	e031      	b.n	800dc08 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2207      	movs	r2, #7
 800dba8:	705a      	strb	r2, [r3, #1]
      break;
 800dbaa:	e02d      	b.n	800dc08 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d017      	beq.n	800dbe6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800dbc2:	23ff      	movs	r3, #255	; 0xff
 800dbc4:	6878      	ldr	r0, [r7, #4]
 800dbc6:	f000 f8fe 	bl	800ddc6 <USBH_Get_StringDesc>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800dbce:	7bbb      	ldrb	r3, [r7, #14]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d102      	bne.n	800dbda <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800dbd8:	e018      	b.n	800dc0c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dbda:	7bbb      	ldrb	r3, [r7, #14]
 800dbdc:	2b03      	cmp	r3, #3
 800dbde:	d115      	bne.n	800dc0c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	73fb      	strb	r3, [r7, #15]
      break;
 800dbe4:	e012      	b.n	800dc0c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	73fb      	strb	r3, [r7, #15]
      break;
 800dbea:	e00f      	b.n	800dc0c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800dbec:	bf00      	nop
 800dbee:	e00e      	b.n	800dc0e <USBH_HandleEnum+0x3be>
      break;
 800dbf0:	bf00      	nop
 800dbf2:	e00c      	b.n	800dc0e <USBH_HandleEnum+0x3be>
      break;
 800dbf4:	bf00      	nop
 800dbf6:	e00a      	b.n	800dc0e <USBH_HandleEnum+0x3be>
      break;
 800dbf8:	bf00      	nop
 800dbfa:	e008      	b.n	800dc0e <USBH_HandleEnum+0x3be>
      break;
 800dbfc:	bf00      	nop
 800dbfe:	e006      	b.n	800dc0e <USBH_HandleEnum+0x3be>
      break;
 800dc00:	bf00      	nop
 800dc02:	e004      	b.n	800dc0e <USBH_HandleEnum+0x3be>
      break;
 800dc04:	bf00      	nop
 800dc06:	e002      	b.n	800dc0e <USBH_HandleEnum+0x3be>
      break;
 800dc08:	bf00      	nop
 800dc0a:	e000      	b.n	800dc0e <USBH_HandleEnum+0x3be>
      break;
 800dc0c:	bf00      	nop
  }
  return Status;
 800dc0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc10:	4618      	mov	r0, r3
 800dc12:	3710      	adds	r7, #16
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}

0800dc18 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b082      	sub	sp, #8
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800dc26:	1c5a      	adds	r2, r3, #1
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f000 f804 	bl	800dc3c <USBH_HandleSof>
}
 800dc34:	bf00      	nop
 800dc36:	3708      	adds	r7, #8
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}

0800dc3c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b082      	sub	sp, #8
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	781b      	ldrb	r3, [r3, #0]
 800dc48:	b2db      	uxtb	r3, r3
 800dc4a:	2b0b      	cmp	r3, #11
 800dc4c:	d10a      	bne.n	800dc64 <USBH_HandleSof+0x28>
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d005      	beq.n	800dc64 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dc5e:	699b      	ldr	r3, [r3, #24]
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	4798      	blx	r3
  }
}
 800dc64:	bf00      	nop
 800dc66:	3708      	adds	r7, #8
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bd80      	pop	{r7, pc}

0800dc6c <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800dc6c:	b480      	push	{r7}
 800dc6e:	b083      	sub	sp, #12
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2201      	movs	r2, #1
 800dc78:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800dc7c:	bf00      	nop
}
 800dc7e:	370c      	adds	r7, #12
 800dc80:	46bd      	mov	sp, r7
 800dc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc86:	4770      	bx	lr

0800dc88 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800dc88:	b480      	push	{r7}
 800dc8a:	b083      	sub	sp, #12
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2200      	movs	r2, #0
 800dc94:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800dc98:	bf00      	nop
}
 800dc9a:	370c      	adds	r7, #12
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca2:	4770      	bx	lr

0800dca4 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800dca4:	b480      	push	{r7}
 800dca6:	b083      	sub	sp, #12
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2201      	movs	r2, #1
 800dcb0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800dcc4:	2300      	movs	r3, #0
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	370c      	adds	r7, #12
 800dcca:	46bd      	mov	sp, r7
 800dccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd0:	4770      	bx	lr

0800dcd2 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800dcd2:	b580      	push	{r7, lr}
 800dcd4:	b082      	sub	sp, #8
 800dcd6:	af00      	add	r7, sp, #0
 800dcd8:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2201      	movs	r2, #1
 800dcde:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2200      	movs	r2, #0
 800dce6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2200      	movs	r2, #0
 800dcee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800dcf2:	6878      	ldr	r0, [r7, #4]
 800dcf4:	f000 ff5f 	bl	800ebb6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	791b      	ldrb	r3, [r3, #4]
 800dcfc:	4619      	mov	r1, r3
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f000 fe9d 	bl	800ea3e <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	795b      	ldrb	r3, [r3, #5]
 800dd08:	4619      	mov	r1, r3
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f000 fe97 	bl	800ea3e <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800dd10:	2300      	movs	r3, #0
}
 800dd12:	4618      	mov	r0, r3
 800dd14:	3708      	adds	r7, #8
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd80      	pop	{r7, pc}

0800dd1a <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800dd1a:	b580      	push	{r7, lr}
 800dd1c:	b086      	sub	sp, #24
 800dd1e:	af02      	add	r7, sp, #8
 800dd20:	6078      	str	r0, [r7, #4]
 800dd22:	460b      	mov	r3, r1
 800dd24:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800dd26:	887b      	ldrh	r3, [r7, #2]
 800dd28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd2c:	d901      	bls.n	800dd32 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800dd2e:	2303      	movs	r3, #3
 800dd30:	e01b      	b.n	800dd6a <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800dd38:	887b      	ldrh	r3, [r7, #2]
 800dd3a:	9300      	str	r3, [sp, #0]
 800dd3c:	4613      	mov	r3, r2
 800dd3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dd42:	2100      	movs	r1, #0
 800dd44:	6878      	ldr	r0, [r7, #4]
 800dd46:	f000 f872 	bl	800de2e <USBH_GetDescriptor>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800dd4e:	7bfb      	ldrb	r3, [r7, #15]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d109      	bne.n	800dd68 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800dd5a:	887a      	ldrh	r2, [r7, #2]
 800dd5c:	4619      	mov	r1, r3
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f000 f906 	bl	800df70 <USBH_ParseDevDesc>
 800dd64:	4603      	mov	r3, r0
 800dd66:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800dd68:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3710      	adds	r7, #16
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}

0800dd72 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800dd72:	b580      	push	{r7, lr}
 800dd74:	b086      	sub	sp, #24
 800dd76:	af02      	add	r7, sp, #8
 800dd78:	6078      	str	r0, [r7, #4]
 800dd7a:	460b      	mov	r3, r1
 800dd7c:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	331c      	adds	r3, #28
 800dd82:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800dd84:	887b      	ldrh	r3, [r7, #2]
 800dd86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd8a:	d901      	bls.n	800dd90 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800dd8c:	2303      	movs	r3, #3
 800dd8e:	e016      	b.n	800ddbe <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800dd90:	887b      	ldrh	r3, [r7, #2]
 800dd92:	9300      	str	r3, [sp, #0]
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dd9a:	2100      	movs	r1, #0
 800dd9c:	6878      	ldr	r0, [r7, #4]
 800dd9e:	f000 f846 	bl	800de2e <USBH_GetDescriptor>
 800dda2:	4603      	mov	r3, r0
 800dda4:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800dda6:	7bfb      	ldrb	r3, [r7, #15]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d107      	bne.n	800ddbc <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800ddac:	887b      	ldrh	r3, [r7, #2]
 800ddae:	461a      	mov	r2, r3
 800ddb0:	68b9      	ldr	r1, [r7, #8]
 800ddb2:	6878      	ldr	r0, [r7, #4]
 800ddb4:	f000 f990 	bl	800e0d8 <USBH_ParseCfgDesc>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ddbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	3710      	adds	r7, #16
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}

0800ddc6 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800ddc6:	b580      	push	{r7, lr}
 800ddc8:	b088      	sub	sp, #32
 800ddca:	af02      	add	r7, sp, #8
 800ddcc:	60f8      	str	r0, [r7, #12]
 800ddce:	607a      	str	r2, [r7, #4]
 800ddd0:	461a      	mov	r2, r3
 800ddd2:	460b      	mov	r3, r1
 800ddd4:	72fb      	strb	r3, [r7, #11]
 800ddd6:	4613      	mov	r3, r2
 800ddd8:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800ddda:	893b      	ldrh	r3, [r7, #8]
 800dddc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dde0:	d802      	bhi.n	800dde8 <USBH_Get_StringDesc+0x22>
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d101      	bne.n	800ddec <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800dde8:	2303      	movs	r3, #3
 800ddea:	e01c      	b.n	800de26 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800ddec:	7afb      	ldrb	r3, [r7, #11]
 800ddee:	b29b      	uxth	r3, r3
 800ddf0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ddf4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800ddfc:	893b      	ldrh	r3, [r7, #8]
 800ddfe:	9300      	str	r3, [sp, #0]
 800de00:	460b      	mov	r3, r1
 800de02:	2100      	movs	r1, #0
 800de04:	68f8      	ldr	r0, [r7, #12]
 800de06:	f000 f812 	bl	800de2e <USBH_GetDescriptor>
 800de0a:	4603      	mov	r3, r0
 800de0c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800de0e:	7dfb      	ldrb	r3, [r7, #23]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d107      	bne.n	800de24 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800de1a:	893a      	ldrh	r2, [r7, #8]
 800de1c:	6879      	ldr	r1, [r7, #4]
 800de1e:	4618      	mov	r0, r3
 800de20:	f000 fb70 	bl	800e504 <USBH_ParseStringDesc>
  }

  return status;
 800de24:	7dfb      	ldrb	r3, [r7, #23]
}
 800de26:	4618      	mov	r0, r3
 800de28:	3718      	adds	r7, #24
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}

0800de2e <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800de2e:	b580      	push	{r7, lr}
 800de30:	b084      	sub	sp, #16
 800de32:	af00      	add	r7, sp, #0
 800de34:	60f8      	str	r0, [r7, #12]
 800de36:	607b      	str	r3, [r7, #4]
 800de38:	460b      	mov	r3, r1
 800de3a:	72fb      	strb	r3, [r7, #11]
 800de3c:	4613      	mov	r3, r2
 800de3e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	789b      	ldrb	r3, [r3, #2]
 800de44:	2b01      	cmp	r3, #1
 800de46:	d11c      	bne.n	800de82 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800de48:	7afb      	ldrb	r3, [r7, #11]
 800de4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800de4e:	b2da      	uxtb	r2, r3
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	2206      	movs	r2, #6
 800de58:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	893a      	ldrh	r2, [r7, #8]
 800de5e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800de60:	893b      	ldrh	r3, [r7, #8]
 800de62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800de66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800de6a:	d104      	bne.n	800de76 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	f240 4209 	movw	r2, #1033	; 0x409
 800de72:	829a      	strh	r2, [r3, #20]
 800de74:	e002      	b.n	800de7c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	2200      	movs	r2, #0
 800de7a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	8b3a      	ldrh	r2, [r7, #24]
 800de80:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800de82:	8b3b      	ldrh	r3, [r7, #24]
 800de84:	461a      	mov	r2, r3
 800de86:	6879      	ldr	r1, [r7, #4]
 800de88:	68f8      	ldr	r0, [r7, #12]
 800de8a:	f000 fb89 	bl	800e5a0 <USBH_CtlReq>
 800de8e:	4603      	mov	r3, r0
}
 800de90:	4618      	mov	r0, r3
 800de92:	3710      	adds	r7, #16
 800de94:	46bd      	mov	sp, r7
 800de96:	bd80      	pop	{r7, pc}

0800de98 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b082      	sub	sp, #8
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
 800dea0:	460b      	mov	r3, r1
 800dea2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	789b      	ldrb	r3, [r3, #2]
 800dea8:	2b01      	cmp	r3, #1
 800deaa:	d10f      	bne.n	800decc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2200      	movs	r2, #0
 800deb0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2205      	movs	r2, #5
 800deb6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800deb8:	78fb      	ldrb	r3, [r7, #3]
 800deba:	b29a      	uxth	r2, r3
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2200      	movs	r2, #0
 800dec4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	2200      	movs	r2, #0
 800deca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800decc:	2200      	movs	r2, #0
 800dece:	2100      	movs	r1, #0
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	f000 fb65 	bl	800e5a0 <USBH_CtlReq>
 800ded6:	4603      	mov	r3, r0
}
 800ded8:	4618      	mov	r0, r3
 800deda:	3708      	adds	r7, #8
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}

0800dee0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b082      	sub	sp, #8
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
 800dee8:	460b      	mov	r3, r1
 800deea:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	789b      	ldrb	r3, [r3, #2]
 800def0:	2b01      	cmp	r3, #1
 800def2:	d10e      	bne.n	800df12 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2200      	movs	r2, #0
 800def8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2209      	movs	r2, #9
 800defe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	887a      	ldrh	r2, [r7, #2]
 800df04:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	2200      	movs	r2, #0
 800df0a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2200      	movs	r2, #0
 800df10:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800df12:	2200      	movs	r2, #0
 800df14:	2100      	movs	r1, #0
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f000 fb42 	bl	800e5a0 <USBH_CtlReq>
 800df1c:	4603      	mov	r3, r0
}
 800df1e:	4618      	mov	r0, r3
 800df20:	3708      	adds	r7, #8
 800df22:	46bd      	mov	sp, r7
 800df24:	bd80      	pop	{r7, pc}

0800df26 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800df26:	b580      	push	{r7, lr}
 800df28:	b082      	sub	sp, #8
 800df2a:	af00      	add	r7, sp, #0
 800df2c:	6078      	str	r0, [r7, #4]
 800df2e:	460b      	mov	r3, r1
 800df30:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	789b      	ldrb	r3, [r3, #2]
 800df36:	2b01      	cmp	r3, #1
 800df38:	d10f      	bne.n	800df5a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2200      	movs	r2, #0
 800df3e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2203      	movs	r2, #3
 800df44:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800df46:	78fb      	ldrb	r3, [r7, #3]
 800df48:	b29a      	uxth	r2, r3
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	2200      	movs	r2, #0
 800df52:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2200      	movs	r2, #0
 800df58:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800df5a:	2200      	movs	r2, #0
 800df5c:	2100      	movs	r1, #0
 800df5e:	6878      	ldr	r0, [r7, #4]
 800df60:	f000 fb1e 	bl	800e5a0 <USBH_CtlReq>
 800df64:	4603      	mov	r3, r0
}
 800df66:	4618      	mov	r0, r3
 800df68:	3708      	adds	r7, #8
 800df6a:	46bd      	mov	sp, r7
 800df6c:	bd80      	pop	{r7, pc}
	...

0800df70 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800df70:	b480      	push	{r7}
 800df72:	b087      	sub	sp, #28
 800df74:	af00      	add	r7, sp, #0
 800df76:	60f8      	str	r0, [r7, #12]
 800df78:	60b9      	str	r1, [r7, #8]
 800df7a:	4613      	mov	r3, r2
 800df7c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	f203 3326 	addw	r3, r3, #806	; 0x326
 800df84:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800df86:	2300      	movs	r3, #0
 800df88:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800df8a:	68bb      	ldr	r3, [r7, #8]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d101      	bne.n	800df94 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800df90:	2302      	movs	r3, #2
 800df92:	e098      	b.n	800e0c6 <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	781a      	ldrb	r2, [r3, #0]
 800df98:	693b      	ldr	r3, [r7, #16]
 800df9a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	785a      	ldrb	r2, [r3, #1]
 800dfa0:	693b      	ldr	r3, [r7, #16]
 800dfa2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	3302      	adds	r3, #2
 800dfa8:	781b      	ldrb	r3, [r3, #0]
 800dfaa:	b29a      	uxth	r2, r3
 800dfac:	68bb      	ldr	r3, [r7, #8]
 800dfae:	3303      	adds	r3, #3
 800dfb0:	781b      	ldrb	r3, [r3, #0]
 800dfb2:	b29b      	uxth	r3, r3
 800dfb4:	021b      	lsls	r3, r3, #8
 800dfb6:	b29b      	uxth	r3, r3
 800dfb8:	4313      	orrs	r3, r2
 800dfba:	b29a      	uxth	r2, r3
 800dfbc:	693b      	ldr	r3, [r7, #16]
 800dfbe:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800dfc0:	68bb      	ldr	r3, [r7, #8]
 800dfc2:	791a      	ldrb	r2, [r3, #4]
 800dfc4:	693b      	ldr	r3, [r7, #16]
 800dfc6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800dfc8:	68bb      	ldr	r3, [r7, #8]
 800dfca:	795a      	ldrb	r2, [r3, #5]
 800dfcc:	693b      	ldr	r3, [r7, #16]
 800dfce:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	799a      	ldrb	r2, [r3, #6]
 800dfd4:	693b      	ldr	r3, [r7, #16]
 800dfd6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	79da      	ldrb	r2, [r3, #7]
 800dfdc:	693b      	ldr	r3, [r7, #16]
 800dfde:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d004      	beq.n	800dff4 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800dff0:	2b01      	cmp	r3, #1
 800dff2:	d11b      	bne.n	800e02c <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800dff4:	693b      	ldr	r3, [r7, #16]
 800dff6:	79db      	ldrb	r3, [r3, #7]
 800dff8:	2b20      	cmp	r3, #32
 800dffa:	dc0f      	bgt.n	800e01c <USBH_ParseDevDesc+0xac>
 800dffc:	2b08      	cmp	r3, #8
 800dffe:	db0f      	blt.n	800e020 <USBH_ParseDevDesc+0xb0>
 800e000:	3b08      	subs	r3, #8
 800e002:	4a34      	ldr	r2, [pc, #208]	; (800e0d4 <USBH_ParseDevDesc+0x164>)
 800e004:	fa22 f303 	lsr.w	r3, r2, r3
 800e008:	f003 0301 	and.w	r3, r3, #1
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	bf14      	ite	ne
 800e010:	2301      	movne	r3, #1
 800e012:	2300      	moveq	r3, #0
 800e014:	b2db      	uxtb	r3, r3
 800e016:	2b00      	cmp	r3, #0
 800e018:	d106      	bne.n	800e028 <USBH_ParseDevDesc+0xb8>
 800e01a:	e001      	b.n	800e020 <USBH_ParseDevDesc+0xb0>
 800e01c:	2b40      	cmp	r3, #64	; 0x40
 800e01e:	d003      	beq.n	800e028 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800e020:	693b      	ldr	r3, [r7, #16]
 800e022:	2208      	movs	r2, #8
 800e024:	71da      	strb	r2, [r3, #7]
        break;
 800e026:	e000      	b.n	800e02a <USBH_ParseDevDesc+0xba>
        break;
 800e028:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800e02a:	e00e      	b.n	800e04a <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e032:	2b02      	cmp	r3, #2
 800e034:	d107      	bne.n	800e046 <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800e036:	693b      	ldr	r3, [r7, #16]
 800e038:	79db      	ldrb	r3, [r3, #7]
 800e03a:	2b08      	cmp	r3, #8
 800e03c:	d005      	beq.n	800e04a <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	2208      	movs	r2, #8
 800e042:	71da      	strb	r2, [r3, #7]
 800e044:	e001      	b.n	800e04a <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800e046:	2303      	movs	r3, #3
 800e048:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800e04a:	88fb      	ldrh	r3, [r7, #6]
 800e04c:	2b08      	cmp	r3, #8
 800e04e:	d939      	bls.n	800e0c4 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	3308      	adds	r3, #8
 800e054:	781b      	ldrb	r3, [r3, #0]
 800e056:	b29a      	uxth	r2, r3
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	3309      	adds	r3, #9
 800e05c:	781b      	ldrb	r3, [r3, #0]
 800e05e:	b29b      	uxth	r3, r3
 800e060:	021b      	lsls	r3, r3, #8
 800e062:	b29b      	uxth	r3, r3
 800e064:	4313      	orrs	r3, r2
 800e066:	b29a      	uxth	r2, r3
 800e068:	693b      	ldr	r3, [r7, #16]
 800e06a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	330a      	adds	r3, #10
 800e070:	781b      	ldrb	r3, [r3, #0]
 800e072:	b29a      	uxth	r2, r3
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	330b      	adds	r3, #11
 800e078:	781b      	ldrb	r3, [r3, #0]
 800e07a:	b29b      	uxth	r3, r3
 800e07c:	021b      	lsls	r3, r3, #8
 800e07e:	b29b      	uxth	r3, r3
 800e080:	4313      	orrs	r3, r2
 800e082:	b29a      	uxth	r2, r3
 800e084:	693b      	ldr	r3, [r7, #16]
 800e086:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	330c      	adds	r3, #12
 800e08c:	781b      	ldrb	r3, [r3, #0]
 800e08e:	b29a      	uxth	r2, r3
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	330d      	adds	r3, #13
 800e094:	781b      	ldrb	r3, [r3, #0]
 800e096:	b29b      	uxth	r3, r3
 800e098:	021b      	lsls	r3, r3, #8
 800e09a:	b29b      	uxth	r3, r3
 800e09c:	4313      	orrs	r3, r2
 800e09e:	b29a      	uxth	r2, r3
 800e0a0:	693b      	ldr	r3, [r7, #16]
 800e0a2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	7b9a      	ldrb	r2, [r3, #14]
 800e0a8:	693b      	ldr	r3, [r7, #16]
 800e0aa:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	7bda      	ldrb	r2, [r3, #15]
 800e0b0:	693b      	ldr	r3, [r7, #16]
 800e0b2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	7c1a      	ldrb	r2, [r3, #16]
 800e0b8:	693b      	ldr	r3, [r7, #16]
 800e0ba:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	7c5a      	ldrb	r2, [r3, #17]
 800e0c0:	693b      	ldr	r3, [r7, #16]
 800e0c2:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800e0c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	371c      	adds	r7, #28
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d0:	4770      	bx	lr
 800e0d2:	bf00      	nop
 800e0d4:	01000101 	.word	0x01000101

0800e0d8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b08c      	sub	sp, #48	; 0x30
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	60f8      	str	r0, [r7, #12]
 800e0e0:	60b9      	str	r1, [r7, #8]
 800e0e2:	4613      	mov	r3, r2
 800e0e4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800e0ec:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d101      	bne.n	800e10a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800e106:	2302      	movs	r3, #2
 800e108:	e0db      	b.n	800e2c2 <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	781a      	ldrb	r2, [r3, #0]
 800e112:	6a3b      	ldr	r3, [r7, #32]
 800e114:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	785a      	ldrb	r2, [r3, #1]
 800e11a:	6a3b      	ldr	r3, [r7, #32]
 800e11c:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800e11e:	68bb      	ldr	r3, [r7, #8]
 800e120:	3302      	adds	r3, #2
 800e122:	781b      	ldrb	r3, [r3, #0]
 800e124:	b29a      	uxth	r2, r3
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	3303      	adds	r3, #3
 800e12a:	781b      	ldrb	r3, [r3, #0]
 800e12c:	b29b      	uxth	r3, r3
 800e12e:	021b      	lsls	r3, r3, #8
 800e130:	b29b      	uxth	r3, r3
 800e132:	4313      	orrs	r3, r2
 800e134:	b29b      	uxth	r3, r3
 800e136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e13a:	bf28      	it	cs
 800e13c:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800e140:	b29a      	uxth	r2, r3
 800e142:	6a3b      	ldr	r3, [r7, #32]
 800e144:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	791a      	ldrb	r2, [r3, #4]
 800e14a:	6a3b      	ldr	r3, [r7, #32]
 800e14c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	795a      	ldrb	r2, [r3, #5]
 800e152:	6a3b      	ldr	r3, [r7, #32]
 800e154:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800e156:	68bb      	ldr	r3, [r7, #8]
 800e158:	799a      	ldrb	r2, [r3, #6]
 800e15a:	6a3b      	ldr	r3, [r7, #32]
 800e15c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	79da      	ldrb	r2, [r3, #7]
 800e162:	6a3b      	ldr	r3, [r7, #32]
 800e164:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800e166:	68bb      	ldr	r3, [r7, #8]
 800e168:	7a1a      	ldrb	r2, [r3, #8]
 800e16a:	6a3b      	ldr	r3, [r7, #32]
 800e16c:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800e16e:	6a3b      	ldr	r3, [r7, #32]
 800e170:	781b      	ldrb	r3, [r3, #0]
 800e172:	2b09      	cmp	r3, #9
 800e174:	d002      	beq.n	800e17c <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800e176:	6a3b      	ldr	r3, [r7, #32]
 800e178:	2209      	movs	r2, #9
 800e17a:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800e17c:	88fb      	ldrh	r3, [r7, #6]
 800e17e:	2b09      	cmp	r3, #9
 800e180:	f240 809d 	bls.w	800e2be <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 800e184:	2309      	movs	r3, #9
 800e186:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800e188:	2300      	movs	r3, #0
 800e18a:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e18c:	e081      	b.n	800e292 <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800e18e:	f107 0316 	add.w	r3, r7, #22
 800e192:	4619      	mov	r1, r3
 800e194:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e196:	f000 f9e8 	bl	800e56a <USBH_GetNextDesc>
 800e19a:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800e19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e19e:	785b      	ldrb	r3, [r3, #1]
 800e1a0:	2b04      	cmp	r3, #4
 800e1a2:	d176      	bne.n	800e292 <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800e1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1a6:	781b      	ldrb	r3, [r3, #0]
 800e1a8:	2b09      	cmp	r3, #9
 800e1aa:	d002      	beq.n	800e1b2 <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800e1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ae:	2209      	movs	r2, #9
 800e1b0:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800e1b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1b6:	221a      	movs	r2, #26
 800e1b8:	fb02 f303 	mul.w	r3, r2, r3
 800e1bc:	3308      	adds	r3, #8
 800e1be:	6a3a      	ldr	r2, [r7, #32]
 800e1c0:	4413      	add	r3, r2
 800e1c2:	3302      	adds	r3, #2
 800e1c4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800e1c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e1c8:	69f8      	ldr	r0, [r7, #28]
 800e1ca:	f000 f87e 	bl	800e2ca <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e1d8:	e043      	b.n	800e262 <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800e1da:	f107 0316 	add.w	r3, r7, #22
 800e1de:	4619      	mov	r1, r3
 800e1e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e1e2:	f000 f9c2 	bl	800e56a <USBH_GetNextDesc>
 800e1e6:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ea:	785b      	ldrb	r3, [r3, #1]
 800e1ec:	2b05      	cmp	r3, #5
 800e1ee:	d138      	bne.n	800e262 <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800e1f0:	69fb      	ldr	r3, [r7, #28]
 800e1f2:	795b      	ldrb	r3, [r3, #5]
 800e1f4:	2b01      	cmp	r3, #1
 800e1f6:	d113      	bne.n	800e220 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800e1f8:	69fb      	ldr	r3, [r7, #28]
 800e1fa:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800e1fc:	2b02      	cmp	r3, #2
 800e1fe:	d003      	beq.n	800e208 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800e200:	69fb      	ldr	r3, [r7, #28]
 800e202:	799b      	ldrb	r3, [r3, #6]
 800e204:	2b03      	cmp	r3, #3
 800e206:	d10b      	bne.n	800e220 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800e208:	69fb      	ldr	r3, [r7, #28]
 800e20a:	79db      	ldrb	r3, [r3, #7]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d10b      	bne.n	800e228 <USBH_ParseCfgDesc+0x150>
 800e210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e212:	781b      	ldrb	r3, [r3, #0]
 800e214:	2b09      	cmp	r3, #9
 800e216:	d007      	beq.n	800e228 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 800e218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e21a:	2209      	movs	r2, #9
 800e21c:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800e21e:	e003      	b.n	800e228 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800e220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e222:	2207      	movs	r2, #7
 800e224:	701a      	strb	r2, [r3, #0]
 800e226:	e000      	b.n	800e22a <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800e228:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800e22a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e22e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e232:	3201      	adds	r2, #1
 800e234:	00d2      	lsls	r2, r2, #3
 800e236:	211a      	movs	r1, #26
 800e238:	fb01 f303 	mul.w	r3, r1, r3
 800e23c:	4413      	add	r3, r2
 800e23e:	3308      	adds	r3, #8
 800e240:	6a3a      	ldr	r2, [r7, #32]
 800e242:	4413      	add	r3, r2
 800e244:	3304      	adds	r3, #4
 800e246:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800e248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e24a:	69b9      	ldr	r1, [r7, #24]
 800e24c:	68f8      	ldr	r0, [r7, #12]
 800e24e:	f000 f870 	bl	800e332 <USBH_ParseEPDesc>
 800e252:	4603      	mov	r3, r0
 800e254:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800e258:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e25c:	3301      	adds	r3, #1
 800e25e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e262:	69fb      	ldr	r3, [r7, #28]
 800e264:	791b      	ldrb	r3, [r3, #4]
 800e266:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e26a:	429a      	cmp	r2, r3
 800e26c:	d204      	bcs.n	800e278 <USBH_ParseCfgDesc+0x1a0>
 800e26e:	6a3b      	ldr	r3, [r7, #32]
 800e270:	885a      	ldrh	r2, [r3, #2]
 800e272:	8afb      	ldrh	r3, [r7, #22]
 800e274:	429a      	cmp	r2, r3
 800e276:	d8b0      	bhi.n	800e1da <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800e278:	69fb      	ldr	r3, [r7, #28]
 800e27a:	791b      	ldrb	r3, [r3, #4]
 800e27c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e280:	429a      	cmp	r2, r3
 800e282:	d201      	bcs.n	800e288 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 800e284:	2303      	movs	r3, #3
 800e286:	e01c      	b.n	800e2c2 <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 800e288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e28c:	3301      	adds	r3, #1
 800e28e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e292:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e296:	2b01      	cmp	r3, #1
 800e298:	d805      	bhi.n	800e2a6 <USBH_ParseCfgDesc+0x1ce>
 800e29a:	6a3b      	ldr	r3, [r7, #32]
 800e29c:	885a      	ldrh	r2, [r3, #2]
 800e29e:	8afb      	ldrh	r3, [r7, #22]
 800e2a0:	429a      	cmp	r2, r3
 800e2a2:	f63f af74 	bhi.w	800e18e <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800e2a6:	6a3b      	ldr	r3, [r7, #32]
 800e2a8:	791b      	ldrb	r3, [r3, #4]
 800e2aa:	2b02      	cmp	r3, #2
 800e2ac:	bf28      	it	cs
 800e2ae:	2302      	movcs	r3, #2
 800e2b0:	b2db      	uxtb	r3, r3
 800e2b2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e2b6:	429a      	cmp	r2, r3
 800e2b8:	d201      	bcs.n	800e2be <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 800e2ba:	2303      	movs	r3, #3
 800e2bc:	e001      	b.n	800e2c2 <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 800e2be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	3730      	adds	r7, #48	; 0x30
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}

0800e2ca <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800e2ca:	b480      	push	{r7}
 800e2cc:	b083      	sub	sp, #12
 800e2ce:	af00      	add	r7, sp, #0
 800e2d0:	6078      	str	r0, [r7, #4]
 800e2d2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	781a      	ldrb	r2, [r3, #0]
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	785a      	ldrb	r2, [r3, #1]
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	789a      	ldrb	r2, [r3, #2]
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	78da      	ldrb	r2, [r3, #3]
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	3304      	adds	r3, #4
 800e2f8:	781b      	ldrb	r3, [r3, #0]
 800e2fa:	2b02      	cmp	r3, #2
 800e2fc:	bf28      	it	cs
 800e2fe:	2302      	movcs	r3, #2
 800e300:	b2da      	uxtb	r2, r3
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	795a      	ldrb	r2, [r3, #5]
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	799a      	ldrb	r2, [r3, #6]
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800e316:	683b      	ldr	r3, [r7, #0]
 800e318:	79da      	ldrb	r2, [r3, #7]
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	7a1a      	ldrb	r2, [r3, #8]
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	721a      	strb	r2, [r3, #8]
}
 800e326:	bf00      	nop
 800e328:	370c      	adds	r7, #12
 800e32a:	46bd      	mov	sp, r7
 800e32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e330:	4770      	bx	lr

0800e332 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800e332:	b480      	push	{r7}
 800e334:	b087      	sub	sp, #28
 800e336:	af00      	add	r7, sp, #0
 800e338:	60f8      	str	r0, [r7, #12]
 800e33a:	60b9      	str	r1, [r7, #8]
 800e33c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800e33e:	2300      	movs	r3, #0
 800e340:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	781a      	ldrb	r2, [r3, #0]
 800e346:	68bb      	ldr	r3, [r7, #8]
 800e348:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	785a      	ldrb	r2, [r3, #1]
 800e34e:	68bb      	ldr	r3, [r7, #8]
 800e350:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	789a      	ldrb	r2, [r3, #2]
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	78da      	ldrb	r2, [r3, #3]
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	3304      	adds	r3, #4
 800e366:	781b      	ldrb	r3, [r3, #0]
 800e368:	b29a      	uxth	r2, r3
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	3305      	adds	r3, #5
 800e36e:	781b      	ldrb	r3, [r3, #0]
 800e370:	b29b      	uxth	r3, r3
 800e372:	021b      	lsls	r3, r3, #8
 800e374:	b29b      	uxth	r3, r3
 800e376:	4313      	orrs	r3, r2
 800e378:	b29a      	uxth	r2, r3
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	799a      	ldrb	r2, [r3, #6]
 800e382:	68bb      	ldr	r3, [r7, #8]
 800e384:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800e386:	68bb      	ldr	r3, [r7, #8]
 800e388:	889b      	ldrh	r3, [r3, #4]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d009      	beq.n	800e3a2 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800e38e:	68bb      	ldr	r3, [r7, #8]
 800e390:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800e392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e396:	d804      	bhi.n	800e3a2 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800e39c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3a0:	d901      	bls.n	800e3a6 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 800e3a2:	2303      	movs	r3, #3
 800e3a4:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d136      	bne.n	800e41e <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800e3b0:	68bb      	ldr	r3, [r7, #8]
 800e3b2:	78db      	ldrb	r3, [r3, #3]
 800e3b4:	f003 0303 	and.w	r3, r3, #3
 800e3b8:	2b02      	cmp	r3, #2
 800e3ba:	d108      	bne.n	800e3ce <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	889b      	ldrh	r3, [r3, #4]
 800e3c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3c4:	f240 8097 	bls.w	800e4f6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800e3c8:	2303      	movs	r3, #3
 800e3ca:	75fb      	strb	r3, [r7, #23]
 800e3cc:	e093      	b.n	800e4f6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	78db      	ldrb	r3, [r3, #3]
 800e3d2:	f003 0303 	and.w	r3, r3, #3
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d107      	bne.n	800e3ea <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	889b      	ldrh	r3, [r3, #4]
 800e3de:	2b40      	cmp	r3, #64	; 0x40
 800e3e0:	f240 8089 	bls.w	800e4f6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800e3e4:	2303      	movs	r3, #3
 800e3e6:	75fb      	strb	r3, [r7, #23]
 800e3e8:	e085      	b.n	800e4f6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800e3ea:	68bb      	ldr	r3, [r7, #8]
 800e3ec:	78db      	ldrb	r3, [r3, #3]
 800e3ee:	f003 0303 	and.w	r3, r3, #3
 800e3f2:	2b01      	cmp	r3, #1
 800e3f4:	d005      	beq.n	800e402 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	78db      	ldrb	r3, [r3, #3]
 800e3fa:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800e3fe:	2b03      	cmp	r3, #3
 800e400:	d10a      	bne.n	800e418 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e402:	68bb      	ldr	r3, [r7, #8]
 800e404:	799b      	ldrb	r3, [r3, #6]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d003      	beq.n	800e412 <USBH_ParseEPDesc+0xe0>
 800e40a:	68bb      	ldr	r3, [r7, #8]
 800e40c:	799b      	ldrb	r3, [r3, #6]
 800e40e:	2b10      	cmp	r3, #16
 800e410:	d970      	bls.n	800e4f4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e412:	2303      	movs	r3, #3
 800e414:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e416:	e06d      	b.n	800e4f4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800e418:	2303      	movs	r3, #3
 800e41a:	75fb      	strb	r3, [r7, #23]
 800e41c:	e06b      	b.n	800e4f6 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e424:	2b01      	cmp	r3, #1
 800e426:	d13c      	bne.n	800e4a2 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	78db      	ldrb	r3, [r3, #3]
 800e42c:	f003 0303 	and.w	r3, r3, #3
 800e430:	2b02      	cmp	r3, #2
 800e432:	d005      	beq.n	800e440 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800e434:	68bb      	ldr	r3, [r7, #8]
 800e436:	78db      	ldrb	r3, [r3, #3]
 800e438:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d106      	bne.n	800e44e <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800e440:	68bb      	ldr	r3, [r7, #8]
 800e442:	889b      	ldrh	r3, [r3, #4]
 800e444:	2b40      	cmp	r3, #64	; 0x40
 800e446:	d956      	bls.n	800e4f6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800e448:	2303      	movs	r3, #3
 800e44a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800e44c:	e053      	b.n	800e4f6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800e44e:	68bb      	ldr	r3, [r7, #8]
 800e450:	78db      	ldrb	r3, [r3, #3]
 800e452:	f003 0303 	and.w	r3, r3, #3
 800e456:	2b01      	cmp	r3, #1
 800e458:	d10e      	bne.n	800e478 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800e45a:	68bb      	ldr	r3, [r7, #8]
 800e45c:	799b      	ldrb	r3, [r3, #6]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d007      	beq.n	800e472 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800e466:	2b10      	cmp	r3, #16
 800e468:	d803      	bhi.n	800e472 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800e46e:	2b40      	cmp	r3, #64	; 0x40
 800e470:	d941      	bls.n	800e4f6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800e472:	2303      	movs	r3, #3
 800e474:	75fb      	strb	r3, [r7, #23]
 800e476:	e03e      	b.n	800e4f6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800e478:	68bb      	ldr	r3, [r7, #8]
 800e47a:	78db      	ldrb	r3, [r3, #3]
 800e47c:	f003 0303 	and.w	r3, r3, #3
 800e480:	2b03      	cmp	r3, #3
 800e482:	d10b      	bne.n	800e49c <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	799b      	ldrb	r3, [r3, #6]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d004      	beq.n	800e496 <USBH_ParseEPDesc+0x164>
 800e48c:	68bb      	ldr	r3, [r7, #8]
 800e48e:	889b      	ldrh	r3, [r3, #4]
 800e490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e494:	d32f      	bcc.n	800e4f6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800e496:	2303      	movs	r3, #3
 800e498:	75fb      	strb	r3, [r7, #23]
 800e49a:	e02c      	b.n	800e4f6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800e49c:	2303      	movs	r3, #3
 800e49e:	75fb      	strb	r3, [r7, #23]
 800e4a0:	e029      	b.n	800e4f6 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e4a8:	2b02      	cmp	r3, #2
 800e4aa:	d120      	bne.n	800e4ee <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800e4ac:	68bb      	ldr	r3, [r7, #8]
 800e4ae:	78db      	ldrb	r3, [r3, #3]
 800e4b0:	f003 0303 	and.w	r3, r3, #3
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d106      	bne.n	800e4c6 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800e4b8:	68bb      	ldr	r3, [r7, #8]
 800e4ba:	889b      	ldrh	r3, [r3, #4]
 800e4bc:	2b08      	cmp	r3, #8
 800e4be:	d01a      	beq.n	800e4f6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800e4c0:	2303      	movs	r3, #3
 800e4c2:	75fb      	strb	r3, [r7, #23]
 800e4c4:	e017      	b.n	800e4f6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	78db      	ldrb	r3, [r3, #3]
 800e4ca:	f003 0303 	and.w	r3, r3, #3
 800e4ce:	2b03      	cmp	r3, #3
 800e4d0:	d10a      	bne.n	800e4e8 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800e4d2:	68bb      	ldr	r3, [r7, #8]
 800e4d4:	799b      	ldrb	r3, [r3, #6]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d003      	beq.n	800e4e2 <USBH_ParseEPDesc+0x1b0>
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	889b      	ldrh	r3, [r3, #4]
 800e4de:	2b08      	cmp	r3, #8
 800e4e0:	d909      	bls.n	800e4f6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800e4e2:	2303      	movs	r3, #3
 800e4e4:	75fb      	strb	r3, [r7, #23]
 800e4e6:	e006      	b.n	800e4f6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800e4e8:	2303      	movs	r3, #3
 800e4ea:	75fb      	strb	r3, [r7, #23]
 800e4ec:	e003      	b.n	800e4f6 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800e4ee:	2303      	movs	r3, #3
 800e4f0:	75fb      	strb	r3, [r7, #23]
 800e4f2:	e000      	b.n	800e4f6 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e4f4:	bf00      	nop
  }

  return status;
 800e4f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	371c      	adds	r7, #28
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e502:	4770      	bx	lr

0800e504 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800e504:	b480      	push	{r7}
 800e506:	b087      	sub	sp, #28
 800e508:	af00      	add	r7, sp, #0
 800e50a:	60f8      	str	r0, [r7, #12]
 800e50c:	60b9      	str	r1, [r7, #8]
 800e50e:	4613      	mov	r3, r2
 800e510:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	3301      	adds	r3, #1
 800e516:	781b      	ldrb	r3, [r3, #0]
 800e518:	2b03      	cmp	r3, #3
 800e51a:	d120      	bne.n	800e55e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	781b      	ldrb	r3, [r3, #0]
 800e520:	1e9a      	subs	r2, r3, #2
 800e522:	88fb      	ldrh	r3, [r7, #6]
 800e524:	4293      	cmp	r3, r2
 800e526:	bf28      	it	cs
 800e528:	4613      	movcs	r3, r2
 800e52a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	3302      	adds	r3, #2
 800e530:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800e532:	2300      	movs	r3, #0
 800e534:	82fb      	strh	r3, [r7, #22]
 800e536:	e00b      	b.n	800e550 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800e538:	8afb      	ldrh	r3, [r7, #22]
 800e53a:	68fa      	ldr	r2, [r7, #12]
 800e53c:	4413      	add	r3, r2
 800e53e:	781a      	ldrb	r2, [r3, #0]
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	701a      	strb	r2, [r3, #0]
      pdest++;
 800e544:	68bb      	ldr	r3, [r7, #8]
 800e546:	3301      	adds	r3, #1
 800e548:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800e54a:	8afb      	ldrh	r3, [r7, #22]
 800e54c:	3302      	adds	r3, #2
 800e54e:	82fb      	strh	r3, [r7, #22]
 800e550:	8afa      	ldrh	r2, [r7, #22]
 800e552:	8abb      	ldrh	r3, [r7, #20]
 800e554:	429a      	cmp	r2, r3
 800e556:	d3ef      	bcc.n	800e538 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800e558:	68bb      	ldr	r3, [r7, #8]
 800e55a:	2200      	movs	r2, #0
 800e55c:	701a      	strb	r2, [r3, #0]
  }
}
 800e55e:	bf00      	nop
 800e560:	371c      	adds	r7, #28
 800e562:	46bd      	mov	sp, r7
 800e564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e568:	4770      	bx	lr

0800e56a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e56a:	b480      	push	{r7}
 800e56c:	b085      	sub	sp, #20
 800e56e:	af00      	add	r7, sp, #0
 800e570:	6078      	str	r0, [r7, #4]
 800e572:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	881a      	ldrh	r2, [r3, #0]
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	781b      	ldrb	r3, [r3, #0]
 800e57c:	b29b      	uxth	r3, r3
 800e57e:	4413      	add	r3, r2
 800e580:	b29a      	uxth	r2, r3
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	781b      	ldrb	r3, [r3, #0]
 800e58a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	4413      	add	r3, r2
 800e590:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e592:	68fb      	ldr	r3, [r7, #12]
}
 800e594:	4618      	mov	r0, r3
 800e596:	3714      	adds	r7, #20
 800e598:	46bd      	mov	sp, r7
 800e59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59e:	4770      	bx	lr

0800e5a0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b086      	sub	sp, #24
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	60f8      	str	r0, [r7, #12]
 800e5a8:	60b9      	str	r1, [r7, #8]
 800e5aa:	4613      	mov	r3, r2
 800e5ac:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800e5ae:	2301      	movs	r3, #1
 800e5b0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	789b      	ldrb	r3, [r3, #2]
 800e5b6:	2b01      	cmp	r3, #1
 800e5b8:	d002      	beq.n	800e5c0 <USBH_CtlReq+0x20>
 800e5ba:	2b02      	cmp	r3, #2
 800e5bc:	d00f      	beq.n	800e5de <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800e5be:	e027      	b.n	800e610 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	68ba      	ldr	r2, [r7, #8]
 800e5c4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	88fa      	ldrh	r2, [r7, #6]
 800e5ca:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	2201      	movs	r2, #1
 800e5d0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	2202      	movs	r2, #2
 800e5d6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800e5d8:	2301      	movs	r3, #1
 800e5da:	75fb      	strb	r3, [r7, #23]
      break;
 800e5dc:	e018      	b.n	800e610 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800e5de:	68f8      	ldr	r0, [r7, #12]
 800e5e0:	f000 f81c 	bl	800e61c <USBH_HandleControl>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800e5e8:	7dfb      	ldrb	r3, [r7, #23]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d002      	beq.n	800e5f4 <USBH_CtlReq+0x54>
 800e5ee:	7dfb      	ldrb	r3, [r7, #23]
 800e5f0:	2b03      	cmp	r3, #3
 800e5f2:	d106      	bne.n	800e602 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	2201      	movs	r2, #1
 800e5f8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	761a      	strb	r2, [r3, #24]
      break;
 800e600:	e005      	b.n	800e60e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800e602:	7dfb      	ldrb	r3, [r7, #23]
 800e604:	2b02      	cmp	r3, #2
 800e606:	d102      	bne.n	800e60e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	2201      	movs	r2, #1
 800e60c:	709a      	strb	r2, [r3, #2]
      break;
 800e60e:	bf00      	nop
  }
  return status;
 800e610:	7dfb      	ldrb	r3, [r7, #23]
}
 800e612:	4618      	mov	r0, r3
 800e614:	3718      	adds	r7, #24
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}
	...

0800e61c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b086      	sub	sp, #24
 800e620:	af02      	add	r7, sp, #8
 800e622:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800e624:	2301      	movs	r3, #1
 800e626:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e628:	2300      	movs	r3, #0
 800e62a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	7e1b      	ldrb	r3, [r3, #24]
 800e630:	3b01      	subs	r3, #1
 800e632:	2b0a      	cmp	r3, #10
 800e634:	f200 8156 	bhi.w	800e8e4 <USBH_HandleControl+0x2c8>
 800e638:	a201      	add	r2, pc, #4	; (adr r2, 800e640 <USBH_HandleControl+0x24>)
 800e63a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e63e:	bf00      	nop
 800e640:	0800e66d 	.word	0x0800e66d
 800e644:	0800e687 	.word	0x0800e687
 800e648:	0800e6f1 	.word	0x0800e6f1
 800e64c:	0800e717 	.word	0x0800e717
 800e650:	0800e74f 	.word	0x0800e74f
 800e654:	0800e779 	.word	0x0800e779
 800e658:	0800e7cb 	.word	0x0800e7cb
 800e65c:	0800e7ed 	.word	0x0800e7ed
 800e660:	0800e829 	.word	0x0800e829
 800e664:	0800e84f 	.word	0x0800e84f
 800e668:	0800e88d 	.word	0x0800e88d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f103 0110 	add.w	r1, r3, #16
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	795b      	ldrb	r3, [r3, #5]
 800e676:	461a      	mov	r2, r3
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	f000 f943 	bl	800e904 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	2202      	movs	r2, #2
 800e682:	761a      	strb	r2, [r3, #24]
      break;
 800e684:	e139      	b.n	800e8fa <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	795b      	ldrb	r3, [r3, #5]
 800e68a:	4619      	mov	r1, r3
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	f000 fb4f 	bl	800ed30 <USBH_LL_GetURBState>
 800e692:	4603      	mov	r3, r0
 800e694:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800e696:	7bbb      	ldrb	r3, [r7, #14]
 800e698:	2b01      	cmp	r3, #1
 800e69a:	d11e      	bne.n	800e6da <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	7c1b      	ldrb	r3, [r3, #16]
 800e6a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e6a4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	8adb      	ldrh	r3, [r3, #22]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d00a      	beq.n	800e6c4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800e6ae:	7b7b      	ldrb	r3, [r7, #13]
 800e6b0:	2b80      	cmp	r3, #128	; 0x80
 800e6b2:	d103      	bne.n	800e6bc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2203      	movs	r2, #3
 800e6b8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e6ba:	e115      	b.n	800e8e8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2205      	movs	r2, #5
 800e6c0:	761a      	strb	r2, [r3, #24]
      break;
 800e6c2:	e111      	b.n	800e8e8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800e6c4:	7b7b      	ldrb	r3, [r7, #13]
 800e6c6:	2b80      	cmp	r3, #128	; 0x80
 800e6c8:	d103      	bne.n	800e6d2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2209      	movs	r2, #9
 800e6ce:	761a      	strb	r2, [r3, #24]
      break;
 800e6d0:	e10a      	b.n	800e8e8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2207      	movs	r2, #7
 800e6d6:	761a      	strb	r2, [r3, #24]
      break;
 800e6d8:	e106      	b.n	800e8e8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800e6da:	7bbb      	ldrb	r3, [r7, #14]
 800e6dc:	2b04      	cmp	r3, #4
 800e6de:	d003      	beq.n	800e6e8 <USBH_HandleControl+0xcc>
 800e6e0:	7bbb      	ldrb	r3, [r7, #14]
 800e6e2:	2b02      	cmp	r3, #2
 800e6e4:	f040 8100 	bne.w	800e8e8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	220b      	movs	r2, #11
 800e6ec:	761a      	strb	r2, [r3, #24]
      break;
 800e6ee:	e0fb      	b.n	800e8e8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e6f6:	b29a      	uxth	r2, r3
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	6899      	ldr	r1, [r3, #8]
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	899a      	ldrh	r2, [r3, #12]
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	791b      	ldrb	r3, [r3, #4]
 800e708:	6878      	ldr	r0, [r7, #4]
 800e70a:	f000 f93a 	bl	800e982 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	2204      	movs	r2, #4
 800e712:	761a      	strb	r2, [r3, #24]
      break;
 800e714:	e0f1      	b.n	800e8fa <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	791b      	ldrb	r3, [r3, #4]
 800e71a:	4619      	mov	r1, r3
 800e71c:	6878      	ldr	r0, [r7, #4]
 800e71e:	f000 fb07 	bl	800ed30 <USBH_LL_GetURBState>
 800e722:	4603      	mov	r3, r0
 800e724:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800e726:	7bbb      	ldrb	r3, [r7, #14]
 800e728:	2b01      	cmp	r3, #1
 800e72a:	d102      	bne.n	800e732 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	2209      	movs	r2, #9
 800e730:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800e732:	7bbb      	ldrb	r3, [r7, #14]
 800e734:	2b05      	cmp	r3, #5
 800e736:	d102      	bne.n	800e73e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800e738:	2303      	movs	r3, #3
 800e73a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e73c:	e0d6      	b.n	800e8ec <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800e73e:	7bbb      	ldrb	r3, [r7, #14]
 800e740:	2b04      	cmp	r3, #4
 800e742:	f040 80d3 	bne.w	800e8ec <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	220b      	movs	r2, #11
 800e74a:	761a      	strb	r2, [r3, #24]
      break;
 800e74c:	e0ce      	b.n	800e8ec <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	6899      	ldr	r1, [r3, #8]
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	899a      	ldrh	r2, [r3, #12]
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	795b      	ldrb	r3, [r3, #5]
 800e75a:	2001      	movs	r0, #1
 800e75c:	9000      	str	r0, [sp, #0]
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f000 f8ea 	bl	800e938 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e76a:	b29a      	uxth	r2, r3
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	2206      	movs	r2, #6
 800e774:	761a      	strb	r2, [r3, #24]
      break;
 800e776:	e0c0      	b.n	800e8fa <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	795b      	ldrb	r3, [r3, #5]
 800e77c:	4619      	mov	r1, r3
 800e77e:	6878      	ldr	r0, [r7, #4]
 800e780:	f000 fad6 	bl	800ed30 <USBH_LL_GetURBState>
 800e784:	4603      	mov	r3, r0
 800e786:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e788:	7bbb      	ldrb	r3, [r7, #14]
 800e78a:	2b01      	cmp	r3, #1
 800e78c:	d103      	bne.n	800e796 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	2207      	movs	r2, #7
 800e792:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e794:	e0ac      	b.n	800e8f0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800e796:	7bbb      	ldrb	r3, [r7, #14]
 800e798:	2b05      	cmp	r3, #5
 800e79a:	d105      	bne.n	800e7a8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	220c      	movs	r2, #12
 800e7a0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800e7a2:	2303      	movs	r3, #3
 800e7a4:	73fb      	strb	r3, [r7, #15]
      break;
 800e7a6:	e0a3      	b.n	800e8f0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e7a8:	7bbb      	ldrb	r3, [r7, #14]
 800e7aa:	2b02      	cmp	r3, #2
 800e7ac:	d103      	bne.n	800e7b6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2205      	movs	r2, #5
 800e7b2:	761a      	strb	r2, [r3, #24]
      break;
 800e7b4:	e09c      	b.n	800e8f0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800e7b6:	7bbb      	ldrb	r3, [r7, #14]
 800e7b8:	2b04      	cmp	r3, #4
 800e7ba:	f040 8099 	bne.w	800e8f0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	220b      	movs	r2, #11
 800e7c2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800e7c4:	2302      	movs	r3, #2
 800e7c6:	73fb      	strb	r3, [r7, #15]
      break;
 800e7c8:	e092      	b.n	800e8f0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	791b      	ldrb	r3, [r3, #4]
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	2100      	movs	r1, #0
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	f000 f8d5 	bl	800e982 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e7de:	b29a      	uxth	r2, r3
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2208      	movs	r2, #8
 800e7e8:	761a      	strb	r2, [r3, #24]

      break;
 800e7ea:	e086      	b.n	800e8fa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	791b      	ldrb	r3, [r3, #4]
 800e7f0:	4619      	mov	r1, r3
 800e7f2:	6878      	ldr	r0, [r7, #4]
 800e7f4:	f000 fa9c 	bl	800ed30 <USBH_LL_GetURBState>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e7fc:	7bbb      	ldrb	r3, [r7, #14]
 800e7fe:	2b01      	cmp	r3, #1
 800e800:	d105      	bne.n	800e80e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	220d      	movs	r2, #13
 800e806:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e808:	2300      	movs	r3, #0
 800e80a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e80c:	e072      	b.n	800e8f4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800e80e:	7bbb      	ldrb	r3, [r7, #14]
 800e810:	2b04      	cmp	r3, #4
 800e812:	d103      	bne.n	800e81c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	220b      	movs	r2, #11
 800e818:	761a      	strb	r2, [r3, #24]
      break;
 800e81a:	e06b      	b.n	800e8f4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800e81c:	7bbb      	ldrb	r3, [r7, #14]
 800e81e:	2b05      	cmp	r3, #5
 800e820:	d168      	bne.n	800e8f4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800e822:	2303      	movs	r3, #3
 800e824:	73fb      	strb	r3, [r7, #15]
      break;
 800e826:	e065      	b.n	800e8f4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	795b      	ldrb	r3, [r3, #5]
 800e82c:	2201      	movs	r2, #1
 800e82e:	9200      	str	r2, [sp, #0]
 800e830:	2200      	movs	r2, #0
 800e832:	2100      	movs	r1, #0
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	f000 f87f 	bl	800e938 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e840:	b29a      	uxth	r2, r3
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	220a      	movs	r2, #10
 800e84a:	761a      	strb	r2, [r3, #24]
      break;
 800e84c:	e055      	b.n	800e8fa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	795b      	ldrb	r3, [r3, #5]
 800e852:	4619      	mov	r1, r3
 800e854:	6878      	ldr	r0, [r7, #4]
 800e856:	f000 fa6b 	bl	800ed30 <USBH_LL_GetURBState>
 800e85a:	4603      	mov	r3, r0
 800e85c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e85e:	7bbb      	ldrb	r3, [r7, #14]
 800e860:	2b01      	cmp	r3, #1
 800e862:	d105      	bne.n	800e870 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800e864:	2300      	movs	r3, #0
 800e866:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	220d      	movs	r2, #13
 800e86c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e86e:	e043      	b.n	800e8f8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e870:	7bbb      	ldrb	r3, [r7, #14]
 800e872:	2b02      	cmp	r3, #2
 800e874:	d103      	bne.n	800e87e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2209      	movs	r2, #9
 800e87a:	761a      	strb	r2, [r3, #24]
      break;
 800e87c:	e03c      	b.n	800e8f8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800e87e:	7bbb      	ldrb	r3, [r7, #14]
 800e880:	2b04      	cmp	r3, #4
 800e882:	d139      	bne.n	800e8f8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	220b      	movs	r2, #11
 800e888:	761a      	strb	r2, [r3, #24]
      break;
 800e88a:	e035      	b.n	800e8f8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	7e5b      	ldrb	r3, [r3, #25]
 800e890:	3301      	adds	r3, #1
 800e892:	b2da      	uxtb	r2, r3
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	765a      	strb	r2, [r3, #25]
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	7e5b      	ldrb	r3, [r3, #25]
 800e89c:	2b02      	cmp	r3, #2
 800e89e:	d806      	bhi.n	800e8ae <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2201      	movs	r2, #1
 800e8a4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2201      	movs	r2, #1
 800e8aa:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e8ac:	e025      	b.n	800e8fa <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e8b4:	2106      	movs	r1, #6
 800e8b6:	6878      	ldr	r0, [r7, #4]
 800e8b8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	2200      	movs	r2, #0
 800e8be:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	795b      	ldrb	r3, [r3, #5]
 800e8c4:	4619      	mov	r1, r3
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f000 f8b9 	bl	800ea3e <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	791b      	ldrb	r3, [r3, #4]
 800e8d0:	4619      	mov	r1, r3
 800e8d2:	6878      	ldr	r0, [r7, #4]
 800e8d4:	f000 f8b3 	bl	800ea3e <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	2200      	movs	r2, #0
 800e8dc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e8de:	2302      	movs	r3, #2
 800e8e0:	73fb      	strb	r3, [r7, #15]
      break;
 800e8e2:	e00a      	b.n	800e8fa <USBH_HandleControl+0x2de>

    default:
      break;
 800e8e4:	bf00      	nop
 800e8e6:	e008      	b.n	800e8fa <USBH_HandleControl+0x2de>
      break;
 800e8e8:	bf00      	nop
 800e8ea:	e006      	b.n	800e8fa <USBH_HandleControl+0x2de>
      break;
 800e8ec:	bf00      	nop
 800e8ee:	e004      	b.n	800e8fa <USBH_HandleControl+0x2de>
      break;
 800e8f0:	bf00      	nop
 800e8f2:	e002      	b.n	800e8fa <USBH_HandleControl+0x2de>
      break;
 800e8f4:	bf00      	nop
 800e8f6:	e000      	b.n	800e8fa <USBH_HandleControl+0x2de>
      break;
 800e8f8:	bf00      	nop
  }

  return status;
 800e8fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	3710      	adds	r7, #16
 800e900:	46bd      	mov	sp, r7
 800e902:	bd80      	pop	{r7, pc}

0800e904 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b088      	sub	sp, #32
 800e908:	af04      	add	r7, sp, #16
 800e90a:	60f8      	str	r0, [r7, #12]
 800e90c:	60b9      	str	r1, [r7, #8]
 800e90e:	4613      	mov	r3, r2
 800e910:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e912:	79f9      	ldrb	r1, [r7, #7]
 800e914:	2300      	movs	r3, #0
 800e916:	9303      	str	r3, [sp, #12]
 800e918:	2308      	movs	r3, #8
 800e91a:	9302      	str	r3, [sp, #8]
 800e91c:	68bb      	ldr	r3, [r7, #8]
 800e91e:	9301      	str	r3, [sp, #4]
 800e920:	2300      	movs	r3, #0
 800e922:	9300      	str	r3, [sp, #0]
 800e924:	2300      	movs	r3, #0
 800e926:	2200      	movs	r2, #0
 800e928:	68f8      	ldr	r0, [r7, #12]
 800e92a:	f000 f9d0 	bl	800ecce <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800e92e:	2300      	movs	r3, #0
}
 800e930:	4618      	mov	r0, r3
 800e932:	3710      	adds	r7, #16
 800e934:	46bd      	mov	sp, r7
 800e936:	bd80      	pop	{r7, pc}

0800e938 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b088      	sub	sp, #32
 800e93c:	af04      	add	r7, sp, #16
 800e93e:	60f8      	str	r0, [r7, #12]
 800e940:	60b9      	str	r1, [r7, #8]
 800e942:	4611      	mov	r1, r2
 800e944:	461a      	mov	r2, r3
 800e946:	460b      	mov	r3, r1
 800e948:	80fb      	strh	r3, [r7, #6]
 800e94a:	4613      	mov	r3, r2
 800e94c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e954:	2b00      	cmp	r3, #0
 800e956:	d001      	beq.n	800e95c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e958:	2300      	movs	r3, #0
 800e95a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e95c:	7979      	ldrb	r1, [r7, #5]
 800e95e:	7e3b      	ldrb	r3, [r7, #24]
 800e960:	9303      	str	r3, [sp, #12]
 800e962:	88fb      	ldrh	r3, [r7, #6]
 800e964:	9302      	str	r3, [sp, #8]
 800e966:	68bb      	ldr	r3, [r7, #8]
 800e968:	9301      	str	r3, [sp, #4]
 800e96a:	2301      	movs	r3, #1
 800e96c:	9300      	str	r3, [sp, #0]
 800e96e:	2300      	movs	r3, #0
 800e970:	2200      	movs	r2, #0
 800e972:	68f8      	ldr	r0, [r7, #12]
 800e974:	f000 f9ab 	bl	800ecce <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e978:	2300      	movs	r3, #0
}
 800e97a:	4618      	mov	r0, r3
 800e97c:	3710      	adds	r7, #16
 800e97e:	46bd      	mov	sp, r7
 800e980:	bd80      	pop	{r7, pc}

0800e982 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e982:	b580      	push	{r7, lr}
 800e984:	b088      	sub	sp, #32
 800e986:	af04      	add	r7, sp, #16
 800e988:	60f8      	str	r0, [r7, #12]
 800e98a:	60b9      	str	r1, [r7, #8]
 800e98c:	4611      	mov	r1, r2
 800e98e:	461a      	mov	r2, r3
 800e990:	460b      	mov	r3, r1
 800e992:	80fb      	strh	r3, [r7, #6]
 800e994:	4613      	mov	r3, r2
 800e996:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e998:	7979      	ldrb	r1, [r7, #5]
 800e99a:	2300      	movs	r3, #0
 800e99c:	9303      	str	r3, [sp, #12]
 800e99e:	88fb      	ldrh	r3, [r7, #6]
 800e9a0:	9302      	str	r3, [sp, #8]
 800e9a2:	68bb      	ldr	r3, [r7, #8]
 800e9a4:	9301      	str	r3, [sp, #4]
 800e9a6:	2301      	movs	r3, #1
 800e9a8:	9300      	str	r3, [sp, #0]
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	2201      	movs	r2, #1
 800e9ae:	68f8      	ldr	r0, [r7, #12]
 800e9b0:	f000 f98d 	bl	800ecce <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e9b4:	2300      	movs	r3, #0

}
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	3710      	adds	r7, #16
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bd80      	pop	{r7, pc}

0800e9be <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e9be:	b580      	push	{r7, lr}
 800e9c0:	b086      	sub	sp, #24
 800e9c2:	af04      	add	r7, sp, #16
 800e9c4:	6078      	str	r0, [r7, #4]
 800e9c6:	4608      	mov	r0, r1
 800e9c8:	4611      	mov	r1, r2
 800e9ca:	461a      	mov	r2, r3
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	70fb      	strb	r3, [r7, #3]
 800e9d0:	460b      	mov	r3, r1
 800e9d2:	70bb      	strb	r3, [r7, #2]
 800e9d4:	4613      	mov	r3, r2
 800e9d6:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e9d8:	7878      	ldrb	r0, [r7, #1]
 800e9da:	78ba      	ldrb	r2, [r7, #2]
 800e9dc:	78f9      	ldrb	r1, [r7, #3]
 800e9de:	8b3b      	ldrh	r3, [r7, #24]
 800e9e0:	9302      	str	r3, [sp, #8]
 800e9e2:	7d3b      	ldrb	r3, [r7, #20]
 800e9e4:	9301      	str	r3, [sp, #4]
 800e9e6:	7c3b      	ldrb	r3, [r7, #16]
 800e9e8:	9300      	str	r3, [sp, #0]
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	6878      	ldr	r0, [r7, #4]
 800e9ee:	f000 f93f 	bl	800ec70 <USBH_LL_OpenPipe>

  return USBH_OK;
 800e9f2:	2300      	movs	r3, #0
}
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	3708      	adds	r7, #8
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}

0800e9fc <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b084      	sub	sp, #16
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
 800ea04:	460b      	mov	r3, r1
 800ea06:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	f000 f836 	bl	800ea7a <USBH_GetFreePipe>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ea12:	89fb      	ldrh	r3, [r7, #14]
 800ea14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea18:	4293      	cmp	r3, r2
 800ea1a:	d00a      	beq.n	800ea32 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ea1c:	78fa      	ldrb	r2, [r7, #3]
 800ea1e:	89fb      	ldrh	r3, [r7, #14]
 800ea20:	f003 030f 	and.w	r3, r3, #15
 800ea24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ea28:	6879      	ldr	r1, [r7, #4]
 800ea2a:	33e0      	adds	r3, #224	; 0xe0
 800ea2c:	009b      	lsls	r3, r3, #2
 800ea2e:	440b      	add	r3, r1
 800ea30:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ea32:	89fb      	ldrh	r3, [r7, #14]
 800ea34:	b2db      	uxtb	r3, r3
}
 800ea36:	4618      	mov	r0, r3
 800ea38:	3710      	adds	r7, #16
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}

0800ea3e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ea3e:	b480      	push	{r7}
 800ea40:	b083      	sub	sp, #12
 800ea42:	af00      	add	r7, sp, #0
 800ea44:	6078      	str	r0, [r7, #4]
 800ea46:	460b      	mov	r3, r1
 800ea48:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800ea4a:	78fb      	ldrb	r3, [r7, #3]
 800ea4c:	2b0f      	cmp	r3, #15
 800ea4e:	d80d      	bhi.n	800ea6c <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ea50:	78fb      	ldrb	r3, [r7, #3]
 800ea52:	687a      	ldr	r2, [r7, #4]
 800ea54:	33e0      	adds	r3, #224	; 0xe0
 800ea56:	009b      	lsls	r3, r3, #2
 800ea58:	4413      	add	r3, r2
 800ea5a:	685a      	ldr	r2, [r3, #4]
 800ea5c:	78fb      	ldrb	r3, [r7, #3]
 800ea5e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ea62:	6879      	ldr	r1, [r7, #4]
 800ea64:	33e0      	adds	r3, #224	; 0xe0
 800ea66:	009b      	lsls	r3, r3, #2
 800ea68:	440b      	add	r3, r1
 800ea6a:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ea6c:	2300      	movs	r3, #0
}
 800ea6e:	4618      	mov	r0, r3
 800ea70:	370c      	adds	r7, #12
 800ea72:	46bd      	mov	sp, r7
 800ea74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea78:	4770      	bx	lr

0800ea7a <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ea7a:	b480      	push	{r7}
 800ea7c:	b085      	sub	sp, #20
 800ea7e:	af00      	add	r7, sp, #0
 800ea80:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ea82:	2300      	movs	r3, #0
 800ea84:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ea86:	2300      	movs	r3, #0
 800ea88:	73fb      	strb	r3, [r7, #15]
 800ea8a:	e00f      	b.n	800eaac <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ea8c:	7bfb      	ldrb	r3, [r7, #15]
 800ea8e:	687a      	ldr	r2, [r7, #4]
 800ea90:	33e0      	adds	r3, #224	; 0xe0
 800ea92:	009b      	lsls	r3, r3, #2
 800ea94:	4413      	add	r3, r2
 800ea96:	685b      	ldr	r3, [r3, #4]
 800ea98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d102      	bne.n	800eaa6 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800eaa0:	7bfb      	ldrb	r3, [r7, #15]
 800eaa2:	b29b      	uxth	r3, r3
 800eaa4:	e007      	b.n	800eab6 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800eaa6:	7bfb      	ldrb	r3, [r7, #15]
 800eaa8:	3301      	adds	r3, #1
 800eaaa:	73fb      	strb	r3, [r7, #15]
 800eaac:	7bfb      	ldrb	r3, [r7, #15]
 800eaae:	2b0f      	cmp	r3, #15
 800eab0:	d9ec      	bls.n	800ea8c <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800eab2:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800eab6:	4618      	mov	r0, r3
 800eab8:	3714      	adds	r7, #20
 800eaba:	46bd      	mov	sp, r7
 800eabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac0:	4770      	bx	lr
	...

0800eac4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 800eac8:	4802      	ldr	r0, [pc, #8]	; (800ead4 <MX_USB_HOST_Process+0x10>)
 800eaca:	f7fe fcd5 	bl	800d478 <USBH_Process>
}
 800eace:	bf00      	nop
 800ead0:	bd80      	pop	{r7, pc}
 800ead2:	bf00      	nop
 800ead4:	20003bf0 	.word	0x20003bf0

0800ead8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b082      	sub	sp, #8
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800eae6:	4618      	mov	r0, r3
 800eae8:	f7ff f896 	bl	800dc18 <USBH_LL_IncTimer>
}
 800eaec:	bf00      	nop
 800eaee:	3708      	adds	r7, #8
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	bd80      	pop	{r7, pc}

0800eaf4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b082      	sub	sp, #8
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800eb02:	4618      	mov	r0, r3
 800eb04:	f7ff f8ce 	bl	800dca4 <USBH_LL_Connect>
}
 800eb08:	bf00      	nop
 800eb0a:	3708      	adds	r7, #8
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}

0800eb10 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b082      	sub	sp, #8
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f7ff f8d7 	bl	800dcd2 <USBH_LL_Disconnect>
}
 800eb24:	bf00      	nop
 800eb26:	3708      	adds	r7, #8
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}

0800eb2c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800eb2c:	b480      	push	{r7}
 800eb2e:	b083      	sub	sp, #12
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
 800eb34:	460b      	mov	r3, r1
 800eb36:	70fb      	strb	r3, [r7, #3]
 800eb38:	4613      	mov	r3, r2
 800eb3a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800eb3c:	bf00      	nop
 800eb3e:	370c      	adds	r7, #12
 800eb40:	46bd      	mov	sp, r7
 800eb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb46:	4770      	bx	lr

0800eb48 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b082      	sub	sp, #8
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800eb56:	4618      	mov	r0, r3
 800eb58:	f7ff f888 	bl	800dc6c <USBH_LL_PortEnabled>
}
 800eb5c:	bf00      	nop
 800eb5e:	3708      	adds	r7, #8
 800eb60:	46bd      	mov	sp, r7
 800eb62:	bd80      	pop	{r7, pc}

0800eb64 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b082      	sub	sp, #8
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800eb72:	4618      	mov	r0, r3
 800eb74:	f7ff f888 	bl	800dc88 <USBH_LL_PortDisabled>
}
 800eb78:	bf00      	nop
 800eb7a:	3708      	adds	r7, #8
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	bd80      	pop	{r7, pc}

0800eb80 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b084      	sub	sp, #16
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb88:	2300      	movs	r3, #0
 800eb8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eb96:	4618      	mov	r0, r3
 800eb98:	f7f7 fb9a 	bl	80062d0 <HAL_HCD_Start>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800eba0:	7bfb      	ldrb	r3, [r7, #15]
 800eba2:	4618      	mov	r0, r3
 800eba4:	f000 f8fa 	bl	800ed9c <USBH_Get_USB_Status>
 800eba8:	4603      	mov	r3, r0
 800ebaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ebac:	7bbb      	ldrb	r3, [r7, #14]
}
 800ebae:	4618      	mov	r0, r3
 800ebb0:	3710      	adds	r7, #16
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	bd80      	pop	{r7, pc}

0800ebb6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ebb6:	b580      	push	{r7, lr}
 800ebb8:	b084      	sub	sp, #16
 800ebba:	af00      	add	r7, sp, #0
 800ebbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ebcc:	4618      	mov	r0, r3
 800ebce:	f7f7 fba2 	bl	8006316 <HAL_HCD_Stop>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ebd6:	7bfb      	ldrb	r3, [r7, #15]
 800ebd8:	4618      	mov	r0, r3
 800ebda:	f000 f8df 	bl	800ed9c <USBH_Get_USB_Status>
 800ebde:	4603      	mov	r3, r0
 800ebe0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ebe2:	7bbb      	ldrb	r3, [r7, #14]
}
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	3710      	adds	r7, #16
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	bd80      	pop	{r7, pc}

0800ebec <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b084      	sub	sp, #16
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ebf4:	2301      	movs	r3, #1
 800ebf6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f7f7 fbc9 	bl	8006396 <HAL_HCD_GetCurrentSpeed>
 800ec04:	4603      	mov	r3, r0
 800ec06:	2b02      	cmp	r3, #2
 800ec08:	d00c      	beq.n	800ec24 <USBH_LL_GetSpeed+0x38>
 800ec0a:	2b02      	cmp	r3, #2
 800ec0c:	d80d      	bhi.n	800ec2a <USBH_LL_GetSpeed+0x3e>
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d002      	beq.n	800ec18 <USBH_LL_GetSpeed+0x2c>
 800ec12:	2b01      	cmp	r3, #1
 800ec14:	d003      	beq.n	800ec1e <USBH_LL_GetSpeed+0x32>
 800ec16:	e008      	b.n	800ec2a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ec18:	2300      	movs	r3, #0
 800ec1a:	73fb      	strb	r3, [r7, #15]
    break;
 800ec1c:	e008      	b.n	800ec30 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ec1e:	2301      	movs	r3, #1
 800ec20:	73fb      	strb	r3, [r7, #15]
    break;
 800ec22:	e005      	b.n	800ec30 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ec24:	2302      	movs	r3, #2
 800ec26:	73fb      	strb	r3, [r7, #15]
    break;
 800ec28:	e002      	b.n	800ec30 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ec2a:	2301      	movs	r3, #1
 800ec2c:	73fb      	strb	r3, [r7, #15]
    break;
 800ec2e:	bf00      	nop
  }
  return  speed;
 800ec30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec32:	4618      	mov	r0, r3
 800ec34:	3710      	adds	r7, #16
 800ec36:	46bd      	mov	sp, r7
 800ec38:	bd80      	pop	{r7, pc}

0800ec3a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ec3a:	b580      	push	{r7, lr}
 800ec3c:	b084      	sub	sp, #16
 800ec3e:	af00      	add	r7, sp, #0
 800ec40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec42:	2300      	movs	r3, #0
 800ec44:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ec46:	2300      	movs	r3, #0
 800ec48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ec50:	4618      	mov	r0, r3
 800ec52:	f7f7 fb7d 	bl	8006350 <HAL_HCD_ResetPort>
 800ec56:	4603      	mov	r3, r0
 800ec58:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ec5a:	7bfb      	ldrb	r3, [r7, #15]
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f000 f89d 	bl	800ed9c <USBH_Get_USB_Status>
 800ec62:	4603      	mov	r3, r0
 800ec64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec66:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec68:	4618      	mov	r0, r3
 800ec6a:	3710      	adds	r7, #16
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bd80      	pop	{r7, pc}

0800ec70 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ec70:	b590      	push	{r4, r7, lr}
 800ec72:	b089      	sub	sp, #36	; 0x24
 800ec74:	af04      	add	r7, sp, #16
 800ec76:	6078      	str	r0, [r7, #4]
 800ec78:	4608      	mov	r0, r1
 800ec7a:	4611      	mov	r1, r2
 800ec7c:	461a      	mov	r2, r3
 800ec7e:	4603      	mov	r3, r0
 800ec80:	70fb      	strb	r3, [r7, #3]
 800ec82:	460b      	mov	r3, r1
 800ec84:	70bb      	strb	r3, [r7, #2]
 800ec86:	4613      	mov	r3, r2
 800ec88:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ec98:	787c      	ldrb	r4, [r7, #1]
 800ec9a:	78ba      	ldrb	r2, [r7, #2]
 800ec9c:	78f9      	ldrb	r1, [r7, #3]
 800ec9e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eca0:	9302      	str	r3, [sp, #8]
 800eca2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800eca6:	9301      	str	r3, [sp, #4]
 800eca8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ecac:	9300      	str	r3, [sp, #0]
 800ecae:	4623      	mov	r3, r4
 800ecb0:	f7f6 ffa7 	bl	8005c02 <HAL_HCD_HC_Init>
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ecb8:	7bfb      	ldrb	r3, [r7, #15]
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f000 f86e 	bl	800ed9c <USBH_Get_USB_Status>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3714      	adds	r7, #20
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd90      	pop	{r4, r7, pc}

0800ecce <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ecce:	b590      	push	{r4, r7, lr}
 800ecd0:	b089      	sub	sp, #36	; 0x24
 800ecd2:	af04      	add	r7, sp, #16
 800ecd4:	6078      	str	r0, [r7, #4]
 800ecd6:	4608      	mov	r0, r1
 800ecd8:	4611      	mov	r1, r2
 800ecda:	461a      	mov	r2, r3
 800ecdc:	4603      	mov	r3, r0
 800ecde:	70fb      	strb	r3, [r7, #3]
 800ece0:	460b      	mov	r3, r1
 800ece2:	70bb      	strb	r3, [r7, #2]
 800ece4:	4613      	mov	r3, r2
 800ece6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ece8:	2300      	movs	r3, #0
 800ecea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ecec:	2300      	movs	r3, #0
 800ecee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ecf6:	787c      	ldrb	r4, [r7, #1]
 800ecf8:	78ba      	ldrb	r2, [r7, #2]
 800ecfa:	78f9      	ldrb	r1, [r7, #3]
 800ecfc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ed00:	9303      	str	r3, [sp, #12]
 800ed02:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ed04:	9302      	str	r3, [sp, #8]
 800ed06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed08:	9301      	str	r3, [sp, #4]
 800ed0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ed0e:	9300      	str	r3, [sp, #0]
 800ed10:	4623      	mov	r3, r4
 800ed12:	f7f7 f82f 	bl	8005d74 <HAL_HCD_HC_SubmitRequest>
 800ed16:	4603      	mov	r3, r0
 800ed18:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ed1a:	7bfb      	ldrb	r3, [r7, #15]
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f000 f83d 	bl	800ed9c <USBH_Get_USB_Status>
 800ed22:	4603      	mov	r3, r0
 800ed24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed26:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed28:	4618      	mov	r0, r3
 800ed2a:	3714      	adds	r7, #20
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	bd90      	pop	{r4, r7, pc}

0800ed30 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b082      	sub	sp, #8
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
 800ed38:	460b      	mov	r3, r1
 800ed3a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ed42:	78fa      	ldrb	r2, [r7, #3]
 800ed44:	4611      	mov	r1, r2
 800ed46:	4618      	mov	r0, r3
 800ed48:	f7f7 fb10 	bl	800636c <HAL_HCD_HC_GetURBState>
 800ed4c:	4603      	mov	r3, r0
}
 800ed4e:	4618      	mov	r0, r3
 800ed50:	3708      	adds	r7, #8
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}

0800ed56 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ed56:	b580      	push	{r7, lr}
 800ed58:	b082      	sub	sp, #8
 800ed5a:	af00      	add	r7, sp, #0
 800ed5c:	6078      	str	r0, [r7, #4]
 800ed5e:	460b      	mov	r3, r1
 800ed60:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d103      	bne.n	800ed74 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800ed6c:	78fb      	ldrb	r3, [r7, #3]
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f000 f840 	bl	800edf4 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ed74:	20c8      	movs	r0, #200	; 0xc8
 800ed76:	f7f5 fdf7 	bl	8004968 <HAL_Delay>
  return USBH_OK;
 800ed7a:	2300      	movs	r3, #0
}
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	3708      	adds	r7, #8
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd80      	pop	{r7, pc}

0800ed84 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b082      	sub	sp, #8
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ed8c:	6878      	ldr	r0, [r7, #4]
 800ed8e:	f7f5 fdeb 	bl	8004968 <HAL_Delay>
}
 800ed92:	bf00      	nop
 800ed94:	3708      	adds	r7, #8
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}
	...

0800ed9c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ed9c:	b480      	push	{r7}
 800ed9e:	b085      	sub	sp, #20
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	4603      	mov	r3, r0
 800eda4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eda6:	2300      	movs	r3, #0
 800eda8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800edaa:	79fb      	ldrb	r3, [r7, #7]
 800edac:	2b03      	cmp	r3, #3
 800edae:	d817      	bhi.n	800ede0 <USBH_Get_USB_Status+0x44>
 800edb0:	a201      	add	r2, pc, #4	; (adr r2, 800edb8 <USBH_Get_USB_Status+0x1c>)
 800edb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edb6:	bf00      	nop
 800edb8:	0800edc9 	.word	0x0800edc9
 800edbc:	0800edcf 	.word	0x0800edcf
 800edc0:	0800edd5 	.word	0x0800edd5
 800edc4:	0800eddb 	.word	0x0800eddb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800edc8:	2300      	movs	r3, #0
 800edca:	73fb      	strb	r3, [r7, #15]
    break;
 800edcc:	e00b      	b.n	800ede6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800edce:	2302      	movs	r3, #2
 800edd0:	73fb      	strb	r3, [r7, #15]
    break;
 800edd2:	e008      	b.n	800ede6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800edd4:	2301      	movs	r3, #1
 800edd6:	73fb      	strb	r3, [r7, #15]
    break;
 800edd8:	e005      	b.n	800ede6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800edda:	2302      	movs	r3, #2
 800eddc:	73fb      	strb	r3, [r7, #15]
    break;
 800edde:	e002      	b.n	800ede6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ede0:	2302      	movs	r3, #2
 800ede2:	73fb      	strb	r3, [r7, #15]
    break;
 800ede4:	bf00      	nop
  }
  return usb_status;
 800ede6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ede8:	4618      	mov	r0, r3
 800edea:	3714      	adds	r7, #20
 800edec:	46bd      	mov	sp, r7
 800edee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf2:	4770      	bx	lr

0800edf4 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b084      	sub	sp, #16
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	4603      	mov	r3, r0
 800edfc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800edfe:	79fb      	ldrb	r3, [r7, #7]
 800ee00:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800ee02:	79fb      	ldrb	r3, [r7, #7]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d102      	bne.n	800ee0e <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800ee08:	2301      	movs	r3, #1
 800ee0a:	73fb      	strb	r3, [r7, #15]
 800ee0c:	e001      	b.n	800ee12 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800ee12:	7bfb      	ldrb	r3, [r7, #15]
 800ee14:	461a      	mov	r2, r3
 800ee16:	2110      	movs	r1, #16
 800ee18:	4803      	ldr	r0, [pc, #12]	; (800ee28 <MX_DriverVbusHS+0x34>)
 800ee1a:	f7f6 fed9 	bl	8005bd0 <HAL_GPIO_WritePin>
}
 800ee1e:	bf00      	nop
 800ee20:	3710      	adds	r7, #16
 800ee22:	46bd      	mov	sp, r7
 800ee24:	bd80      	pop	{r7, pc}
 800ee26:	bf00      	nop
 800ee28:	40020800 	.word	0x40020800

0800ee2c <malloc>:
 800ee2c:	4b02      	ldr	r3, [pc, #8]	; (800ee38 <malloc+0xc>)
 800ee2e:	4601      	mov	r1, r0
 800ee30:	6818      	ldr	r0, [r3, #0]
 800ee32:	f000 b823 	b.w	800ee7c <_malloc_r>
 800ee36:	bf00      	nop
 800ee38:	20002cd8 	.word	0x20002cd8

0800ee3c <sbrk_aligned>:
 800ee3c:	b570      	push	{r4, r5, r6, lr}
 800ee3e:	4e0e      	ldr	r6, [pc, #56]	; (800ee78 <sbrk_aligned+0x3c>)
 800ee40:	460c      	mov	r4, r1
 800ee42:	6831      	ldr	r1, [r6, #0]
 800ee44:	4605      	mov	r5, r0
 800ee46:	b911      	cbnz	r1, 800ee4e <sbrk_aligned+0x12>
 800ee48:	f000 fb9a 	bl	800f580 <_sbrk_r>
 800ee4c:	6030      	str	r0, [r6, #0]
 800ee4e:	4621      	mov	r1, r4
 800ee50:	4628      	mov	r0, r5
 800ee52:	f000 fb95 	bl	800f580 <_sbrk_r>
 800ee56:	1c43      	adds	r3, r0, #1
 800ee58:	d00a      	beq.n	800ee70 <sbrk_aligned+0x34>
 800ee5a:	1cc4      	adds	r4, r0, #3
 800ee5c:	f024 0403 	bic.w	r4, r4, #3
 800ee60:	42a0      	cmp	r0, r4
 800ee62:	d007      	beq.n	800ee74 <sbrk_aligned+0x38>
 800ee64:	1a21      	subs	r1, r4, r0
 800ee66:	4628      	mov	r0, r5
 800ee68:	f000 fb8a 	bl	800f580 <_sbrk_r>
 800ee6c:	3001      	adds	r0, #1
 800ee6e:	d101      	bne.n	800ee74 <sbrk_aligned+0x38>
 800ee70:	f04f 34ff 	mov.w	r4, #4294967295
 800ee74:	4620      	mov	r0, r4
 800ee76:	bd70      	pop	{r4, r5, r6, pc}
 800ee78:	200043ac 	.word	0x200043ac

0800ee7c <_malloc_r>:
 800ee7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee80:	1ccd      	adds	r5, r1, #3
 800ee82:	f025 0503 	bic.w	r5, r5, #3
 800ee86:	3508      	adds	r5, #8
 800ee88:	2d0c      	cmp	r5, #12
 800ee8a:	bf38      	it	cc
 800ee8c:	250c      	movcc	r5, #12
 800ee8e:	2d00      	cmp	r5, #0
 800ee90:	4607      	mov	r7, r0
 800ee92:	db01      	blt.n	800ee98 <_malloc_r+0x1c>
 800ee94:	42a9      	cmp	r1, r5
 800ee96:	d905      	bls.n	800eea4 <_malloc_r+0x28>
 800ee98:	230c      	movs	r3, #12
 800ee9a:	603b      	str	r3, [r7, #0]
 800ee9c:	2600      	movs	r6, #0
 800ee9e:	4630      	mov	r0, r6
 800eea0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eea4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ef78 <_malloc_r+0xfc>
 800eea8:	f000 f868 	bl	800ef7c <__malloc_lock>
 800eeac:	f8d8 3000 	ldr.w	r3, [r8]
 800eeb0:	461c      	mov	r4, r3
 800eeb2:	bb5c      	cbnz	r4, 800ef0c <_malloc_r+0x90>
 800eeb4:	4629      	mov	r1, r5
 800eeb6:	4638      	mov	r0, r7
 800eeb8:	f7ff ffc0 	bl	800ee3c <sbrk_aligned>
 800eebc:	1c43      	adds	r3, r0, #1
 800eebe:	4604      	mov	r4, r0
 800eec0:	d155      	bne.n	800ef6e <_malloc_r+0xf2>
 800eec2:	f8d8 4000 	ldr.w	r4, [r8]
 800eec6:	4626      	mov	r6, r4
 800eec8:	2e00      	cmp	r6, #0
 800eeca:	d145      	bne.n	800ef58 <_malloc_r+0xdc>
 800eecc:	2c00      	cmp	r4, #0
 800eece:	d048      	beq.n	800ef62 <_malloc_r+0xe6>
 800eed0:	6823      	ldr	r3, [r4, #0]
 800eed2:	4631      	mov	r1, r6
 800eed4:	4638      	mov	r0, r7
 800eed6:	eb04 0903 	add.w	r9, r4, r3
 800eeda:	f000 fb51 	bl	800f580 <_sbrk_r>
 800eede:	4581      	cmp	r9, r0
 800eee0:	d13f      	bne.n	800ef62 <_malloc_r+0xe6>
 800eee2:	6821      	ldr	r1, [r4, #0]
 800eee4:	1a6d      	subs	r5, r5, r1
 800eee6:	4629      	mov	r1, r5
 800eee8:	4638      	mov	r0, r7
 800eeea:	f7ff ffa7 	bl	800ee3c <sbrk_aligned>
 800eeee:	3001      	adds	r0, #1
 800eef0:	d037      	beq.n	800ef62 <_malloc_r+0xe6>
 800eef2:	6823      	ldr	r3, [r4, #0]
 800eef4:	442b      	add	r3, r5
 800eef6:	6023      	str	r3, [r4, #0]
 800eef8:	f8d8 3000 	ldr.w	r3, [r8]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d038      	beq.n	800ef72 <_malloc_r+0xf6>
 800ef00:	685a      	ldr	r2, [r3, #4]
 800ef02:	42a2      	cmp	r2, r4
 800ef04:	d12b      	bne.n	800ef5e <_malloc_r+0xe2>
 800ef06:	2200      	movs	r2, #0
 800ef08:	605a      	str	r2, [r3, #4]
 800ef0a:	e00f      	b.n	800ef2c <_malloc_r+0xb0>
 800ef0c:	6822      	ldr	r2, [r4, #0]
 800ef0e:	1b52      	subs	r2, r2, r5
 800ef10:	d41f      	bmi.n	800ef52 <_malloc_r+0xd6>
 800ef12:	2a0b      	cmp	r2, #11
 800ef14:	d917      	bls.n	800ef46 <_malloc_r+0xca>
 800ef16:	1961      	adds	r1, r4, r5
 800ef18:	42a3      	cmp	r3, r4
 800ef1a:	6025      	str	r5, [r4, #0]
 800ef1c:	bf18      	it	ne
 800ef1e:	6059      	strne	r1, [r3, #4]
 800ef20:	6863      	ldr	r3, [r4, #4]
 800ef22:	bf08      	it	eq
 800ef24:	f8c8 1000 	streq.w	r1, [r8]
 800ef28:	5162      	str	r2, [r4, r5]
 800ef2a:	604b      	str	r3, [r1, #4]
 800ef2c:	4638      	mov	r0, r7
 800ef2e:	f104 060b 	add.w	r6, r4, #11
 800ef32:	f000 f829 	bl	800ef88 <__malloc_unlock>
 800ef36:	f026 0607 	bic.w	r6, r6, #7
 800ef3a:	1d23      	adds	r3, r4, #4
 800ef3c:	1af2      	subs	r2, r6, r3
 800ef3e:	d0ae      	beq.n	800ee9e <_malloc_r+0x22>
 800ef40:	1b9b      	subs	r3, r3, r6
 800ef42:	50a3      	str	r3, [r4, r2]
 800ef44:	e7ab      	b.n	800ee9e <_malloc_r+0x22>
 800ef46:	42a3      	cmp	r3, r4
 800ef48:	6862      	ldr	r2, [r4, #4]
 800ef4a:	d1dd      	bne.n	800ef08 <_malloc_r+0x8c>
 800ef4c:	f8c8 2000 	str.w	r2, [r8]
 800ef50:	e7ec      	b.n	800ef2c <_malloc_r+0xb0>
 800ef52:	4623      	mov	r3, r4
 800ef54:	6864      	ldr	r4, [r4, #4]
 800ef56:	e7ac      	b.n	800eeb2 <_malloc_r+0x36>
 800ef58:	4634      	mov	r4, r6
 800ef5a:	6876      	ldr	r6, [r6, #4]
 800ef5c:	e7b4      	b.n	800eec8 <_malloc_r+0x4c>
 800ef5e:	4613      	mov	r3, r2
 800ef60:	e7cc      	b.n	800eefc <_malloc_r+0x80>
 800ef62:	230c      	movs	r3, #12
 800ef64:	603b      	str	r3, [r7, #0]
 800ef66:	4638      	mov	r0, r7
 800ef68:	f000 f80e 	bl	800ef88 <__malloc_unlock>
 800ef6c:	e797      	b.n	800ee9e <_malloc_r+0x22>
 800ef6e:	6025      	str	r5, [r4, #0]
 800ef70:	e7dc      	b.n	800ef2c <_malloc_r+0xb0>
 800ef72:	605b      	str	r3, [r3, #4]
 800ef74:	deff      	udf	#255	; 0xff
 800ef76:	bf00      	nop
 800ef78:	200043a8 	.word	0x200043a8

0800ef7c <__malloc_lock>:
 800ef7c:	4801      	ldr	r0, [pc, #4]	; (800ef84 <__malloc_lock+0x8>)
 800ef7e:	f000 bb4c 	b.w	800f61a <__retarget_lock_acquire_recursive>
 800ef82:	bf00      	nop
 800ef84:	200044f0 	.word	0x200044f0

0800ef88 <__malloc_unlock>:
 800ef88:	4801      	ldr	r0, [pc, #4]	; (800ef90 <__malloc_unlock+0x8>)
 800ef8a:	f000 bb47 	b.w	800f61c <__retarget_lock_release_recursive>
 800ef8e:	bf00      	nop
 800ef90:	200044f0 	.word	0x200044f0

0800ef94 <srand>:
 800ef94:	b538      	push	{r3, r4, r5, lr}
 800ef96:	4b10      	ldr	r3, [pc, #64]	; (800efd8 <srand+0x44>)
 800ef98:	681d      	ldr	r5, [r3, #0]
 800ef9a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800ef9c:	4604      	mov	r4, r0
 800ef9e:	b9b3      	cbnz	r3, 800efce <srand+0x3a>
 800efa0:	2018      	movs	r0, #24
 800efa2:	f7ff ff43 	bl	800ee2c <malloc>
 800efa6:	4602      	mov	r2, r0
 800efa8:	6328      	str	r0, [r5, #48]	; 0x30
 800efaa:	b920      	cbnz	r0, 800efb6 <srand+0x22>
 800efac:	4b0b      	ldr	r3, [pc, #44]	; (800efdc <srand+0x48>)
 800efae:	480c      	ldr	r0, [pc, #48]	; (800efe0 <srand+0x4c>)
 800efb0:	2146      	movs	r1, #70	; 0x46
 800efb2:	f000 fb43 	bl	800f63c <__assert_func>
 800efb6:	490b      	ldr	r1, [pc, #44]	; (800efe4 <srand+0x50>)
 800efb8:	4b0b      	ldr	r3, [pc, #44]	; (800efe8 <srand+0x54>)
 800efba:	e9c0 1300 	strd	r1, r3, [r0]
 800efbe:	4b0b      	ldr	r3, [pc, #44]	; (800efec <srand+0x58>)
 800efc0:	6083      	str	r3, [r0, #8]
 800efc2:	230b      	movs	r3, #11
 800efc4:	8183      	strh	r3, [r0, #12]
 800efc6:	2100      	movs	r1, #0
 800efc8:	2001      	movs	r0, #1
 800efca:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800efce:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800efd0:	2200      	movs	r2, #0
 800efd2:	611c      	str	r4, [r3, #16]
 800efd4:	615a      	str	r2, [r3, #20]
 800efd6:	bd38      	pop	{r3, r4, r5, pc}
 800efd8:	20002cd8 	.word	0x20002cd8
 800efdc:	08012c04 	.word	0x08012c04
 800efe0:	08012c1b 	.word	0x08012c1b
 800efe4:	abcd330e 	.word	0xabcd330e
 800efe8:	e66d1234 	.word	0xe66d1234
 800efec:	0005deec 	.word	0x0005deec

0800eff0 <rand>:
 800eff0:	4b16      	ldr	r3, [pc, #88]	; (800f04c <rand+0x5c>)
 800eff2:	b510      	push	{r4, lr}
 800eff4:	681c      	ldr	r4, [r3, #0]
 800eff6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800eff8:	b9b3      	cbnz	r3, 800f028 <rand+0x38>
 800effa:	2018      	movs	r0, #24
 800effc:	f7ff ff16 	bl	800ee2c <malloc>
 800f000:	4602      	mov	r2, r0
 800f002:	6320      	str	r0, [r4, #48]	; 0x30
 800f004:	b920      	cbnz	r0, 800f010 <rand+0x20>
 800f006:	4b12      	ldr	r3, [pc, #72]	; (800f050 <rand+0x60>)
 800f008:	4812      	ldr	r0, [pc, #72]	; (800f054 <rand+0x64>)
 800f00a:	2152      	movs	r1, #82	; 0x52
 800f00c:	f000 fb16 	bl	800f63c <__assert_func>
 800f010:	4911      	ldr	r1, [pc, #68]	; (800f058 <rand+0x68>)
 800f012:	4b12      	ldr	r3, [pc, #72]	; (800f05c <rand+0x6c>)
 800f014:	e9c0 1300 	strd	r1, r3, [r0]
 800f018:	4b11      	ldr	r3, [pc, #68]	; (800f060 <rand+0x70>)
 800f01a:	6083      	str	r3, [r0, #8]
 800f01c:	230b      	movs	r3, #11
 800f01e:	8183      	strh	r3, [r0, #12]
 800f020:	2100      	movs	r1, #0
 800f022:	2001      	movs	r0, #1
 800f024:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800f028:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f02a:	480e      	ldr	r0, [pc, #56]	; (800f064 <rand+0x74>)
 800f02c:	690b      	ldr	r3, [r1, #16]
 800f02e:	694c      	ldr	r4, [r1, #20]
 800f030:	4a0d      	ldr	r2, [pc, #52]	; (800f068 <rand+0x78>)
 800f032:	4358      	muls	r0, r3
 800f034:	fb02 0004 	mla	r0, r2, r4, r0
 800f038:	fba3 3202 	umull	r3, r2, r3, r2
 800f03c:	3301      	adds	r3, #1
 800f03e:	eb40 0002 	adc.w	r0, r0, r2
 800f042:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800f046:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f04a:	bd10      	pop	{r4, pc}
 800f04c:	20002cd8 	.word	0x20002cd8
 800f050:	08012c04 	.word	0x08012c04
 800f054:	08012c1b 	.word	0x08012c1b
 800f058:	abcd330e 	.word	0xabcd330e
 800f05c:	e66d1234 	.word	0xe66d1234
 800f060:	0005deec 	.word	0x0005deec
 800f064:	5851f42d 	.word	0x5851f42d
 800f068:	4c957f2d 	.word	0x4c957f2d

0800f06c <std>:
 800f06c:	2300      	movs	r3, #0
 800f06e:	b510      	push	{r4, lr}
 800f070:	4604      	mov	r4, r0
 800f072:	e9c0 3300 	strd	r3, r3, [r0]
 800f076:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f07a:	6083      	str	r3, [r0, #8]
 800f07c:	8181      	strh	r1, [r0, #12]
 800f07e:	6643      	str	r3, [r0, #100]	; 0x64
 800f080:	81c2      	strh	r2, [r0, #14]
 800f082:	6183      	str	r3, [r0, #24]
 800f084:	4619      	mov	r1, r3
 800f086:	2208      	movs	r2, #8
 800f088:	305c      	adds	r0, #92	; 0x5c
 800f08a:	f000 fa11 	bl	800f4b0 <memset>
 800f08e:	4b0d      	ldr	r3, [pc, #52]	; (800f0c4 <std+0x58>)
 800f090:	6263      	str	r3, [r4, #36]	; 0x24
 800f092:	4b0d      	ldr	r3, [pc, #52]	; (800f0c8 <std+0x5c>)
 800f094:	62a3      	str	r3, [r4, #40]	; 0x28
 800f096:	4b0d      	ldr	r3, [pc, #52]	; (800f0cc <std+0x60>)
 800f098:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f09a:	4b0d      	ldr	r3, [pc, #52]	; (800f0d0 <std+0x64>)
 800f09c:	6323      	str	r3, [r4, #48]	; 0x30
 800f09e:	4b0d      	ldr	r3, [pc, #52]	; (800f0d4 <std+0x68>)
 800f0a0:	6224      	str	r4, [r4, #32]
 800f0a2:	429c      	cmp	r4, r3
 800f0a4:	d006      	beq.n	800f0b4 <std+0x48>
 800f0a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f0aa:	4294      	cmp	r4, r2
 800f0ac:	d002      	beq.n	800f0b4 <std+0x48>
 800f0ae:	33d0      	adds	r3, #208	; 0xd0
 800f0b0:	429c      	cmp	r4, r3
 800f0b2:	d105      	bne.n	800f0c0 <std+0x54>
 800f0b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f0b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0bc:	f000 baac 	b.w	800f618 <__retarget_lock_init_recursive>
 800f0c0:	bd10      	pop	{r4, pc}
 800f0c2:	bf00      	nop
 800f0c4:	0800f301 	.word	0x0800f301
 800f0c8:	0800f323 	.word	0x0800f323
 800f0cc:	0800f35b 	.word	0x0800f35b
 800f0d0:	0800f37f 	.word	0x0800f37f
 800f0d4:	200043b0 	.word	0x200043b0

0800f0d8 <stdio_exit_handler>:
 800f0d8:	4a02      	ldr	r2, [pc, #8]	; (800f0e4 <stdio_exit_handler+0xc>)
 800f0da:	4903      	ldr	r1, [pc, #12]	; (800f0e8 <stdio_exit_handler+0x10>)
 800f0dc:	4803      	ldr	r0, [pc, #12]	; (800f0ec <stdio_exit_handler+0x14>)
 800f0de:	f000 b869 	b.w	800f1b4 <_fwalk_sglue>
 800f0e2:	bf00      	nop
 800f0e4:	20002c80 	.word	0x20002c80
 800f0e8:	080103cd 	.word	0x080103cd
 800f0ec:	20002c8c 	.word	0x20002c8c

0800f0f0 <cleanup_stdio>:
 800f0f0:	6841      	ldr	r1, [r0, #4]
 800f0f2:	4b0c      	ldr	r3, [pc, #48]	; (800f124 <cleanup_stdio+0x34>)
 800f0f4:	4299      	cmp	r1, r3
 800f0f6:	b510      	push	{r4, lr}
 800f0f8:	4604      	mov	r4, r0
 800f0fa:	d001      	beq.n	800f100 <cleanup_stdio+0x10>
 800f0fc:	f001 f966 	bl	80103cc <_fflush_r>
 800f100:	68a1      	ldr	r1, [r4, #8]
 800f102:	4b09      	ldr	r3, [pc, #36]	; (800f128 <cleanup_stdio+0x38>)
 800f104:	4299      	cmp	r1, r3
 800f106:	d002      	beq.n	800f10e <cleanup_stdio+0x1e>
 800f108:	4620      	mov	r0, r4
 800f10a:	f001 f95f 	bl	80103cc <_fflush_r>
 800f10e:	68e1      	ldr	r1, [r4, #12]
 800f110:	4b06      	ldr	r3, [pc, #24]	; (800f12c <cleanup_stdio+0x3c>)
 800f112:	4299      	cmp	r1, r3
 800f114:	d004      	beq.n	800f120 <cleanup_stdio+0x30>
 800f116:	4620      	mov	r0, r4
 800f118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f11c:	f001 b956 	b.w	80103cc <_fflush_r>
 800f120:	bd10      	pop	{r4, pc}
 800f122:	bf00      	nop
 800f124:	200043b0 	.word	0x200043b0
 800f128:	20004418 	.word	0x20004418
 800f12c:	20004480 	.word	0x20004480

0800f130 <global_stdio_init.part.0>:
 800f130:	b510      	push	{r4, lr}
 800f132:	4b0b      	ldr	r3, [pc, #44]	; (800f160 <global_stdio_init.part.0+0x30>)
 800f134:	4c0b      	ldr	r4, [pc, #44]	; (800f164 <global_stdio_init.part.0+0x34>)
 800f136:	4a0c      	ldr	r2, [pc, #48]	; (800f168 <global_stdio_init.part.0+0x38>)
 800f138:	601a      	str	r2, [r3, #0]
 800f13a:	4620      	mov	r0, r4
 800f13c:	2200      	movs	r2, #0
 800f13e:	2104      	movs	r1, #4
 800f140:	f7ff ff94 	bl	800f06c <std>
 800f144:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f148:	2201      	movs	r2, #1
 800f14a:	2109      	movs	r1, #9
 800f14c:	f7ff ff8e 	bl	800f06c <std>
 800f150:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f154:	2202      	movs	r2, #2
 800f156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f15a:	2112      	movs	r1, #18
 800f15c:	f7ff bf86 	b.w	800f06c <std>
 800f160:	200044e8 	.word	0x200044e8
 800f164:	200043b0 	.word	0x200043b0
 800f168:	0800f0d9 	.word	0x0800f0d9

0800f16c <__sfp_lock_acquire>:
 800f16c:	4801      	ldr	r0, [pc, #4]	; (800f174 <__sfp_lock_acquire+0x8>)
 800f16e:	f000 ba54 	b.w	800f61a <__retarget_lock_acquire_recursive>
 800f172:	bf00      	nop
 800f174:	200044f1 	.word	0x200044f1

0800f178 <__sfp_lock_release>:
 800f178:	4801      	ldr	r0, [pc, #4]	; (800f180 <__sfp_lock_release+0x8>)
 800f17a:	f000 ba4f 	b.w	800f61c <__retarget_lock_release_recursive>
 800f17e:	bf00      	nop
 800f180:	200044f1 	.word	0x200044f1

0800f184 <__sinit>:
 800f184:	b510      	push	{r4, lr}
 800f186:	4604      	mov	r4, r0
 800f188:	f7ff fff0 	bl	800f16c <__sfp_lock_acquire>
 800f18c:	6a23      	ldr	r3, [r4, #32]
 800f18e:	b11b      	cbz	r3, 800f198 <__sinit+0x14>
 800f190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f194:	f7ff bff0 	b.w	800f178 <__sfp_lock_release>
 800f198:	4b04      	ldr	r3, [pc, #16]	; (800f1ac <__sinit+0x28>)
 800f19a:	6223      	str	r3, [r4, #32]
 800f19c:	4b04      	ldr	r3, [pc, #16]	; (800f1b0 <__sinit+0x2c>)
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d1f5      	bne.n	800f190 <__sinit+0xc>
 800f1a4:	f7ff ffc4 	bl	800f130 <global_stdio_init.part.0>
 800f1a8:	e7f2      	b.n	800f190 <__sinit+0xc>
 800f1aa:	bf00      	nop
 800f1ac:	0800f0f1 	.word	0x0800f0f1
 800f1b0:	200044e8 	.word	0x200044e8

0800f1b4 <_fwalk_sglue>:
 800f1b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1b8:	4607      	mov	r7, r0
 800f1ba:	4688      	mov	r8, r1
 800f1bc:	4614      	mov	r4, r2
 800f1be:	2600      	movs	r6, #0
 800f1c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f1c4:	f1b9 0901 	subs.w	r9, r9, #1
 800f1c8:	d505      	bpl.n	800f1d6 <_fwalk_sglue+0x22>
 800f1ca:	6824      	ldr	r4, [r4, #0]
 800f1cc:	2c00      	cmp	r4, #0
 800f1ce:	d1f7      	bne.n	800f1c0 <_fwalk_sglue+0xc>
 800f1d0:	4630      	mov	r0, r6
 800f1d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1d6:	89ab      	ldrh	r3, [r5, #12]
 800f1d8:	2b01      	cmp	r3, #1
 800f1da:	d907      	bls.n	800f1ec <_fwalk_sglue+0x38>
 800f1dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f1e0:	3301      	adds	r3, #1
 800f1e2:	d003      	beq.n	800f1ec <_fwalk_sglue+0x38>
 800f1e4:	4629      	mov	r1, r5
 800f1e6:	4638      	mov	r0, r7
 800f1e8:	47c0      	blx	r8
 800f1ea:	4306      	orrs	r6, r0
 800f1ec:	3568      	adds	r5, #104	; 0x68
 800f1ee:	e7e9      	b.n	800f1c4 <_fwalk_sglue+0x10>

0800f1f0 <iprintf>:
 800f1f0:	b40f      	push	{r0, r1, r2, r3}
 800f1f2:	b507      	push	{r0, r1, r2, lr}
 800f1f4:	4906      	ldr	r1, [pc, #24]	; (800f210 <iprintf+0x20>)
 800f1f6:	ab04      	add	r3, sp, #16
 800f1f8:	6808      	ldr	r0, [r1, #0]
 800f1fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1fe:	6881      	ldr	r1, [r0, #8]
 800f200:	9301      	str	r3, [sp, #4]
 800f202:	f000 faaf 	bl	800f764 <_vfiprintf_r>
 800f206:	b003      	add	sp, #12
 800f208:	f85d eb04 	ldr.w	lr, [sp], #4
 800f20c:	b004      	add	sp, #16
 800f20e:	4770      	bx	lr
 800f210:	20002cd8 	.word	0x20002cd8

0800f214 <putchar>:
 800f214:	4b02      	ldr	r3, [pc, #8]	; (800f220 <putchar+0xc>)
 800f216:	4601      	mov	r1, r0
 800f218:	6818      	ldr	r0, [r3, #0]
 800f21a:	6882      	ldr	r2, [r0, #8]
 800f21c:	f001 b972 	b.w	8010504 <_putc_r>
 800f220:	20002cd8 	.word	0x20002cd8

0800f224 <_puts_r>:
 800f224:	6a03      	ldr	r3, [r0, #32]
 800f226:	b570      	push	{r4, r5, r6, lr}
 800f228:	6884      	ldr	r4, [r0, #8]
 800f22a:	4605      	mov	r5, r0
 800f22c:	460e      	mov	r6, r1
 800f22e:	b90b      	cbnz	r3, 800f234 <_puts_r+0x10>
 800f230:	f7ff ffa8 	bl	800f184 <__sinit>
 800f234:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f236:	07db      	lsls	r3, r3, #31
 800f238:	d405      	bmi.n	800f246 <_puts_r+0x22>
 800f23a:	89a3      	ldrh	r3, [r4, #12]
 800f23c:	0598      	lsls	r0, r3, #22
 800f23e:	d402      	bmi.n	800f246 <_puts_r+0x22>
 800f240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f242:	f000 f9ea 	bl	800f61a <__retarget_lock_acquire_recursive>
 800f246:	89a3      	ldrh	r3, [r4, #12]
 800f248:	0719      	lsls	r1, r3, #28
 800f24a:	d513      	bpl.n	800f274 <_puts_r+0x50>
 800f24c:	6923      	ldr	r3, [r4, #16]
 800f24e:	b18b      	cbz	r3, 800f274 <_puts_r+0x50>
 800f250:	3e01      	subs	r6, #1
 800f252:	68a3      	ldr	r3, [r4, #8]
 800f254:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f258:	3b01      	subs	r3, #1
 800f25a:	60a3      	str	r3, [r4, #8]
 800f25c:	b9e9      	cbnz	r1, 800f29a <_puts_r+0x76>
 800f25e:	2b00      	cmp	r3, #0
 800f260:	da2e      	bge.n	800f2c0 <_puts_r+0x9c>
 800f262:	4622      	mov	r2, r4
 800f264:	210a      	movs	r1, #10
 800f266:	4628      	mov	r0, r5
 800f268:	f000 f88d 	bl	800f386 <__swbuf_r>
 800f26c:	3001      	adds	r0, #1
 800f26e:	d007      	beq.n	800f280 <_puts_r+0x5c>
 800f270:	250a      	movs	r5, #10
 800f272:	e007      	b.n	800f284 <_puts_r+0x60>
 800f274:	4621      	mov	r1, r4
 800f276:	4628      	mov	r0, r5
 800f278:	f000 f8c2 	bl	800f400 <__swsetup_r>
 800f27c:	2800      	cmp	r0, #0
 800f27e:	d0e7      	beq.n	800f250 <_puts_r+0x2c>
 800f280:	f04f 35ff 	mov.w	r5, #4294967295
 800f284:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f286:	07da      	lsls	r2, r3, #31
 800f288:	d405      	bmi.n	800f296 <_puts_r+0x72>
 800f28a:	89a3      	ldrh	r3, [r4, #12]
 800f28c:	059b      	lsls	r3, r3, #22
 800f28e:	d402      	bmi.n	800f296 <_puts_r+0x72>
 800f290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f292:	f000 f9c3 	bl	800f61c <__retarget_lock_release_recursive>
 800f296:	4628      	mov	r0, r5
 800f298:	bd70      	pop	{r4, r5, r6, pc}
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	da04      	bge.n	800f2a8 <_puts_r+0x84>
 800f29e:	69a2      	ldr	r2, [r4, #24]
 800f2a0:	429a      	cmp	r2, r3
 800f2a2:	dc06      	bgt.n	800f2b2 <_puts_r+0x8e>
 800f2a4:	290a      	cmp	r1, #10
 800f2a6:	d004      	beq.n	800f2b2 <_puts_r+0x8e>
 800f2a8:	6823      	ldr	r3, [r4, #0]
 800f2aa:	1c5a      	adds	r2, r3, #1
 800f2ac:	6022      	str	r2, [r4, #0]
 800f2ae:	7019      	strb	r1, [r3, #0]
 800f2b0:	e7cf      	b.n	800f252 <_puts_r+0x2e>
 800f2b2:	4622      	mov	r2, r4
 800f2b4:	4628      	mov	r0, r5
 800f2b6:	f000 f866 	bl	800f386 <__swbuf_r>
 800f2ba:	3001      	adds	r0, #1
 800f2bc:	d1c9      	bne.n	800f252 <_puts_r+0x2e>
 800f2be:	e7df      	b.n	800f280 <_puts_r+0x5c>
 800f2c0:	6823      	ldr	r3, [r4, #0]
 800f2c2:	250a      	movs	r5, #10
 800f2c4:	1c5a      	adds	r2, r3, #1
 800f2c6:	6022      	str	r2, [r4, #0]
 800f2c8:	701d      	strb	r5, [r3, #0]
 800f2ca:	e7db      	b.n	800f284 <_puts_r+0x60>

0800f2cc <puts>:
 800f2cc:	4b02      	ldr	r3, [pc, #8]	; (800f2d8 <puts+0xc>)
 800f2ce:	4601      	mov	r1, r0
 800f2d0:	6818      	ldr	r0, [r3, #0]
 800f2d2:	f7ff bfa7 	b.w	800f224 <_puts_r>
 800f2d6:	bf00      	nop
 800f2d8:	20002cd8 	.word	0x20002cd8

0800f2dc <iscanf>:
 800f2dc:	b40f      	push	{r0, r1, r2, r3}
 800f2de:	b507      	push	{r0, r1, r2, lr}
 800f2e0:	4906      	ldr	r1, [pc, #24]	; (800f2fc <iscanf+0x20>)
 800f2e2:	ab04      	add	r3, sp, #16
 800f2e4:	6808      	ldr	r0, [r1, #0]
 800f2e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2ea:	6841      	ldr	r1, [r0, #4]
 800f2ec:	9301      	str	r3, [sp, #4]
 800f2ee:	f000 fe85 	bl	800fffc <_vfiscanf_r>
 800f2f2:	b003      	add	sp, #12
 800f2f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2f8:	b004      	add	sp, #16
 800f2fa:	4770      	bx	lr
 800f2fc:	20002cd8 	.word	0x20002cd8

0800f300 <__sread>:
 800f300:	b510      	push	{r4, lr}
 800f302:	460c      	mov	r4, r1
 800f304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f308:	f000 f928 	bl	800f55c <_read_r>
 800f30c:	2800      	cmp	r0, #0
 800f30e:	bfab      	itete	ge
 800f310:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f312:	89a3      	ldrhlt	r3, [r4, #12]
 800f314:	181b      	addge	r3, r3, r0
 800f316:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f31a:	bfac      	ite	ge
 800f31c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f31e:	81a3      	strhlt	r3, [r4, #12]
 800f320:	bd10      	pop	{r4, pc}

0800f322 <__swrite>:
 800f322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f326:	461f      	mov	r7, r3
 800f328:	898b      	ldrh	r3, [r1, #12]
 800f32a:	05db      	lsls	r3, r3, #23
 800f32c:	4605      	mov	r5, r0
 800f32e:	460c      	mov	r4, r1
 800f330:	4616      	mov	r6, r2
 800f332:	d505      	bpl.n	800f340 <__swrite+0x1e>
 800f334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f338:	2302      	movs	r3, #2
 800f33a:	2200      	movs	r2, #0
 800f33c:	f000 f8fc 	bl	800f538 <_lseek_r>
 800f340:	89a3      	ldrh	r3, [r4, #12]
 800f342:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f346:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f34a:	81a3      	strh	r3, [r4, #12]
 800f34c:	4632      	mov	r2, r6
 800f34e:	463b      	mov	r3, r7
 800f350:	4628      	mov	r0, r5
 800f352:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f356:	f000 b923 	b.w	800f5a0 <_write_r>

0800f35a <__sseek>:
 800f35a:	b510      	push	{r4, lr}
 800f35c:	460c      	mov	r4, r1
 800f35e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f362:	f000 f8e9 	bl	800f538 <_lseek_r>
 800f366:	1c43      	adds	r3, r0, #1
 800f368:	89a3      	ldrh	r3, [r4, #12]
 800f36a:	bf15      	itete	ne
 800f36c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f36e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f372:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f376:	81a3      	strheq	r3, [r4, #12]
 800f378:	bf18      	it	ne
 800f37a:	81a3      	strhne	r3, [r4, #12]
 800f37c:	bd10      	pop	{r4, pc}

0800f37e <__sclose>:
 800f37e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f382:	f000 b8b7 	b.w	800f4f4 <_close_r>

0800f386 <__swbuf_r>:
 800f386:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f388:	460e      	mov	r6, r1
 800f38a:	4614      	mov	r4, r2
 800f38c:	4605      	mov	r5, r0
 800f38e:	b118      	cbz	r0, 800f398 <__swbuf_r+0x12>
 800f390:	6a03      	ldr	r3, [r0, #32]
 800f392:	b90b      	cbnz	r3, 800f398 <__swbuf_r+0x12>
 800f394:	f7ff fef6 	bl	800f184 <__sinit>
 800f398:	69a3      	ldr	r3, [r4, #24]
 800f39a:	60a3      	str	r3, [r4, #8]
 800f39c:	89a3      	ldrh	r3, [r4, #12]
 800f39e:	071a      	lsls	r2, r3, #28
 800f3a0:	d525      	bpl.n	800f3ee <__swbuf_r+0x68>
 800f3a2:	6923      	ldr	r3, [r4, #16]
 800f3a4:	b31b      	cbz	r3, 800f3ee <__swbuf_r+0x68>
 800f3a6:	6823      	ldr	r3, [r4, #0]
 800f3a8:	6922      	ldr	r2, [r4, #16]
 800f3aa:	1a98      	subs	r0, r3, r2
 800f3ac:	6963      	ldr	r3, [r4, #20]
 800f3ae:	b2f6      	uxtb	r6, r6
 800f3b0:	4283      	cmp	r3, r0
 800f3b2:	4637      	mov	r7, r6
 800f3b4:	dc04      	bgt.n	800f3c0 <__swbuf_r+0x3a>
 800f3b6:	4621      	mov	r1, r4
 800f3b8:	4628      	mov	r0, r5
 800f3ba:	f001 f807 	bl	80103cc <_fflush_r>
 800f3be:	b9e0      	cbnz	r0, 800f3fa <__swbuf_r+0x74>
 800f3c0:	68a3      	ldr	r3, [r4, #8]
 800f3c2:	3b01      	subs	r3, #1
 800f3c4:	60a3      	str	r3, [r4, #8]
 800f3c6:	6823      	ldr	r3, [r4, #0]
 800f3c8:	1c5a      	adds	r2, r3, #1
 800f3ca:	6022      	str	r2, [r4, #0]
 800f3cc:	701e      	strb	r6, [r3, #0]
 800f3ce:	6962      	ldr	r2, [r4, #20]
 800f3d0:	1c43      	adds	r3, r0, #1
 800f3d2:	429a      	cmp	r2, r3
 800f3d4:	d004      	beq.n	800f3e0 <__swbuf_r+0x5a>
 800f3d6:	89a3      	ldrh	r3, [r4, #12]
 800f3d8:	07db      	lsls	r3, r3, #31
 800f3da:	d506      	bpl.n	800f3ea <__swbuf_r+0x64>
 800f3dc:	2e0a      	cmp	r6, #10
 800f3de:	d104      	bne.n	800f3ea <__swbuf_r+0x64>
 800f3e0:	4621      	mov	r1, r4
 800f3e2:	4628      	mov	r0, r5
 800f3e4:	f000 fff2 	bl	80103cc <_fflush_r>
 800f3e8:	b938      	cbnz	r0, 800f3fa <__swbuf_r+0x74>
 800f3ea:	4638      	mov	r0, r7
 800f3ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3ee:	4621      	mov	r1, r4
 800f3f0:	4628      	mov	r0, r5
 800f3f2:	f000 f805 	bl	800f400 <__swsetup_r>
 800f3f6:	2800      	cmp	r0, #0
 800f3f8:	d0d5      	beq.n	800f3a6 <__swbuf_r+0x20>
 800f3fa:	f04f 37ff 	mov.w	r7, #4294967295
 800f3fe:	e7f4      	b.n	800f3ea <__swbuf_r+0x64>

0800f400 <__swsetup_r>:
 800f400:	b538      	push	{r3, r4, r5, lr}
 800f402:	4b2a      	ldr	r3, [pc, #168]	; (800f4ac <__swsetup_r+0xac>)
 800f404:	4605      	mov	r5, r0
 800f406:	6818      	ldr	r0, [r3, #0]
 800f408:	460c      	mov	r4, r1
 800f40a:	b118      	cbz	r0, 800f414 <__swsetup_r+0x14>
 800f40c:	6a03      	ldr	r3, [r0, #32]
 800f40e:	b90b      	cbnz	r3, 800f414 <__swsetup_r+0x14>
 800f410:	f7ff feb8 	bl	800f184 <__sinit>
 800f414:	89a3      	ldrh	r3, [r4, #12]
 800f416:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f41a:	0718      	lsls	r0, r3, #28
 800f41c:	d422      	bmi.n	800f464 <__swsetup_r+0x64>
 800f41e:	06d9      	lsls	r1, r3, #27
 800f420:	d407      	bmi.n	800f432 <__swsetup_r+0x32>
 800f422:	2309      	movs	r3, #9
 800f424:	602b      	str	r3, [r5, #0]
 800f426:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f42a:	81a3      	strh	r3, [r4, #12]
 800f42c:	f04f 30ff 	mov.w	r0, #4294967295
 800f430:	e034      	b.n	800f49c <__swsetup_r+0x9c>
 800f432:	0758      	lsls	r0, r3, #29
 800f434:	d512      	bpl.n	800f45c <__swsetup_r+0x5c>
 800f436:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f438:	b141      	cbz	r1, 800f44c <__swsetup_r+0x4c>
 800f43a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f43e:	4299      	cmp	r1, r3
 800f440:	d002      	beq.n	800f448 <__swsetup_r+0x48>
 800f442:	4628      	mov	r0, r5
 800f444:	f000 f918 	bl	800f678 <_free_r>
 800f448:	2300      	movs	r3, #0
 800f44a:	6363      	str	r3, [r4, #52]	; 0x34
 800f44c:	89a3      	ldrh	r3, [r4, #12]
 800f44e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f452:	81a3      	strh	r3, [r4, #12]
 800f454:	2300      	movs	r3, #0
 800f456:	6063      	str	r3, [r4, #4]
 800f458:	6923      	ldr	r3, [r4, #16]
 800f45a:	6023      	str	r3, [r4, #0]
 800f45c:	89a3      	ldrh	r3, [r4, #12]
 800f45e:	f043 0308 	orr.w	r3, r3, #8
 800f462:	81a3      	strh	r3, [r4, #12]
 800f464:	6923      	ldr	r3, [r4, #16]
 800f466:	b94b      	cbnz	r3, 800f47c <__swsetup_r+0x7c>
 800f468:	89a3      	ldrh	r3, [r4, #12]
 800f46a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f46e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f472:	d003      	beq.n	800f47c <__swsetup_r+0x7c>
 800f474:	4621      	mov	r1, r4
 800f476:	4628      	mov	r0, r5
 800f478:	f001 f808 	bl	801048c <__smakebuf_r>
 800f47c:	89a0      	ldrh	r0, [r4, #12]
 800f47e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f482:	f010 0301 	ands.w	r3, r0, #1
 800f486:	d00a      	beq.n	800f49e <__swsetup_r+0x9e>
 800f488:	2300      	movs	r3, #0
 800f48a:	60a3      	str	r3, [r4, #8]
 800f48c:	6963      	ldr	r3, [r4, #20]
 800f48e:	425b      	negs	r3, r3
 800f490:	61a3      	str	r3, [r4, #24]
 800f492:	6923      	ldr	r3, [r4, #16]
 800f494:	b943      	cbnz	r3, 800f4a8 <__swsetup_r+0xa8>
 800f496:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f49a:	d1c4      	bne.n	800f426 <__swsetup_r+0x26>
 800f49c:	bd38      	pop	{r3, r4, r5, pc}
 800f49e:	0781      	lsls	r1, r0, #30
 800f4a0:	bf58      	it	pl
 800f4a2:	6963      	ldrpl	r3, [r4, #20]
 800f4a4:	60a3      	str	r3, [r4, #8]
 800f4a6:	e7f4      	b.n	800f492 <__swsetup_r+0x92>
 800f4a8:	2000      	movs	r0, #0
 800f4aa:	e7f7      	b.n	800f49c <__swsetup_r+0x9c>
 800f4ac:	20002cd8 	.word	0x20002cd8

0800f4b0 <memset>:
 800f4b0:	4402      	add	r2, r0
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	4293      	cmp	r3, r2
 800f4b6:	d100      	bne.n	800f4ba <memset+0xa>
 800f4b8:	4770      	bx	lr
 800f4ba:	f803 1b01 	strb.w	r1, [r3], #1
 800f4be:	e7f9      	b.n	800f4b4 <memset+0x4>

0800f4c0 <time>:
 800f4c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f4c2:	4b0b      	ldr	r3, [pc, #44]	; (800f4f0 <time+0x30>)
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	4669      	mov	r1, sp
 800f4c8:	4604      	mov	r4, r0
 800f4ca:	6818      	ldr	r0, [r3, #0]
 800f4cc:	f000 f822 	bl	800f514 <_gettimeofday_r>
 800f4d0:	2800      	cmp	r0, #0
 800f4d2:	bfbe      	ittt	lt
 800f4d4:	f04f 32ff 	movlt.w	r2, #4294967295
 800f4d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800f4dc:	e9cd 2300 	strdlt	r2, r3, [sp]
 800f4e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f4e4:	b10c      	cbz	r4, 800f4ea <time+0x2a>
 800f4e6:	e9c4 0100 	strd	r0, r1, [r4]
 800f4ea:	b004      	add	sp, #16
 800f4ec:	bd10      	pop	{r4, pc}
 800f4ee:	bf00      	nop
 800f4f0:	20002cd8 	.word	0x20002cd8

0800f4f4 <_close_r>:
 800f4f4:	b538      	push	{r3, r4, r5, lr}
 800f4f6:	4d06      	ldr	r5, [pc, #24]	; (800f510 <_close_r+0x1c>)
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	4604      	mov	r4, r0
 800f4fc:	4608      	mov	r0, r1
 800f4fe:	602b      	str	r3, [r5, #0]
 800f500:	f7f3 f969 	bl	80027d6 <_close>
 800f504:	1c43      	adds	r3, r0, #1
 800f506:	d102      	bne.n	800f50e <_close_r+0x1a>
 800f508:	682b      	ldr	r3, [r5, #0]
 800f50a:	b103      	cbz	r3, 800f50e <_close_r+0x1a>
 800f50c:	6023      	str	r3, [r4, #0]
 800f50e:	bd38      	pop	{r3, r4, r5, pc}
 800f510:	200044ec 	.word	0x200044ec

0800f514 <_gettimeofday_r>:
 800f514:	b538      	push	{r3, r4, r5, lr}
 800f516:	4d07      	ldr	r5, [pc, #28]	; (800f534 <_gettimeofday_r+0x20>)
 800f518:	2300      	movs	r3, #0
 800f51a:	4604      	mov	r4, r0
 800f51c:	4608      	mov	r0, r1
 800f51e:	4611      	mov	r1, r2
 800f520:	602b      	str	r3, [r5, #0]
 800f522:	f001 fb3d 	bl	8010ba0 <_gettimeofday>
 800f526:	1c43      	adds	r3, r0, #1
 800f528:	d102      	bne.n	800f530 <_gettimeofday_r+0x1c>
 800f52a:	682b      	ldr	r3, [r5, #0]
 800f52c:	b103      	cbz	r3, 800f530 <_gettimeofday_r+0x1c>
 800f52e:	6023      	str	r3, [r4, #0]
 800f530:	bd38      	pop	{r3, r4, r5, pc}
 800f532:	bf00      	nop
 800f534:	200044ec 	.word	0x200044ec

0800f538 <_lseek_r>:
 800f538:	b538      	push	{r3, r4, r5, lr}
 800f53a:	4d07      	ldr	r5, [pc, #28]	; (800f558 <_lseek_r+0x20>)
 800f53c:	4604      	mov	r4, r0
 800f53e:	4608      	mov	r0, r1
 800f540:	4611      	mov	r1, r2
 800f542:	2200      	movs	r2, #0
 800f544:	602a      	str	r2, [r5, #0]
 800f546:	461a      	mov	r2, r3
 800f548:	f7f3 f96c 	bl	8002824 <_lseek>
 800f54c:	1c43      	adds	r3, r0, #1
 800f54e:	d102      	bne.n	800f556 <_lseek_r+0x1e>
 800f550:	682b      	ldr	r3, [r5, #0]
 800f552:	b103      	cbz	r3, 800f556 <_lseek_r+0x1e>
 800f554:	6023      	str	r3, [r4, #0]
 800f556:	bd38      	pop	{r3, r4, r5, pc}
 800f558:	200044ec 	.word	0x200044ec

0800f55c <_read_r>:
 800f55c:	b538      	push	{r3, r4, r5, lr}
 800f55e:	4d07      	ldr	r5, [pc, #28]	; (800f57c <_read_r+0x20>)
 800f560:	4604      	mov	r4, r0
 800f562:	4608      	mov	r0, r1
 800f564:	4611      	mov	r1, r2
 800f566:	2200      	movs	r2, #0
 800f568:	602a      	str	r2, [r5, #0]
 800f56a:	461a      	mov	r2, r3
 800f56c:	f7f3 f8fa 	bl	8002764 <_read>
 800f570:	1c43      	adds	r3, r0, #1
 800f572:	d102      	bne.n	800f57a <_read_r+0x1e>
 800f574:	682b      	ldr	r3, [r5, #0]
 800f576:	b103      	cbz	r3, 800f57a <_read_r+0x1e>
 800f578:	6023      	str	r3, [r4, #0]
 800f57a:	bd38      	pop	{r3, r4, r5, pc}
 800f57c:	200044ec 	.word	0x200044ec

0800f580 <_sbrk_r>:
 800f580:	b538      	push	{r3, r4, r5, lr}
 800f582:	4d06      	ldr	r5, [pc, #24]	; (800f59c <_sbrk_r+0x1c>)
 800f584:	2300      	movs	r3, #0
 800f586:	4604      	mov	r4, r0
 800f588:	4608      	mov	r0, r1
 800f58a:	602b      	str	r3, [r5, #0]
 800f58c:	f7f3 f958 	bl	8002840 <_sbrk>
 800f590:	1c43      	adds	r3, r0, #1
 800f592:	d102      	bne.n	800f59a <_sbrk_r+0x1a>
 800f594:	682b      	ldr	r3, [r5, #0]
 800f596:	b103      	cbz	r3, 800f59a <_sbrk_r+0x1a>
 800f598:	6023      	str	r3, [r4, #0]
 800f59a:	bd38      	pop	{r3, r4, r5, pc}
 800f59c:	200044ec 	.word	0x200044ec

0800f5a0 <_write_r>:
 800f5a0:	b538      	push	{r3, r4, r5, lr}
 800f5a2:	4d07      	ldr	r5, [pc, #28]	; (800f5c0 <_write_r+0x20>)
 800f5a4:	4604      	mov	r4, r0
 800f5a6:	4608      	mov	r0, r1
 800f5a8:	4611      	mov	r1, r2
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	602a      	str	r2, [r5, #0]
 800f5ae:	461a      	mov	r2, r3
 800f5b0:	f7f3 f8f5 	bl	800279e <_write>
 800f5b4:	1c43      	adds	r3, r0, #1
 800f5b6:	d102      	bne.n	800f5be <_write_r+0x1e>
 800f5b8:	682b      	ldr	r3, [r5, #0]
 800f5ba:	b103      	cbz	r3, 800f5be <_write_r+0x1e>
 800f5bc:	6023      	str	r3, [r4, #0]
 800f5be:	bd38      	pop	{r3, r4, r5, pc}
 800f5c0:	200044ec 	.word	0x200044ec

0800f5c4 <__errno>:
 800f5c4:	4b01      	ldr	r3, [pc, #4]	; (800f5cc <__errno+0x8>)
 800f5c6:	6818      	ldr	r0, [r3, #0]
 800f5c8:	4770      	bx	lr
 800f5ca:	bf00      	nop
 800f5cc:	20002cd8 	.word	0x20002cd8

0800f5d0 <__libc_init_array>:
 800f5d0:	b570      	push	{r4, r5, r6, lr}
 800f5d2:	4d0d      	ldr	r5, [pc, #52]	; (800f608 <__libc_init_array+0x38>)
 800f5d4:	4c0d      	ldr	r4, [pc, #52]	; (800f60c <__libc_init_array+0x3c>)
 800f5d6:	1b64      	subs	r4, r4, r5
 800f5d8:	10a4      	asrs	r4, r4, #2
 800f5da:	2600      	movs	r6, #0
 800f5dc:	42a6      	cmp	r6, r4
 800f5de:	d109      	bne.n	800f5f4 <__libc_init_array+0x24>
 800f5e0:	4d0b      	ldr	r5, [pc, #44]	; (800f610 <__libc_init_array+0x40>)
 800f5e2:	4c0c      	ldr	r4, [pc, #48]	; (800f614 <__libc_init_array+0x44>)
 800f5e4:	f001 fae4 	bl	8010bb0 <_init>
 800f5e8:	1b64      	subs	r4, r4, r5
 800f5ea:	10a4      	asrs	r4, r4, #2
 800f5ec:	2600      	movs	r6, #0
 800f5ee:	42a6      	cmp	r6, r4
 800f5f0:	d105      	bne.n	800f5fe <__libc_init_array+0x2e>
 800f5f2:	bd70      	pop	{r4, r5, r6, pc}
 800f5f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f5f8:	4798      	blx	r3
 800f5fa:	3601      	adds	r6, #1
 800f5fc:	e7ee      	b.n	800f5dc <__libc_init_array+0xc>
 800f5fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800f602:	4798      	blx	r3
 800f604:	3601      	adds	r6, #1
 800f606:	e7f2      	b.n	800f5ee <__libc_init_array+0x1e>
 800f608:	08012e08 	.word	0x08012e08
 800f60c:	08012e08 	.word	0x08012e08
 800f610:	08012e08 	.word	0x08012e08
 800f614:	08012e0c 	.word	0x08012e0c

0800f618 <__retarget_lock_init_recursive>:
 800f618:	4770      	bx	lr

0800f61a <__retarget_lock_acquire_recursive>:
 800f61a:	4770      	bx	lr

0800f61c <__retarget_lock_release_recursive>:
 800f61c:	4770      	bx	lr

0800f61e <memcpy>:
 800f61e:	440a      	add	r2, r1
 800f620:	4291      	cmp	r1, r2
 800f622:	f100 33ff 	add.w	r3, r0, #4294967295
 800f626:	d100      	bne.n	800f62a <memcpy+0xc>
 800f628:	4770      	bx	lr
 800f62a:	b510      	push	{r4, lr}
 800f62c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f630:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f634:	4291      	cmp	r1, r2
 800f636:	d1f9      	bne.n	800f62c <memcpy+0xe>
 800f638:	bd10      	pop	{r4, pc}
	...

0800f63c <__assert_func>:
 800f63c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f63e:	4614      	mov	r4, r2
 800f640:	461a      	mov	r2, r3
 800f642:	4b09      	ldr	r3, [pc, #36]	; (800f668 <__assert_func+0x2c>)
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	4605      	mov	r5, r0
 800f648:	68d8      	ldr	r0, [r3, #12]
 800f64a:	b14c      	cbz	r4, 800f660 <__assert_func+0x24>
 800f64c:	4b07      	ldr	r3, [pc, #28]	; (800f66c <__assert_func+0x30>)
 800f64e:	9100      	str	r1, [sp, #0]
 800f650:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f654:	4906      	ldr	r1, [pc, #24]	; (800f670 <__assert_func+0x34>)
 800f656:	462b      	mov	r3, r5
 800f658:	f000 fee0 	bl	801041c <fiprintf>
 800f65c:	f001 f926 	bl	80108ac <abort>
 800f660:	4b04      	ldr	r3, [pc, #16]	; (800f674 <__assert_func+0x38>)
 800f662:	461c      	mov	r4, r3
 800f664:	e7f3      	b.n	800f64e <__assert_func+0x12>
 800f666:	bf00      	nop
 800f668:	20002cd8 	.word	0x20002cd8
 800f66c:	08012c73 	.word	0x08012c73
 800f670:	08012c80 	.word	0x08012c80
 800f674:	08012cae 	.word	0x08012cae

0800f678 <_free_r>:
 800f678:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f67a:	2900      	cmp	r1, #0
 800f67c:	d044      	beq.n	800f708 <_free_r+0x90>
 800f67e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f682:	9001      	str	r0, [sp, #4]
 800f684:	2b00      	cmp	r3, #0
 800f686:	f1a1 0404 	sub.w	r4, r1, #4
 800f68a:	bfb8      	it	lt
 800f68c:	18e4      	addlt	r4, r4, r3
 800f68e:	f7ff fc75 	bl	800ef7c <__malloc_lock>
 800f692:	4a1e      	ldr	r2, [pc, #120]	; (800f70c <_free_r+0x94>)
 800f694:	9801      	ldr	r0, [sp, #4]
 800f696:	6813      	ldr	r3, [r2, #0]
 800f698:	b933      	cbnz	r3, 800f6a8 <_free_r+0x30>
 800f69a:	6063      	str	r3, [r4, #4]
 800f69c:	6014      	str	r4, [r2, #0]
 800f69e:	b003      	add	sp, #12
 800f6a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f6a4:	f7ff bc70 	b.w	800ef88 <__malloc_unlock>
 800f6a8:	42a3      	cmp	r3, r4
 800f6aa:	d908      	bls.n	800f6be <_free_r+0x46>
 800f6ac:	6825      	ldr	r5, [r4, #0]
 800f6ae:	1961      	adds	r1, r4, r5
 800f6b0:	428b      	cmp	r3, r1
 800f6b2:	bf01      	itttt	eq
 800f6b4:	6819      	ldreq	r1, [r3, #0]
 800f6b6:	685b      	ldreq	r3, [r3, #4]
 800f6b8:	1949      	addeq	r1, r1, r5
 800f6ba:	6021      	streq	r1, [r4, #0]
 800f6bc:	e7ed      	b.n	800f69a <_free_r+0x22>
 800f6be:	461a      	mov	r2, r3
 800f6c0:	685b      	ldr	r3, [r3, #4]
 800f6c2:	b10b      	cbz	r3, 800f6c8 <_free_r+0x50>
 800f6c4:	42a3      	cmp	r3, r4
 800f6c6:	d9fa      	bls.n	800f6be <_free_r+0x46>
 800f6c8:	6811      	ldr	r1, [r2, #0]
 800f6ca:	1855      	adds	r5, r2, r1
 800f6cc:	42a5      	cmp	r5, r4
 800f6ce:	d10b      	bne.n	800f6e8 <_free_r+0x70>
 800f6d0:	6824      	ldr	r4, [r4, #0]
 800f6d2:	4421      	add	r1, r4
 800f6d4:	1854      	adds	r4, r2, r1
 800f6d6:	42a3      	cmp	r3, r4
 800f6d8:	6011      	str	r1, [r2, #0]
 800f6da:	d1e0      	bne.n	800f69e <_free_r+0x26>
 800f6dc:	681c      	ldr	r4, [r3, #0]
 800f6de:	685b      	ldr	r3, [r3, #4]
 800f6e0:	6053      	str	r3, [r2, #4]
 800f6e2:	440c      	add	r4, r1
 800f6e4:	6014      	str	r4, [r2, #0]
 800f6e6:	e7da      	b.n	800f69e <_free_r+0x26>
 800f6e8:	d902      	bls.n	800f6f0 <_free_r+0x78>
 800f6ea:	230c      	movs	r3, #12
 800f6ec:	6003      	str	r3, [r0, #0]
 800f6ee:	e7d6      	b.n	800f69e <_free_r+0x26>
 800f6f0:	6825      	ldr	r5, [r4, #0]
 800f6f2:	1961      	adds	r1, r4, r5
 800f6f4:	428b      	cmp	r3, r1
 800f6f6:	bf04      	itt	eq
 800f6f8:	6819      	ldreq	r1, [r3, #0]
 800f6fa:	685b      	ldreq	r3, [r3, #4]
 800f6fc:	6063      	str	r3, [r4, #4]
 800f6fe:	bf04      	itt	eq
 800f700:	1949      	addeq	r1, r1, r5
 800f702:	6021      	streq	r1, [r4, #0]
 800f704:	6054      	str	r4, [r2, #4]
 800f706:	e7ca      	b.n	800f69e <_free_r+0x26>
 800f708:	b003      	add	sp, #12
 800f70a:	bd30      	pop	{r4, r5, pc}
 800f70c:	200043a8 	.word	0x200043a8

0800f710 <__sfputc_r>:
 800f710:	6893      	ldr	r3, [r2, #8]
 800f712:	3b01      	subs	r3, #1
 800f714:	2b00      	cmp	r3, #0
 800f716:	b410      	push	{r4}
 800f718:	6093      	str	r3, [r2, #8]
 800f71a:	da08      	bge.n	800f72e <__sfputc_r+0x1e>
 800f71c:	6994      	ldr	r4, [r2, #24]
 800f71e:	42a3      	cmp	r3, r4
 800f720:	db01      	blt.n	800f726 <__sfputc_r+0x16>
 800f722:	290a      	cmp	r1, #10
 800f724:	d103      	bne.n	800f72e <__sfputc_r+0x1e>
 800f726:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f72a:	f7ff be2c 	b.w	800f386 <__swbuf_r>
 800f72e:	6813      	ldr	r3, [r2, #0]
 800f730:	1c58      	adds	r0, r3, #1
 800f732:	6010      	str	r0, [r2, #0]
 800f734:	7019      	strb	r1, [r3, #0]
 800f736:	4608      	mov	r0, r1
 800f738:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f73c:	4770      	bx	lr

0800f73e <__sfputs_r>:
 800f73e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f740:	4606      	mov	r6, r0
 800f742:	460f      	mov	r7, r1
 800f744:	4614      	mov	r4, r2
 800f746:	18d5      	adds	r5, r2, r3
 800f748:	42ac      	cmp	r4, r5
 800f74a:	d101      	bne.n	800f750 <__sfputs_r+0x12>
 800f74c:	2000      	movs	r0, #0
 800f74e:	e007      	b.n	800f760 <__sfputs_r+0x22>
 800f750:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f754:	463a      	mov	r2, r7
 800f756:	4630      	mov	r0, r6
 800f758:	f7ff ffda 	bl	800f710 <__sfputc_r>
 800f75c:	1c43      	adds	r3, r0, #1
 800f75e:	d1f3      	bne.n	800f748 <__sfputs_r+0xa>
 800f760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f764 <_vfiprintf_r>:
 800f764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f768:	460d      	mov	r5, r1
 800f76a:	b09d      	sub	sp, #116	; 0x74
 800f76c:	4614      	mov	r4, r2
 800f76e:	4698      	mov	r8, r3
 800f770:	4606      	mov	r6, r0
 800f772:	b118      	cbz	r0, 800f77c <_vfiprintf_r+0x18>
 800f774:	6a03      	ldr	r3, [r0, #32]
 800f776:	b90b      	cbnz	r3, 800f77c <_vfiprintf_r+0x18>
 800f778:	f7ff fd04 	bl	800f184 <__sinit>
 800f77c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f77e:	07d9      	lsls	r1, r3, #31
 800f780:	d405      	bmi.n	800f78e <_vfiprintf_r+0x2a>
 800f782:	89ab      	ldrh	r3, [r5, #12]
 800f784:	059a      	lsls	r2, r3, #22
 800f786:	d402      	bmi.n	800f78e <_vfiprintf_r+0x2a>
 800f788:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f78a:	f7ff ff46 	bl	800f61a <__retarget_lock_acquire_recursive>
 800f78e:	89ab      	ldrh	r3, [r5, #12]
 800f790:	071b      	lsls	r3, r3, #28
 800f792:	d501      	bpl.n	800f798 <_vfiprintf_r+0x34>
 800f794:	692b      	ldr	r3, [r5, #16]
 800f796:	b99b      	cbnz	r3, 800f7c0 <_vfiprintf_r+0x5c>
 800f798:	4629      	mov	r1, r5
 800f79a:	4630      	mov	r0, r6
 800f79c:	f7ff fe30 	bl	800f400 <__swsetup_r>
 800f7a0:	b170      	cbz	r0, 800f7c0 <_vfiprintf_r+0x5c>
 800f7a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f7a4:	07dc      	lsls	r4, r3, #31
 800f7a6:	d504      	bpl.n	800f7b2 <_vfiprintf_r+0x4e>
 800f7a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f7ac:	b01d      	add	sp, #116	; 0x74
 800f7ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7b2:	89ab      	ldrh	r3, [r5, #12]
 800f7b4:	0598      	lsls	r0, r3, #22
 800f7b6:	d4f7      	bmi.n	800f7a8 <_vfiprintf_r+0x44>
 800f7b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f7ba:	f7ff ff2f 	bl	800f61c <__retarget_lock_release_recursive>
 800f7be:	e7f3      	b.n	800f7a8 <_vfiprintf_r+0x44>
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	9309      	str	r3, [sp, #36]	; 0x24
 800f7c4:	2320      	movs	r3, #32
 800f7c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f7ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800f7ce:	2330      	movs	r3, #48	; 0x30
 800f7d0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f984 <_vfiprintf_r+0x220>
 800f7d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f7d8:	f04f 0901 	mov.w	r9, #1
 800f7dc:	4623      	mov	r3, r4
 800f7de:	469a      	mov	sl, r3
 800f7e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7e4:	b10a      	cbz	r2, 800f7ea <_vfiprintf_r+0x86>
 800f7e6:	2a25      	cmp	r2, #37	; 0x25
 800f7e8:	d1f9      	bne.n	800f7de <_vfiprintf_r+0x7a>
 800f7ea:	ebba 0b04 	subs.w	fp, sl, r4
 800f7ee:	d00b      	beq.n	800f808 <_vfiprintf_r+0xa4>
 800f7f0:	465b      	mov	r3, fp
 800f7f2:	4622      	mov	r2, r4
 800f7f4:	4629      	mov	r1, r5
 800f7f6:	4630      	mov	r0, r6
 800f7f8:	f7ff ffa1 	bl	800f73e <__sfputs_r>
 800f7fc:	3001      	adds	r0, #1
 800f7fe:	f000 80a9 	beq.w	800f954 <_vfiprintf_r+0x1f0>
 800f802:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f804:	445a      	add	r2, fp
 800f806:	9209      	str	r2, [sp, #36]	; 0x24
 800f808:	f89a 3000 	ldrb.w	r3, [sl]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	f000 80a1 	beq.w	800f954 <_vfiprintf_r+0x1f0>
 800f812:	2300      	movs	r3, #0
 800f814:	f04f 32ff 	mov.w	r2, #4294967295
 800f818:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f81c:	f10a 0a01 	add.w	sl, sl, #1
 800f820:	9304      	str	r3, [sp, #16]
 800f822:	9307      	str	r3, [sp, #28]
 800f824:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f828:	931a      	str	r3, [sp, #104]	; 0x68
 800f82a:	4654      	mov	r4, sl
 800f82c:	2205      	movs	r2, #5
 800f82e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f832:	4854      	ldr	r0, [pc, #336]	; (800f984 <_vfiprintf_r+0x220>)
 800f834:	f7f0 fcdc 	bl	80001f0 <memchr>
 800f838:	9a04      	ldr	r2, [sp, #16]
 800f83a:	b9d8      	cbnz	r0, 800f874 <_vfiprintf_r+0x110>
 800f83c:	06d1      	lsls	r1, r2, #27
 800f83e:	bf44      	itt	mi
 800f840:	2320      	movmi	r3, #32
 800f842:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f846:	0713      	lsls	r3, r2, #28
 800f848:	bf44      	itt	mi
 800f84a:	232b      	movmi	r3, #43	; 0x2b
 800f84c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f850:	f89a 3000 	ldrb.w	r3, [sl]
 800f854:	2b2a      	cmp	r3, #42	; 0x2a
 800f856:	d015      	beq.n	800f884 <_vfiprintf_r+0x120>
 800f858:	9a07      	ldr	r2, [sp, #28]
 800f85a:	4654      	mov	r4, sl
 800f85c:	2000      	movs	r0, #0
 800f85e:	f04f 0c0a 	mov.w	ip, #10
 800f862:	4621      	mov	r1, r4
 800f864:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f868:	3b30      	subs	r3, #48	; 0x30
 800f86a:	2b09      	cmp	r3, #9
 800f86c:	d94d      	bls.n	800f90a <_vfiprintf_r+0x1a6>
 800f86e:	b1b0      	cbz	r0, 800f89e <_vfiprintf_r+0x13a>
 800f870:	9207      	str	r2, [sp, #28]
 800f872:	e014      	b.n	800f89e <_vfiprintf_r+0x13a>
 800f874:	eba0 0308 	sub.w	r3, r0, r8
 800f878:	fa09 f303 	lsl.w	r3, r9, r3
 800f87c:	4313      	orrs	r3, r2
 800f87e:	9304      	str	r3, [sp, #16]
 800f880:	46a2      	mov	sl, r4
 800f882:	e7d2      	b.n	800f82a <_vfiprintf_r+0xc6>
 800f884:	9b03      	ldr	r3, [sp, #12]
 800f886:	1d19      	adds	r1, r3, #4
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	9103      	str	r1, [sp, #12]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	bfbb      	ittet	lt
 800f890:	425b      	neglt	r3, r3
 800f892:	f042 0202 	orrlt.w	r2, r2, #2
 800f896:	9307      	strge	r3, [sp, #28]
 800f898:	9307      	strlt	r3, [sp, #28]
 800f89a:	bfb8      	it	lt
 800f89c:	9204      	strlt	r2, [sp, #16]
 800f89e:	7823      	ldrb	r3, [r4, #0]
 800f8a0:	2b2e      	cmp	r3, #46	; 0x2e
 800f8a2:	d10c      	bne.n	800f8be <_vfiprintf_r+0x15a>
 800f8a4:	7863      	ldrb	r3, [r4, #1]
 800f8a6:	2b2a      	cmp	r3, #42	; 0x2a
 800f8a8:	d134      	bne.n	800f914 <_vfiprintf_r+0x1b0>
 800f8aa:	9b03      	ldr	r3, [sp, #12]
 800f8ac:	1d1a      	adds	r2, r3, #4
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	9203      	str	r2, [sp, #12]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	bfb8      	it	lt
 800f8b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800f8ba:	3402      	adds	r4, #2
 800f8bc:	9305      	str	r3, [sp, #20]
 800f8be:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f994 <_vfiprintf_r+0x230>
 800f8c2:	7821      	ldrb	r1, [r4, #0]
 800f8c4:	2203      	movs	r2, #3
 800f8c6:	4650      	mov	r0, sl
 800f8c8:	f7f0 fc92 	bl	80001f0 <memchr>
 800f8cc:	b138      	cbz	r0, 800f8de <_vfiprintf_r+0x17a>
 800f8ce:	9b04      	ldr	r3, [sp, #16]
 800f8d0:	eba0 000a 	sub.w	r0, r0, sl
 800f8d4:	2240      	movs	r2, #64	; 0x40
 800f8d6:	4082      	lsls	r2, r0
 800f8d8:	4313      	orrs	r3, r2
 800f8da:	3401      	adds	r4, #1
 800f8dc:	9304      	str	r3, [sp, #16]
 800f8de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8e2:	4829      	ldr	r0, [pc, #164]	; (800f988 <_vfiprintf_r+0x224>)
 800f8e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f8e8:	2206      	movs	r2, #6
 800f8ea:	f7f0 fc81 	bl	80001f0 <memchr>
 800f8ee:	2800      	cmp	r0, #0
 800f8f0:	d03f      	beq.n	800f972 <_vfiprintf_r+0x20e>
 800f8f2:	4b26      	ldr	r3, [pc, #152]	; (800f98c <_vfiprintf_r+0x228>)
 800f8f4:	bb1b      	cbnz	r3, 800f93e <_vfiprintf_r+0x1da>
 800f8f6:	9b03      	ldr	r3, [sp, #12]
 800f8f8:	3307      	adds	r3, #7
 800f8fa:	f023 0307 	bic.w	r3, r3, #7
 800f8fe:	3308      	adds	r3, #8
 800f900:	9303      	str	r3, [sp, #12]
 800f902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f904:	443b      	add	r3, r7
 800f906:	9309      	str	r3, [sp, #36]	; 0x24
 800f908:	e768      	b.n	800f7dc <_vfiprintf_r+0x78>
 800f90a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f90e:	460c      	mov	r4, r1
 800f910:	2001      	movs	r0, #1
 800f912:	e7a6      	b.n	800f862 <_vfiprintf_r+0xfe>
 800f914:	2300      	movs	r3, #0
 800f916:	3401      	adds	r4, #1
 800f918:	9305      	str	r3, [sp, #20]
 800f91a:	4619      	mov	r1, r3
 800f91c:	f04f 0c0a 	mov.w	ip, #10
 800f920:	4620      	mov	r0, r4
 800f922:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f926:	3a30      	subs	r2, #48	; 0x30
 800f928:	2a09      	cmp	r2, #9
 800f92a:	d903      	bls.n	800f934 <_vfiprintf_r+0x1d0>
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d0c6      	beq.n	800f8be <_vfiprintf_r+0x15a>
 800f930:	9105      	str	r1, [sp, #20]
 800f932:	e7c4      	b.n	800f8be <_vfiprintf_r+0x15a>
 800f934:	fb0c 2101 	mla	r1, ip, r1, r2
 800f938:	4604      	mov	r4, r0
 800f93a:	2301      	movs	r3, #1
 800f93c:	e7f0      	b.n	800f920 <_vfiprintf_r+0x1bc>
 800f93e:	ab03      	add	r3, sp, #12
 800f940:	9300      	str	r3, [sp, #0]
 800f942:	462a      	mov	r2, r5
 800f944:	4b12      	ldr	r3, [pc, #72]	; (800f990 <_vfiprintf_r+0x22c>)
 800f946:	a904      	add	r1, sp, #16
 800f948:	4630      	mov	r0, r6
 800f94a:	f3af 8000 	nop.w
 800f94e:	4607      	mov	r7, r0
 800f950:	1c78      	adds	r0, r7, #1
 800f952:	d1d6      	bne.n	800f902 <_vfiprintf_r+0x19e>
 800f954:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f956:	07d9      	lsls	r1, r3, #31
 800f958:	d405      	bmi.n	800f966 <_vfiprintf_r+0x202>
 800f95a:	89ab      	ldrh	r3, [r5, #12]
 800f95c:	059a      	lsls	r2, r3, #22
 800f95e:	d402      	bmi.n	800f966 <_vfiprintf_r+0x202>
 800f960:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f962:	f7ff fe5b 	bl	800f61c <__retarget_lock_release_recursive>
 800f966:	89ab      	ldrh	r3, [r5, #12]
 800f968:	065b      	lsls	r3, r3, #25
 800f96a:	f53f af1d 	bmi.w	800f7a8 <_vfiprintf_r+0x44>
 800f96e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f970:	e71c      	b.n	800f7ac <_vfiprintf_r+0x48>
 800f972:	ab03      	add	r3, sp, #12
 800f974:	9300      	str	r3, [sp, #0]
 800f976:	462a      	mov	r2, r5
 800f978:	4b05      	ldr	r3, [pc, #20]	; (800f990 <_vfiprintf_r+0x22c>)
 800f97a:	a904      	add	r1, sp, #16
 800f97c:	4630      	mov	r0, r6
 800f97e:	f000 f879 	bl	800fa74 <_printf_i>
 800f982:	e7e4      	b.n	800f94e <_vfiprintf_r+0x1ea>
 800f984:	08012caf 	.word	0x08012caf
 800f988:	08012cb9 	.word	0x08012cb9
 800f98c:	00000000 	.word	0x00000000
 800f990:	0800f73f 	.word	0x0800f73f
 800f994:	08012cb5 	.word	0x08012cb5

0800f998 <_printf_common>:
 800f998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f99c:	4616      	mov	r6, r2
 800f99e:	4699      	mov	r9, r3
 800f9a0:	688a      	ldr	r2, [r1, #8]
 800f9a2:	690b      	ldr	r3, [r1, #16]
 800f9a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f9a8:	4293      	cmp	r3, r2
 800f9aa:	bfb8      	it	lt
 800f9ac:	4613      	movlt	r3, r2
 800f9ae:	6033      	str	r3, [r6, #0]
 800f9b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f9b4:	4607      	mov	r7, r0
 800f9b6:	460c      	mov	r4, r1
 800f9b8:	b10a      	cbz	r2, 800f9be <_printf_common+0x26>
 800f9ba:	3301      	adds	r3, #1
 800f9bc:	6033      	str	r3, [r6, #0]
 800f9be:	6823      	ldr	r3, [r4, #0]
 800f9c0:	0699      	lsls	r1, r3, #26
 800f9c2:	bf42      	ittt	mi
 800f9c4:	6833      	ldrmi	r3, [r6, #0]
 800f9c6:	3302      	addmi	r3, #2
 800f9c8:	6033      	strmi	r3, [r6, #0]
 800f9ca:	6825      	ldr	r5, [r4, #0]
 800f9cc:	f015 0506 	ands.w	r5, r5, #6
 800f9d0:	d106      	bne.n	800f9e0 <_printf_common+0x48>
 800f9d2:	f104 0a19 	add.w	sl, r4, #25
 800f9d6:	68e3      	ldr	r3, [r4, #12]
 800f9d8:	6832      	ldr	r2, [r6, #0]
 800f9da:	1a9b      	subs	r3, r3, r2
 800f9dc:	42ab      	cmp	r3, r5
 800f9de:	dc26      	bgt.n	800fa2e <_printf_common+0x96>
 800f9e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f9e4:	1e13      	subs	r3, r2, #0
 800f9e6:	6822      	ldr	r2, [r4, #0]
 800f9e8:	bf18      	it	ne
 800f9ea:	2301      	movne	r3, #1
 800f9ec:	0692      	lsls	r2, r2, #26
 800f9ee:	d42b      	bmi.n	800fa48 <_printf_common+0xb0>
 800f9f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f9f4:	4649      	mov	r1, r9
 800f9f6:	4638      	mov	r0, r7
 800f9f8:	47c0      	blx	r8
 800f9fa:	3001      	adds	r0, #1
 800f9fc:	d01e      	beq.n	800fa3c <_printf_common+0xa4>
 800f9fe:	6823      	ldr	r3, [r4, #0]
 800fa00:	6922      	ldr	r2, [r4, #16]
 800fa02:	f003 0306 	and.w	r3, r3, #6
 800fa06:	2b04      	cmp	r3, #4
 800fa08:	bf02      	ittt	eq
 800fa0a:	68e5      	ldreq	r5, [r4, #12]
 800fa0c:	6833      	ldreq	r3, [r6, #0]
 800fa0e:	1aed      	subeq	r5, r5, r3
 800fa10:	68a3      	ldr	r3, [r4, #8]
 800fa12:	bf0c      	ite	eq
 800fa14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fa18:	2500      	movne	r5, #0
 800fa1a:	4293      	cmp	r3, r2
 800fa1c:	bfc4      	itt	gt
 800fa1e:	1a9b      	subgt	r3, r3, r2
 800fa20:	18ed      	addgt	r5, r5, r3
 800fa22:	2600      	movs	r6, #0
 800fa24:	341a      	adds	r4, #26
 800fa26:	42b5      	cmp	r5, r6
 800fa28:	d11a      	bne.n	800fa60 <_printf_common+0xc8>
 800fa2a:	2000      	movs	r0, #0
 800fa2c:	e008      	b.n	800fa40 <_printf_common+0xa8>
 800fa2e:	2301      	movs	r3, #1
 800fa30:	4652      	mov	r2, sl
 800fa32:	4649      	mov	r1, r9
 800fa34:	4638      	mov	r0, r7
 800fa36:	47c0      	blx	r8
 800fa38:	3001      	adds	r0, #1
 800fa3a:	d103      	bne.n	800fa44 <_printf_common+0xac>
 800fa3c:	f04f 30ff 	mov.w	r0, #4294967295
 800fa40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa44:	3501      	adds	r5, #1
 800fa46:	e7c6      	b.n	800f9d6 <_printf_common+0x3e>
 800fa48:	18e1      	adds	r1, r4, r3
 800fa4a:	1c5a      	adds	r2, r3, #1
 800fa4c:	2030      	movs	r0, #48	; 0x30
 800fa4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fa52:	4422      	add	r2, r4
 800fa54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fa58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fa5c:	3302      	adds	r3, #2
 800fa5e:	e7c7      	b.n	800f9f0 <_printf_common+0x58>
 800fa60:	2301      	movs	r3, #1
 800fa62:	4622      	mov	r2, r4
 800fa64:	4649      	mov	r1, r9
 800fa66:	4638      	mov	r0, r7
 800fa68:	47c0      	blx	r8
 800fa6a:	3001      	adds	r0, #1
 800fa6c:	d0e6      	beq.n	800fa3c <_printf_common+0xa4>
 800fa6e:	3601      	adds	r6, #1
 800fa70:	e7d9      	b.n	800fa26 <_printf_common+0x8e>
	...

0800fa74 <_printf_i>:
 800fa74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fa78:	7e0f      	ldrb	r7, [r1, #24]
 800fa7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fa7c:	2f78      	cmp	r7, #120	; 0x78
 800fa7e:	4691      	mov	r9, r2
 800fa80:	4680      	mov	r8, r0
 800fa82:	460c      	mov	r4, r1
 800fa84:	469a      	mov	sl, r3
 800fa86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fa8a:	d807      	bhi.n	800fa9c <_printf_i+0x28>
 800fa8c:	2f62      	cmp	r7, #98	; 0x62
 800fa8e:	d80a      	bhi.n	800faa6 <_printf_i+0x32>
 800fa90:	2f00      	cmp	r7, #0
 800fa92:	f000 80d4 	beq.w	800fc3e <_printf_i+0x1ca>
 800fa96:	2f58      	cmp	r7, #88	; 0x58
 800fa98:	f000 80c0 	beq.w	800fc1c <_printf_i+0x1a8>
 800fa9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800faa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800faa4:	e03a      	b.n	800fb1c <_printf_i+0xa8>
 800faa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800faaa:	2b15      	cmp	r3, #21
 800faac:	d8f6      	bhi.n	800fa9c <_printf_i+0x28>
 800faae:	a101      	add	r1, pc, #4	; (adr r1, 800fab4 <_printf_i+0x40>)
 800fab0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fab4:	0800fb0d 	.word	0x0800fb0d
 800fab8:	0800fb21 	.word	0x0800fb21
 800fabc:	0800fa9d 	.word	0x0800fa9d
 800fac0:	0800fa9d 	.word	0x0800fa9d
 800fac4:	0800fa9d 	.word	0x0800fa9d
 800fac8:	0800fa9d 	.word	0x0800fa9d
 800facc:	0800fb21 	.word	0x0800fb21
 800fad0:	0800fa9d 	.word	0x0800fa9d
 800fad4:	0800fa9d 	.word	0x0800fa9d
 800fad8:	0800fa9d 	.word	0x0800fa9d
 800fadc:	0800fa9d 	.word	0x0800fa9d
 800fae0:	0800fc25 	.word	0x0800fc25
 800fae4:	0800fb4d 	.word	0x0800fb4d
 800fae8:	0800fbdf 	.word	0x0800fbdf
 800faec:	0800fa9d 	.word	0x0800fa9d
 800faf0:	0800fa9d 	.word	0x0800fa9d
 800faf4:	0800fc47 	.word	0x0800fc47
 800faf8:	0800fa9d 	.word	0x0800fa9d
 800fafc:	0800fb4d 	.word	0x0800fb4d
 800fb00:	0800fa9d 	.word	0x0800fa9d
 800fb04:	0800fa9d 	.word	0x0800fa9d
 800fb08:	0800fbe7 	.word	0x0800fbe7
 800fb0c:	682b      	ldr	r3, [r5, #0]
 800fb0e:	1d1a      	adds	r2, r3, #4
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	602a      	str	r2, [r5, #0]
 800fb14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fb1c:	2301      	movs	r3, #1
 800fb1e:	e09f      	b.n	800fc60 <_printf_i+0x1ec>
 800fb20:	6820      	ldr	r0, [r4, #0]
 800fb22:	682b      	ldr	r3, [r5, #0]
 800fb24:	0607      	lsls	r7, r0, #24
 800fb26:	f103 0104 	add.w	r1, r3, #4
 800fb2a:	6029      	str	r1, [r5, #0]
 800fb2c:	d501      	bpl.n	800fb32 <_printf_i+0xbe>
 800fb2e:	681e      	ldr	r6, [r3, #0]
 800fb30:	e003      	b.n	800fb3a <_printf_i+0xc6>
 800fb32:	0646      	lsls	r6, r0, #25
 800fb34:	d5fb      	bpl.n	800fb2e <_printf_i+0xba>
 800fb36:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fb3a:	2e00      	cmp	r6, #0
 800fb3c:	da03      	bge.n	800fb46 <_printf_i+0xd2>
 800fb3e:	232d      	movs	r3, #45	; 0x2d
 800fb40:	4276      	negs	r6, r6
 800fb42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb46:	485a      	ldr	r0, [pc, #360]	; (800fcb0 <_printf_i+0x23c>)
 800fb48:	230a      	movs	r3, #10
 800fb4a:	e012      	b.n	800fb72 <_printf_i+0xfe>
 800fb4c:	682b      	ldr	r3, [r5, #0]
 800fb4e:	6820      	ldr	r0, [r4, #0]
 800fb50:	1d19      	adds	r1, r3, #4
 800fb52:	6029      	str	r1, [r5, #0]
 800fb54:	0605      	lsls	r5, r0, #24
 800fb56:	d501      	bpl.n	800fb5c <_printf_i+0xe8>
 800fb58:	681e      	ldr	r6, [r3, #0]
 800fb5a:	e002      	b.n	800fb62 <_printf_i+0xee>
 800fb5c:	0641      	lsls	r1, r0, #25
 800fb5e:	d5fb      	bpl.n	800fb58 <_printf_i+0xe4>
 800fb60:	881e      	ldrh	r6, [r3, #0]
 800fb62:	4853      	ldr	r0, [pc, #332]	; (800fcb0 <_printf_i+0x23c>)
 800fb64:	2f6f      	cmp	r7, #111	; 0x6f
 800fb66:	bf0c      	ite	eq
 800fb68:	2308      	moveq	r3, #8
 800fb6a:	230a      	movne	r3, #10
 800fb6c:	2100      	movs	r1, #0
 800fb6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fb72:	6865      	ldr	r5, [r4, #4]
 800fb74:	60a5      	str	r5, [r4, #8]
 800fb76:	2d00      	cmp	r5, #0
 800fb78:	bfa2      	ittt	ge
 800fb7a:	6821      	ldrge	r1, [r4, #0]
 800fb7c:	f021 0104 	bicge.w	r1, r1, #4
 800fb80:	6021      	strge	r1, [r4, #0]
 800fb82:	b90e      	cbnz	r6, 800fb88 <_printf_i+0x114>
 800fb84:	2d00      	cmp	r5, #0
 800fb86:	d04b      	beq.n	800fc20 <_printf_i+0x1ac>
 800fb88:	4615      	mov	r5, r2
 800fb8a:	fbb6 f1f3 	udiv	r1, r6, r3
 800fb8e:	fb03 6711 	mls	r7, r3, r1, r6
 800fb92:	5dc7      	ldrb	r7, [r0, r7]
 800fb94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fb98:	4637      	mov	r7, r6
 800fb9a:	42bb      	cmp	r3, r7
 800fb9c:	460e      	mov	r6, r1
 800fb9e:	d9f4      	bls.n	800fb8a <_printf_i+0x116>
 800fba0:	2b08      	cmp	r3, #8
 800fba2:	d10b      	bne.n	800fbbc <_printf_i+0x148>
 800fba4:	6823      	ldr	r3, [r4, #0]
 800fba6:	07de      	lsls	r6, r3, #31
 800fba8:	d508      	bpl.n	800fbbc <_printf_i+0x148>
 800fbaa:	6923      	ldr	r3, [r4, #16]
 800fbac:	6861      	ldr	r1, [r4, #4]
 800fbae:	4299      	cmp	r1, r3
 800fbb0:	bfde      	ittt	le
 800fbb2:	2330      	movle	r3, #48	; 0x30
 800fbb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fbb8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fbbc:	1b52      	subs	r2, r2, r5
 800fbbe:	6122      	str	r2, [r4, #16]
 800fbc0:	f8cd a000 	str.w	sl, [sp]
 800fbc4:	464b      	mov	r3, r9
 800fbc6:	aa03      	add	r2, sp, #12
 800fbc8:	4621      	mov	r1, r4
 800fbca:	4640      	mov	r0, r8
 800fbcc:	f7ff fee4 	bl	800f998 <_printf_common>
 800fbd0:	3001      	adds	r0, #1
 800fbd2:	d14a      	bne.n	800fc6a <_printf_i+0x1f6>
 800fbd4:	f04f 30ff 	mov.w	r0, #4294967295
 800fbd8:	b004      	add	sp, #16
 800fbda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbde:	6823      	ldr	r3, [r4, #0]
 800fbe0:	f043 0320 	orr.w	r3, r3, #32
 800fbe4:	6023      	str	r3, [r4, #0]
 800fbe6:	4833      	ldr	r0, [pc, #204]	; (800fcb4 <_printf_i+0x240>)
 800fbe8:	2778      	movs	r7, #120	; 0x78
 800fbea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fbee:	6823      	ldr	r3, [r4, #0]
 800fbf0:	6829      	ldr	r1, [r5, #0]
 800fbf2:	061f      	lsls	r7, r3, #24
 800fbf4:	f851 6b04 	ldr.w	r6, [r1], #4
 800fbf8:	d402      	bmi.n	800fc00 <_printf_i+0x18c>
 800fbfa:	065f      	lsls	r7, r3, #25
 800fbfc:	bf48      	it	mi
 800fbfe:	b2b6      	uxthmi	r6, r6
 800fc00:	07df      	lsls	r7, r3, #31
 800fc02:	bf48      	it	mi
 800fc04:	f043 0320 	orrmi.w	r3, r3, #32
 800fc08:	6029      	str	r1, [r5, #0]
 800fc0a:	bf48      	it	mi
 800fc0c:	6023      	strmi	r3, [r4, #0]
 800fc0e:	b91e      	cbnz	r6, 800fc18 <_printf_i+0x1a4>
 800fc10:	6823      	ldr	r3, [r4, #0]
 800fc12:	f023 0320 	bic.w	r3, r3, #32
 800fc16:	6023      	str	r3, [r4, #0]
 800fc18:	2310      	movs	r3, #16
 800fc1a:	e7a7      	b.n	800fb6c <_printf_i+0xf8>
 800fc1c:	4824      	ldr	r0, [pc, #144]	; (800fcb0 <_printf_i+0x23c>)
 800fc1e:	e7e4      	b.n	800fbea <_printf_i+0x176>
 800fc20:	4615      	mov	r5, r2
 800fc22:	e7bd      	b.n	800fba0 <_printf_i+0x12c>
 800fc24:	682b      	ldr	r3, [r5, #0]
 800fc26:	6826      	ldr	r6, [r4, #0]
 800fc28:	6961      	ldr	r1, [r4, #20]
 800fc2a:	1d18      	adds	r0, r3, #4
 800fc2c:	6028      	str	r0, [r5, #0]
 800fc2e:	0635      	lsls	r5, r6, #24
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	d501      	bpl.n	800fc38 <_printf_i+0x1c4>
 800fc34:	6019      	str	r1, [r3, #0]
 800fc36:	e002      	b.n	800fc3e <_printf_i+0x1ca>
 800fc38:	0670      	lsls	r0, r6, #25
 800fc3a:	d5fb      	bpl.n	800fc34 <_printf_i+0x1c0>
 800fc3c:	8019      	strh	r1, [r3, #0]
 800fc3e:	2300      	movs	r3, #0
 800fc40:	6123      	str	r3, [r4, #16]
 800fc42:	4615      	mov	r5, r2
 800fc44:	e7bc      	b.n	800fbc0 <_printf_i+0x14c>
 800fc46:	682b      	ldr	r3, [r5, #0]
 800fc48:	1d1a      	adds	r2, r3, #4
 800fc4a:	602a      	str	r2, [r5, #0]
 800fc4c:	681d      	ldr	r5, [r3, #0]
 800fc4e:	6862      	ldr	r2, [r4, #4]
 800fc50:	2100      	movs	r1, #0
 800fc52:	4628      	mov	r0, r5
 800fc54:	f7f0 facc 	bl	80001f0 <memchr>
 800fc58:	b108      	cbz	r0, 800fc5e <_printf_i+0x1ea>
 800fc5a:	1b40      	subs	r0, r0, r5
 800fc5c:	6060      	str	r0, [r4, #4]
 800fc5e:	6863      	ldr	r3, [r4, #4]
 800fc60:	6123      	str	r3, [r4, #16]
 800fc62:	2300      	movs	r3, #0
 800fc64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc68:	e7aa      	b.n	800fbc0 <_printf_i+0x14c>
 800fc6a:	6923      	ldr	r3, [r4, #16]
 800fc6c:	462a      	mov	r2, r5
 800fc6e:	4649      	mov	r1, r9
 800fc70:	4640      	mov	r0, r8
 800fc72:	47d0      	blx	sl
 800fc74:	3001      	adds	r0, #1
 800fc76:	d0ad      	beq.n	800fbd4 <_printf_i+0x160>
 800fc78:	6823      	ldr	r3, [r4, #0]
 800fc7a:	079b      	lsls	r3, r3, #30
 800fc7c:	d413      	bmi.n	800fca6 <_printf_i+0x232>
 800fc7e:	68e0      	ldr	r0, [r4, #12]
 800fc80:	9b03      	ldr	r3, [sp, #12]
 800fc82:	4298      	cmp	r0, r3
 800fc84:	bfb8      	it	lt
 800fc86:	4618      	movlt	r0, r3
 800fc88:	e7a6      	b.n	800fbd8 <_printf_i+0x164>
 800fc8a:	2301      	movs	r3, #1
 800fc8c:	4632      	mov	r2, r6
 800fc8e:	4649      	mov	r1, r9
 800fc90:	4640      	mov	r0, r8
 800fc92:	47d0      	blx	sl
 800fc94:	3001      	adds	r0, #1
 800fc96:	d09d      	beq.n	800fbd4 <_printf_i+0x160>
 800fc98:	3501      	adds	r5, #1
 800fc9a:	68e3      	ldr	r3, [r4, #12]
 800fc9c:	9903      	ldr	r1, [sp, #12]
 800fc9e:	1a5b      	subs	r3, r3, r1
 800fca0:	42ab      	cmp	r3, r5
 800fca2:	dcf2      	bgt.n	800fc8a <_printf_i+0x216>
 800fca4:	e7eb      	b.n	800fc7e <_printf_i+0x20a>
 800fca6:	2500      	movs	r5, #0
 800fca8:	f104 0619 	add.w	r6, r4, #25
 800fcac:	e7f5      	b.n	800fc9a <_printf_i+0x226>
 800fcae:	bf00      	nop
 800fcb0:	08012cc0 	.word	0x08012cc0
 800fcb4:	08012cd1 	.word	0x08012cd1

0800fcb8 <__svfiscanf_r>:
 800fcb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcbc:	461d      	mov	r5, r3
 800fcbe:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800fcc0:	07df      	lsls	r7, r3, #31
 800fcc2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800fcc6:	4606      	mov	r6, r0
 800fcc8:	460c      	mov	r4, r1
 800fcca:	4692      	mov	sl, r2
 800fccc:	d405      	bmi.n	800fcda <__svfiscanf_r+0x22>
 800fcce:	898b      	ldrh	r3, [r1, #12]
 800fcd0:	0598      	lsls	r0, r3, #22
 800fcd2:	d402      	bmi.n	800fcda <__svfiscanf_r+0x22>
 800fcd4:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800fcd6:	f7ff fca0 	bl	800f61a <__retarget_lock_acquire_recursive>
 800fcda:	2300      	movs	r3, #0
 800fcdc:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 800fce0:	4baa      	ldr	r3, [pc, #680]	; (800ff8c <__svfiscanf_r+0x2d4>)
 800fce2:	93a0      	str	r3, [sp, #640]	; 0x280
 800fce4:	f10d 0804 	add.w	r8, sp, #4
 800fce8:	4ba9      	ldr	r3, [pc, #676]	; (800ff90 <__svfiscanf_r+0x2d8>)
 800fcea:	4faa      	ldr	r7, [pc, #680]	; (800ff94 <__svfiscanf_r+0x2dc>)
 800fcec:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 800ff98 <__svfiscanf_r+0x2e0>
 800fcf0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800fcf4:	93a1      	str	r3, [sp, #644]	; 0x284
 800fcf6:	9500      	str	r5, [sp, #0]
 800fcf8:	f89a 3000 	ldrb.w	r3, [sl]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	f000 8170 	beq.w	800ffe2 <__svfiscanf_r+0x32a>
 800fd02:	5cf9      	ldrb	r1, [r7, r3]
 800fd04:	f011 0108 	ands.w	r1, r1, #8
 800fd08:	f10a 0501 	add.w	r5, sl, #1
 800fd0c:	d019      	beq.n	800fd42 <__svfiscanf_r+0x8a>
 800fd0e:	6863      	ldr	r3, [r4, #4]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	dd0f      	ble.n	800fd34 <__svfiscanf_r+0x7c>
 800fd14:	6823      	ldr	r3, [r4, #0]
 800fd16:	781a      	ldrb	r2, [r3, #0]
 800fd18:	5cba      	ldrb	r2, [r7, r2]
 800fd1a:	0711      	lsls	r1, r2, #28
 800fd1c:	d401      	bmi.n	800fd22 <__svfiscanf_r+0x6a>
 800fd1e:	46aa      	mov	sl, r5
 800fd20:	e7ea      	b.n	800fcf8 <__svfiscanf_r+0x40>
 800fd22:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800fd24:	3201      	adds	r2, #1
 800fd26:	9245      	str	r2, [sp, #276]	; 0x114
 800fd28:	6862      	ldr	r2, [r4, #4]
 800fd2a:	3301      	adds	r3, #1
 800fd2c:	3a01      	subs	r2, #1
 800fd2e:	6062      	str	r2, [r4, #4]
 800fd30:	6023      	str	r3, [r4, #0]
 800fd32:	e7ec      	b.n	800fd0e <__svfiscanf_r+0x56>
 800fd34:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fd36:	4621      	mov	r1, r4
 800fd38:	4630      	mov	r0, r6
 800fd3a:	4798      	blx	r3
 800fd3c:	2800      	cmp	r0, #0
 800fd3e:	d0e9      	beq.n	800fd14 <__svfiscanf_r+0x5c>
 800fd40:	e7ed      	b.n	800fd1e <__svfiscanf_r+0x66>
 800fd42:	2b25      	cmp	r3, #37	; 0x25
 800fd44:	d012      	beq.n	800fd6c <__svfiscanf_r+0xb4>
 800fd46:	469a      	mov	sl, r3
 800fd48:	6863      	ldr	r3, [r4, #4]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	f340 8093 	ble.w	800fe76 <__svfiscanf_r+0x1be>
 800fd50:	6822      	ldr	r2, [r4, #0]
 800fd52:	7813      	ldrb	r3, [r2, #0]
 800fd54:	4553      	cmp	r3, sl
 800fd56:	f040 8144 	bne.w	800ffe2 <__svfiscanf_r+0x32a>
 800fd5a:	6863      	ldr	r3, [r4, #4]
 800fd5c:	3b01      	subs	r3, #1
 800fd5e:	6063      	str	r3, [r4, #4]
 800fd60:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800fd62:	3201      	adds	r2, #1
 800fd64:	3301      	adds	r3, #1
 800fd66:	6022      	str	r2, [r4, #0]
 800fd68:	9345      	str	r3, [sp, #276]	; 0x114
 800fd6a:	e7d8      	b.n	800fd1e <__svfiscanf_r+0x66>
 800fd6c:	9141      	str	r1, [sp, #260]	; 0x104
 800fd6e:	9143      	str	r1, [sp, #268]	; 0x10c
 800fd70:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800fd74:	2b2a      	cmp	r3, #42	; 0x2a
 800fd76:	bf02      	ittt	eq
 800fd78:	2310      	moveq	r3, #16
 800fd7a:	9341      	streq	r3, [sp, #260]	; 0x104
 800fd7c:	f10a 0502 	addeq.w	r5, sl, #2
 800fd80:	220a      	movs	r2, #10
 800fd82:	46aa      	mov	sl, r5
 800fd84:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800fd88:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800fd8c:	2b09      	cmp	r3, #9
 800fd8e:	d91d      	bls.n	800fdcc <__svfiscanf_r+0x114>
 800fd90:	4881      	ldr	r0, [pc, #516]	; (800ff98 <__svfiscanf_r+0x2e0>)
 800fd92:	2203      	movs	r2, #3
 800fd94:	f7f0 fa2c 	bl	80001f0 <memchr>
 800fd98:	b138      	cbz	r0, 800fdaa <__svfiscanf_r+0xf2>
 800fd9a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800fd9c:	eba0 0009 	sub.w	r0, r0, r9
 800fda0:	2301      	movs	r3, #1
 800fda2:	4083      	lsls	r3, r0
 800fda4:	4313      	orrs	r3, r2
 800fda6:	9341      	str	r3, [sp, #260]	; 0x104
 800fda8:	4655      	mov	r5, sl
 800fdaa:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fdae:	2b78      	cmp	r3, #120	; 0x78
 800fdb0:	d807      	bhi.n	800fdc2 <__svfiscanf_r+0x10a>
 800fdb2:	2b57      	cmp	r3, #87	; 0x57
 800fdb4:	d811      	bhi.n	800fdda <__svfiscanf_r+0x122>
 800fdb6:	2b25      	cmp	r3, #37	; 0x25
 800fdb8:	d0c5      	beq.n	800fd46 <__svfiscanf_r+0x8e>
 800fdba:	d857      	bhi.n	800fe6c <__svfiscanf_r+0x1b4>
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	f000 80c6 	beq.w	800ff4e <__svfiscanf_r+0x296>
 800fdc2:	2303      	movs	r3, #3
 800fdc4:	9347      	str	r3, [sp, #284]	; 0x11c
 800fdc6:	230a      	movs	r3, #10
 800fdc8:	9342      	str	r3, [sp, #264]	; 0x108
 800fdca:	e07f      	b.n	800fecc <__svfiscanf_r+0x214>
 800fdcc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800fdce:	fb02 1103 	mla	r1, r2, r3, r1
 800fdd2:	3930      	subs	r1, #48	; 0x30
 800fdd4:	9143      	str	r1, [sp, #268]	; 0x10c
 800fdd6:	4655      	mov	r5, sl
 800fdd8:	e7d3      	b.n	800fd82 <__svfiscanf_r+0xca>
 800fdda:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800fdde:	2a20      	cmp	r2, #32
 800fde0:	d8ef      	bhi.n	800fdc2 <__svfiscanf_r+0x10a>
 800fde2:	a101      	add	r1, pc, #4	; (adr r1, 800fde8 <__svfiscanf_r+0x130>)
 800fde4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fde8:	0800feaf 	.word	0x0800feaf
 800fdec:	0800fdc3 	.word	0x0800fdc3
 800fdf0:	0800fdc3 	.word	0x0800fdc3
 800fdf4:	0800ff0d 	.word	0x0800ff0d
 800fdf8:	0800fdc3 	.word	0x0800fdc3
 800fdfc:	0800fdc3 	.word	0x0800fdc3
 800fe00:	0800fdc3 	.word	0x0800fdc3
 800fe04:	0800fdc3 	.word	0x0800fdc3
 800fe08:	0800fdc3 	.word	0x0800fdc3
 800fe0c:	0800fdc3 	.word	0x0800fdc3
 800fe10:	0800fdc3 	.word	0x0800fdc3
 800fe14:	0800ff23 	.word	0x0800ff23
 800fe18:	0800ff09 	.word	0x0800ff09
 800fe1c:	0800fe73 	.word	0x0800fe73
 800fe20:	0800fe73 	.word	0x0800fe73
 800fe24:	0800fe73 	.word	0x0800fe73
 800fe28:	0800fdc3 	.word	0x0800fdc3
 800fe2c:	0800fec5 	.word	0x0800fec5
 800fe30:	0800fdc3 	.word	0x0800fdc3
 800fe34:	0800fdc3 	.word	0x0800fdc3
 800fe38:	0800fdc3 	.word	0x0800fdc3
 800fe3c:	0800fdc3 	.word	0x0800fdc3
 800fe40:	0800ff33 	.word	0x0800ff33
 800fe44:	0800ff01 	.word	0x0800ff01
 800fe48:	0800fea7 	.word	0x0800fea7
 800fe4c:	0800fdc3 	.word	0x0800fdc3
 800fe50:	0800fdc3 	.word	0x0800fdc3
 800fe54:	0800ff2f 	.word	0x0800ff2f
 800fe58:	0800fdc3 	.word	0x0800fdc3
 800fe5c:	0800ff09 	.word	0x0800ff09
 800fe60:	0800fdc3 	.word	0x0800fdc3
 800fe64:	0800fdc3 	.word	0x0800fdc3
 800fe68:	0800feaf 	.word	0x0800feaf
 800fe6c:	3b45      	subs	r3, #69	; 0x45
 800fe6e:	2b02      	cmp	r3, #2
 800fe70:	d8a7      	bhi.n	800fdc2 <__svfiscanf_r+0x10a>
 800fe72:	2305      	movs	r3, #5
 800fe74:	e029      	b.n	800feca <__svfiscanf_r+0x212>
 800fe76:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fe78:	4621      	mov	r1, r4
 800fe7a:	4630      	mov	r0, r6
 800fe7c:	4798      	blx	r3
 800fe7e:	2800      	cmp	r0, #0
 800fe80:	f43f af66 	beq.w	800fd50 <__svfiscanf_r+0x98>
 800fe84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fe86:	07da      	lsls	r2, r3, #31
 800fe88:	f140 80a3 	bpl.w	800ffd2 <__svfiscanf_r+0x31a>
 800fe8c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800fe8e:	2800      	cmp	r0, #0
 800fe90:	d066      	beq.n	800ff60 <__svfiscanf_r+0x2a8>
 800fe92:	89a3      	ldrh	r3, [r4, #12]
 800fe94:	f013 0f40 	tst.w	r3, #64	; 0x40
 800fe98:	bf18      	it	ne
 800fe9a:	f04f 30ff 	movne.w	r0, #4294967295
 800fe9e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800fea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fea6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800fea8:	f042 0220 	orr.w	r2, r2, #32
 800feac:	9241      	str	r2, [sp, #260]	; 0x104
 800feae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800feb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800feb4:	9241      	str	r2, [sp, #260]	; 0x104
 800feb6:	2210      	movs	r2, #16
 800feb8:	2b6f      	cmp	r3, #111	; 0x6f
 800feba:	9242      	str	r2, [sp, #264]	; 0x108
 800febc:	bf34      	ite	cc
 800febe:	2303      	movcc	r3, #3
 800fec0:	2304      	movcs	r3, #4
 800fec2:	e002      	b.n	800feca <__svfiscanf_r+0x212>
 800fec4:	2300      	movs	r3, #0
 800fec6:	9342      	str	r3, [sp, #264]	; 0x108
 800fec8:	2303      	movs	r3, #3
 800feca:	9347      	str	r3, [sp, #284]	; 0x11c
 800fecc:	6863      	ldr	r3, [r4, #4]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	dd49      	ble.n	800ff66 <__svfiscanf_r+0x2ae>
 800fed2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fed4:	065b      	lsls	r3, r3, #25
 800fed6:	d404      	bmi.n	800fee2 <__svfiscanf_r+0x22a>
 800fed8:	6823      	ldr	r3, [r4, #0]
 800feda:	781a      	ldrb	r2, [r3, #0]
 800fedc:	5cba      	ldrb	r2, [r7, r2]
 800fede:	0710      	lsls	r0, r2, #28
 800fee0:	d448      	bmi.n	800ff74 <__svfiscanf_r+0x2bc>
 800fee2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800fee4:	2b02      	cmp	r3, #2
 800fee6:	dc60      	bgt.n	800ffaa <__svfiscanf_r+0x2f2>
 800fee8:	466b      	mov	r3, sp
 800feea:	4622      	mov	r2, r4
 800feec:	a941      	add	r1, sp, #260	; 0x104
 800feee:	4630      	mov	r0, r6
 800fef0:	f000 f898 	bl	8010024 <_scanf_chars>
 800fef4:	2801      	cmp	r0, #1
 800fef6:	d074      	beq.n	800ffe2 <__svfiscanf_r+0x32a>
 800fef8:	2802      	cmp	r0, #2
 800fefa:	f47f af10 	bne.w	800fd1e <__svfiscanf_r+0x66>
 800fefe:	e7c1      	b.n	800fe84 <__svfiscanf_r+0x1cc>
 800ff00:	2308      	movs	r3, #8
 800ff02:	9342      	str	r3, [sp, #264]	; 0x108
 800ff04:	2304      	movs	r3, #4
 800ff06:	e7e0      	b.n	800feca <__svfiscanf_r+0x212>
 800ff08:	220a      	movs	r2, #10
 800ff0a:	e7d5      	b.n	800feb8 <__svfiscanf_r+0x200>
 800ff0c:	4629      	mov	r1, r5
 800ff0e:	4640      	mov	r0, r8
 800ff10:	f000 fbb2 	bl	8010678 <__sccl>
 800ff14:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ff16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff1a:	9341      	str	r3, [sp, #260]	; 0x104
 800ff1c:	4605      	mov	r5, r0
 800ff1e:	2301      	movs	r3, #1
 800ff20:	e7d3      	b.n	800feca <__svfiscanf_r+0x212>
 800ff22:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ff24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff28:	9341      	str	r3, [sp, #260]	; 0x104
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	e7cd      	b.n	800feca <__svfiscanf_r+0x212>
 800ff2e:	2302      	movs	r3, #2
 800ff30:	e7cb      	b.n	800feca <__svfiscanf_r+0x212>
 800ff32:	9841      	ldr	r0, [sp, #260]	; 0x104
 800ff34:	06c3      	lsls	r3, r0, #27
 800ff36:	f53f aef2 	bmi.w	800fd1e <__svfiscanf_r+0x66>
 800ff3a:	9b00      	ldr	r3, [sp, #0]
 800ff3c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ff3e:	1d19      	adds	r1, r3, #4
 800ff40:	9100      	str	r1, [sp, #0]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	07c0      	lsls	r0, r0, #31
 800ff46:	bf4c      	ite	mi
 800ff48:	801a      	strhmi	r2, [r3, #0]
 800ff4a:	601a      	strpl	r2, [r3, #0]
 800ff4c:	e6e7      	b.n	800fd1e <__svfiscanf_r+0x66>
 800ff4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ff50:	07d8      	lsls	r0, r3, #31
 800ff52:	d405      	bmi.n	800ff60 <__svfiscanf_r+0x2a8>
 800ff54:	89a3      	ldrh	r3, [r4, #12]
 800ff56:	0599      	lsls	r1, r3, #22
 800ff58:	d402      	bmi.n	800ff60 <__svfiscanf_r+0x2a8>
 800ff5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff5c:	f7ff fb5e 	bl	800f61c <__retarget_lock_release_recursive>
 800ff60:	f04f 30ff 	mov.w	r0, #4294967295
 800ff64:	e79b      	b.n	800fe9e <__svfiscanf_r+0x1e6>
 800ff66:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ff68:	4621      	mov	r1, r4
 800ff6a:	4630      	mov	r0, r6
 800ff6c:	4798      	blx	r3
 800ff6e:	2800      	cmp	r0, #0
 800ff70:	d0af      	beq.n	800fed2 <__svfiscanf_r+0x21a>
 800ff72:	e787      	b.n	800fe84 <__svfiscanf_r+0x1cc>
 800ff74:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ff76:	3201      	adds	r2, #1
 800ff78:	9245      	str	r2, [sp, #276]	; 0x114
 800ff7a:	6862      	ldr	r2, [r4, #4]
 800ff7c:	3a01      	subs	r2, #1
 800ff7e:	2a00      	cmp	r2, #0
 800ff80:	6062      	str	r2, [r4, #4]
 800ff82:	dd0b      	ble.n	800ff9c <__svfiscanf_r+0x2e4>
 800ff84:	3301      	adds	r3, #1
 800ff86:	6023      	str	r3, [r4, #0]
 800ff88:	e7a6      	b.n	800fed8 <__svfiscanf_r+0x220>
 800ff8a:	bf00      	nop
 800ff8c:	0801075f 	.word	0x0801075f
 800ff90:	08010589 	.word	0x08010589
 800ff94:	08012cfe 	.word	0x08012cfe
 800ff98:	08012cb5 	.word	0x08012cb5
 800ff9c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ff9e:	4621      	mov	r1, r4
 800ffa0:	4630      	mov	r0, r6
 800ffa2:	4798      	blx	r3
 800ffa4:	2800      	cmp	r0, #0
 800ffa6:	d097      	beq.n	800fed8 <__svfiscanf_r+0x220>
 800ffa8:	e76c      	b.n	800fe84 <__svfiscanf_r+0x1cc>
 800ffaa:	2b04      	cmp	r3, #4
 800ffac:	dc06      	bgt.n	800ffbc <__svfiscanf_r+0x304>
 800ffae:	466b      	mov	r3, sp
 800ffb0:	4622      	mov	r2, r4
 800ffb2:	a941      	add	r1, sp, #260	; 0x104
 800ffb4:	4630      	mov	r0, r6
 800ffb6:	f000 f88f 	bl	80100d8 <_scanf_i>
 800ffba:	e79b      	b.n	800fef4 <__svfiscanf_r+0x23c>
 800ffbc:	4b0e      	ldr	r3, [pc, #56]	; (800fff8 <__svfiscanf_r+0x340>)
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	f43f aead 	beq.w	800fd1e <__svfiscanf_r+0x66>
 800ffc4:	466b      	mov	r3, sp
 800ffc6:	4622      	mov	r2, r4
 800ffc8:	a941      	add	r1, sp, #260	; 0x104
 800ffca:	4630      	mov	r0, r6
 800ffcc:	f3af 8000 	nop.w
 800ffd0:	e790      	b.n	800fef4 <__svfiscanf_r+0x23c>
 800ffd2:	89a3      	ldrh	r3, [r4, #12]
 800ffd4:	0599      	lsls	r1, r3, #22
 800ffd6:	f53f af59 	bmi.w	800fe8c <__svfiscanf_r+0x1d4>
 800ffda:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ffdc:	f7ff fb1e 	bl	800f61c <__retarget_lock_release_recursive>
 800ffe0:	e754      	b.n	800fe8c <__svfiscanf_r+0x1d4>
 800ffe2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ffe4:	07da      	lsls	r2, r3, #31
 800ffe6:	d405      	bmi.n	800fff4 <__svfiscanf_r+0x33c>
 800ffe8:	89a3      	ldrh	r3, [r4, #12]
 800ffea:	059b      	lsls	r3, r3, #22
 800ffec:	d402      	bmi.n	800fff4 <__svfiscanf_r+0x33c>
 800ffee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fff0:	f7ff fb14 	bl	800f61c <__retarget_lock_release_recursive>
 800fff4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800fff6:	e752      	b.n	800fe9e <__svfiscanf_r+0x1e6>
 800fff8:	00000000 	.word	0x00000000

0800fffc <_vfiscanf_r>:
 800fffc:	b530      	push	{r4, r5, lr}
 800fffe:	4604      	mov	r4, r0
 8010000:	b085      	sub	sp, #20
 8010002:	b148      	cbz	r0, 8010018 <_vfiscanf_r+0x1c>
 8010004:	6a05      	ldr	r5, [r0, #32]
 8010006:	b93d      	cbnz	r5, 8010018 <_vfiscanf_r+0x1c>
 8010008:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801000c:	9101      	str	r1, [sp, #4]
 801000e:	f7ff f8b9 	bl	800f184 <__sinit>
 8010012:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010016:	9901      	ldr	r1, [sp, #4]
 8010018:	4620      	mov	r0, r4
 801001a:	b005      	add	sp, #20
 801001c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010020:	f7ff be4a 	b.w	800fcb8 <__svfiscanf_r>

08010024 <_scanf_chars>:
 8010024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010028:	4615      	mov	r5, r2
 801002a:	688a      	ldr	r2, [r1, #8]
 801002c:	4680      	mov	r8, r0
 801002e:	460c      	mov	r4, r1
 8010030:	b932      	cbnz	r2, 8010040 <_scanf_chars+0x1c>
 8010032:	698a      	ldr	r2, [r1, #24]
 8010034:	2a00      	cmp	r2, #0
 8010036:	bf0c      	ite	eq
 8010038:	2201      	moveq	r2, #1
 801003a:	f04f 32ff 	movne.w	r2, #4294967295
 801003e:	608a      	str	r2, [r1, #8]
 8010040:	6822      	ldr	r2, [r4, #0]
 8010042:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80100d4 <_scanf_chars+0xb0>
 8010046:	06d1      	lsls	r1, r2, #27
 8010048:	bf5f      	itttt	pl
 801004a:	681a      	ldrpl	r2, [r3, #0]
 801004c:	1d11      	addpl	r1, r2, #4
 801004e:	6019      	strpl	r1, [r3, #0]
 8010050:	6816      	ldrpl	r6, [r2, #0]
 8010052:	2700      	movs	r7, #0
 8010054:	69a0      	ldr	r0, [r4, #24]
 8010056:	b188      	cbz	r0, 801007c <_scanf_chars+0x58>
 8010058:	2801      	cmp	r0, #1
 801005a:	d107      	bne.n	801006c <_scanf_chars+0x48>
 801005c:	682a      	ldr	r2, [r5, #0]
 801005e:	7811      	ldrb	r1, [r2, #0]
 8010060:	6962      	ldr	r2, [r4, #20]
 8010062:	5c52      	ldrb	r2, [r2, r1]
 8010064:	b952      	cbnz	r2, 801007c <_scanf_chars+0x58>
 8010066:	2f00      	cmp	r7, #0
 8010068:	d031      	beq.n	80100ce <_scanf_chars+0xaa>
 801006a:	e022      	b.n	80100b2 <_scanf_chars+0x8e>
 801006c:	2802      	cmp	r0, #2
 801006e:	d120      	bne.n	80100b2 <_scanf_chars+0x8e>
 8010070:	682b      	ldr	r3, [r5, #0]
 8010072:	781b      	ldrb	r3, [r3, #0]
 8010074:	f819 3003 	ldrb.w	r3, [r9, r3]
 8010078:	071b      	lsls	r3, r3, #28
 801007a:	d41a      	bmi.n	80100b2 <_scanf_chars+0x8e>
 801007c:	6823      	ldr	r3, [r4, #0]
 801007e:	06da      	lsls	r2, r3, #27
 8010080:	bf5e      	ittt	pl
 8010082:	682b      	ldrpl	r3, [r5, #0]
 8010084:	781b      	ldrbpl	r3, [r3, #0]
 8010086:	f806 3b01 	strbpl.w	r3, [r6], #1
 801008a:	682a      	ldr	r2, [r5, #0]
 801008c:	686b      	ldr	r3, [r5, #4]
 801008e:	3201      	adds	r2, #1
 8010090:	602a      	str	r2, [r5, #0]
 8010092:	68a2      	ldr	r2, [r4, #8]
 8010094:	3b01      	subs	r3, #1
 8010096:	3a01      	subs	r2, #1
 8010098:	606b      	str	r3, [r5, #4]
 801009a:	3701      	adds	r7, #1
 801009c:	60a2      	str	r2, [r4, #8]
 801009e:	b142      	cbz	r2, 80100b2 <_scanf_chars+0x8e>
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	dcd7      	bgt.n	8010054 <_scanf_chars+0x30>
 80100a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80100a8:	4629      	mov	r1, r5
 80100aa:	4640      	mov	r0, r8
 80100ac:	4798      	blx	r3
 80100ae:	2800      	cmp	r0, #0
 80100b0:	d0d0      	beq.n	8010054 <_scanf_chars+0x30>
 80100b2:	6823      	ldr	r3, [r4, #0]
 80100b4:	f013 0310 	ands.w	r3, r3, #16
 80100b8:	d105      	bne.n	80100c6 <_scanf_chars+0xa2>
 80100ba:	68e2      	ldr	r2, [r4, #12]
 80100bc:	3201      	adds	r2, #1
 80100be:	60e2      	str	r2, [r4, #12]
 80100c0:	69a2      	ldr	r2, [r4, #24]
 80100c2:	b102      	cbz	r2, 80100c6 <_scanf_chars+0xa2>
 80100c4:	7033      	strb	r3, [r6, #0]
 80100c6:	6923      	ldr	r3, [r4, #16]
 80100c8:	443b      	add	r3, r7
 80100ca:	6123      	str	r3, [r4, #16]
 80100cc:	2000      	movs	r0, #0
 80100ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100d2:	bf00      	nop
 80100d4:	08012cfe 	.word	0x08012cfe

080100d8 <_scanf_i>:
 80100d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100dc:	4698      	mov	r8, r3
 80100de:	4b74      	ldr	r3, [pc, #464]	; (80102b0 <_scanf_i+0x1d8>)
 80100e0:	460c      	mov	r4, r1
 80100e2:	4682      	mov	sl, r0
 80100e4:	4616      	mov	r6, r2
 80100e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80100ea:	b087      	sub	sp, #28
 80100ec:	ab03      	add	r3, sp, #12
 80100ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80100f2:	4b70      	ldr	r3, [pc, #448]	; (80102b4 <_scanf_i+0x1dc>)
 80100f4:	69a1      	ldr	r1, [r4, #24]
 80100f6:	4a70      	ldr	r2, [pc, #448]	; (80102b8 <_scanf_i+0x1e0>)
 80100f8:	2903      	cmp	r1, #3
 80100fa:	bf18      	it	ne
 80100fc:	461a      	movne	r2, r3
 80100fe:	68a3      	ldr	r3, [r4, #8]
 8010100:	9201      	str	r2, [sp, #4]
 8010102:	1e5a      	subs	r2, r3, #1
 8010104:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010108:	bf88      	it	hi
 801010a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801010e:	4627      	mov	r7, r4
 8010110:	bf82      	ittt	hi
 8010112:	eb03 0905 	addhi.w	r9, r3, r5
 8010116:	f240 135d 	movwhi	r3, #349	; 0x15d
 801011a:	60a3      	strhi	r3, [r4, #8]
 801011c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8010120:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8010124:	bf98      	it	ls
 8010126:	f04f 0900 	movls.w	r9, #0
 801012a:	6023      	str	r3, [r4, #0]
 801012c:	463d      	mov	r5, r7
 801012e:	f04f 0b00 	mov.w	fp, #0
 8010132:	6831      	ldr	r1, [r6, #0]
 8010134:	ab03      	add	r3, sp, #12
 8010136:	7809      	ldrb	r1, [r1, #0]
 8010138:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801013c:	2202      	movs	r2, #2
 801013e:	f7f0 f857 	bl	80001f0 <memchr>
 8010142:	b328      	cbz	r0, 8010190 <_scanf_i+0xb8>
 8010144:	f1bb 0f01 	cmp.w	fp, #1
 8010148:	d159      	bne.n	80101fe <_scanf_i+0x126>
 801014a:	6862      	ldr	r2, [r4, #4]
 801014c:	b92a      	cbnz	r2, 801015a <_scanf_i+0x82>
 801014e:	6822      	ldr	r2, [r4, #0]
 8010150:	2308      	movs	r3, #8
 8010152:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010156:	6063      	str	r3, [r4, #4]
 8010158:	6022      	str	r2, [r4, #0]
 801015a:	6822      	ldr	r2, [r4, #0]
 801015c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8010160:	6022      	str	r2, [r4, #0]
 8010162:	68a2      	ldr	r2, [r4, #8]
 8010164:	1e51      	subs	r1, r2, #1
 8010166:	60a1      	str	r1, [r4, #8]
 8010168:	b192      	cbz	r2, 8010190 <_scanf_i+0xb8>
 801016a:	6832      	ldr	r2, [r6, #0]
 801016c:	1c51      	adds	r1, r2, #1
 801016e:	6031      	str	r1, [r6, #0]
 8010170:	7812      	ldrb	r2, [r2, #0]
 8010172:	f805 2b01 	strb.w	r2, [r5], #1
 8010176:	6872      	ldr	r2, [r6, #4]
 8010178:	3a01      	subs	r2, #1
 801017a:	2a00      	cmp	r2, #0
 801017c:	6072      	str	r2, [r6, #4]
 801017e:	dc07      	bgt.n	8010190 <_scanf_i+0xb8>
 8010180:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8010184:	4631      	mov	r1, r6
 8010186:	4650      	mov	r0, sl
 8010188:	4790      	blx	r2
 801018a:	2800      	cmp	r0, #0
 801018c:	f040 8085 	bne.w	801029a <_scanf_i+0x1c2>
 8010190:	f10b 0b01 	add.w	fp, fp, #1
 8010194:	f1bb 0f03 	cmp.w	fp, #3
 8010198:	d1cb      	bne.n	8010132 <_scanf_i+0x5a>
 801019a:	6863      	ldr	r3, [r4, #4]
 801019c:	b90b      	cbnz	r3, 80101a2 <_scanf_i+0xca>
 801019e:	230a      	movs	r3, #10
 80101a0:	6063      	str	r3, [r4, #4]
 80101a2:	6863      	ldr	r3, [r4, #4]
 80101a4:	4945      	ldr	r1, [pc, #276]	; (80102bc <_scanf_i+0x1e4>)
 80101a6:	6960      	ldr	r0, [r4, #20]
 80101a8:	1ac9      	subs	r1, r1, r3
 80101aa:	f000 fa65 	bl	8010678 <__sccl>
 80101ae:	f04f 0b00 	mov.w	fp, #0
 80101b2:	68a3      	ldr	r3, [r4, #8]
 80101b4:	6822      	ldr	r2, [r4, #0]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d03d      	beq.n	8010236 <_scanf_i+0x15e>
 80101ba:	6831      	ldr	r1, [r6, #0]
 80101bc:	6960      	ldr	r0, [r4, #20]
 80101be:	f891 c000 	ldrb.w	ip, [r1]
 80101c2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80101c6:	2800      	cmp	r0, #0
 80101c8:	d035      	beq.n	8010236 <_scanf_i+0x15e>
 80101ca:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80101ce:	d124      	bne.n	801021a <_scanf_i+0x142>
 80101d0:	0510      	lsls	r0, r2, #20
 80101d2:	d522      	bpl.n	801021a <_scanf_i+0x142>
 80101d4:	f10b 0b01 	add.w	fp, fp, #1
 80101d8:	f1b9 0f00 	cmp.w	r9, #0
 80101dc:	d003      	beq.n	80101e6 <_scanf_i+0x10e>
 80101de:	3301      	adds	r3, #1
 80101e0:	f109 39ff 	add.w	r9, r9, #4294967295
 80101e4:	60a3      	str	r3, [r4, #8]
 80101e6:	6873      	ldr	r3, [r6, #4]
 80101e8:	3b01      	subs	r3, #1
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	6073      	str	r3, [r6, #4]
 80101ee:	dd1b      	ble.n	8010228 <_scanf_i+0x150>
 80101f0:	6833      	ldr	r3, [r6, #0]
 80101f2:	3301      	adds	r3, #1
 80101f4:	6033      	str	r3, [r6, #0]
 80101f6:	68a3      	ldr	r3, [r4, #8]
 80101f8:	3b01      	subs	r3, #1
 80101fa:	60a3      	str	r3, [r4, #8]
 80101fc:	e7d9      	b.n	80101b2 <_scanf_i+0xda>
 80101fe:	f1bb 0f02 	cmp.w	fp, #2
 8010202:	d1ae      	bne.n	8010162 <_scanf_i+0x8a>
 8010204:	6822      	ldr	r2, [r4, #0]
 8010206:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801020a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801020e:	d1bf      	bne.n	8010190 <_scanf_i+0xb8>
 8010210:	2310      	movs	r3, #16
 8010212:	6063      	str	r3, [r4, #4]
 8010214:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010218:	e7a2      	b.n	8010160 <_scanf_i+0x88>
 801021a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801021e:	6022      	str	r2, [r4, #0]
 8010220:	780b      	ldrb	r3, [r1, #0]
 8010222:	f805 3b01 	strb.w	r3, [r5], #1
 8010226:	e7de      	b.n	80101e6 <_scanf_i+0x10e>
 8010228:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801022c:	4631      	mov	r1, r6
 801022e:	4650      	mov	r0, sl
 8010230:	4798      	blx	r3
 8010232:	2800      	cmp	r0, #0
 8010234:	d0df      	beq.n	80101f6 <_scanf_i+0x11e>
 8010236:	6823      	ldr	r3, [r4, #0]
 8010238:	05d9      	lsls	r1, r3, #23
 801023a:	d50d      	bpl.n	8010258 <_scanf_i+0x180>
 801023c:	42bd      	cmp	r5, r7
 801023e:	d909      	bls.n	8010254 <_scanf_i+0x17c>
 8010240:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010244:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010248:	4632      	mov	r2, r6
 801024a:	4650      	mov	r0, sl
 801024c:	4798      	blx	r3
 801024e:	f105 39ff 	add.w	r9, r5, #4294967295
 8010252:	464d      	mov	r5, r9
 8010254:	42bd      	cmp	r5, r7
 8010256:	d028      	beq.n	80102aa <_scanf_i+0x1d2>
 8010258:	6822      	ldr	r2, [r4, #0]
 801025a:	f012 0210 	ands.w	r2, r2, #16
 801025e:	d113      	bne.n	8010288 <_scanf_i+0x1b0>
 8010260:	702a      	strb	r2, [r5, #0]
 8010262:	6863      	ldr	r3, [r4, #4]
 8010264:	9e01      	ldr	r6, [sp, #4]
 8010266:	4639      	mov	r1, r7
 8010268:	4650      	mov	r0, sl
 801026a:	47b0      	blx	r6
 801026c:	f8d8 3000 	ldr.w	r3, [r8]
 8010270:	6821      	ldr	r1, [r4, #0]
 8010272:	1d1a      	adds	r2, r3, #4
 8010274:	f8c8 2000 	str.w	r2, [r8]
 8010278:	f011 0f20 	tst.w	r1, #32
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	d00f      	beq.n	80102a0 <_scanf_i+0x1c8>
 8010280:	6018      	str	r0, [r3, #0]
 8010282:	68e3      	ldr	r3, [r4, #12]
 8010284:	3301      	adds	r3, #1
 8010286:	60e3      	str	r3, [r4, #12]
 8010288:	6923      	ldr	r3, [r4, #16]
 801028a:	1bed      	subs	r5, r5, r7
 801028c:	445d      	add	r5, fp
 801028e:	442b      	add	r3, r5
 8010290:	6123      	str	r3, [r4, #16]
 8010292:	2000      	movs	r0, #0
 8010294:	b007      	add	sp, #28
 8010296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801029a:	f04f 0b00 	mov.w	fp, #0
 801029e:	e7ca      	b.n	8010236 <_scanf_i+0x15e>
 80102a0:	07ca      	lsls	r2, r1, #31
 80102a2:	bf4c      	ite	mi
 80102a4:	8018      	strhmi	r0, [r3, #0]
 80102a6:	6018      	strpl	r0, [r3, #0]
 80102a8:	e7eb      	b.n	8010282 <_scanf_i+0x1aa>
 80102aa:	2001      	movs	r0, #1
 80102ac:	e7f2      	b.n	8010294 <_scanf_i+0x1bc>
 80102ae:	bf00      	nop
 80102b0:	0801111c 	.word	0x0801111c
 80102b4:	08010b05 	.word	0x08010b05
 80102b8:	08010a1d 	.word	0x08010a1d
 80102bc:	08012cf2 	.word	0x08012cf2

080102c0 <__sflush_r>:
 80102c0:	898a      	ldrh	r2, [r1, #12]
 80102c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102c6:	4605      	mov	r5, r0
 80102c8:	0710      	lsls	r0, r2, #28
 80102ca:	460c      	mov	r4, r1
 80102cc:	d458      	bmi.n	8010380 <__sflush_r+0xc0>
 80102ce:	684b      	ldr	r3, [r1, #4]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	dc05      	bgt.n	80102e0 <__sflush_r+0x20>
 80102d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	dc02      	bgt.n	80102e0 <__sflush_r+0x20>
 80102da:	2000      	movs	r0, #0
 80102dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80102e2:	2e00      	cmp	r6, #0
 80102e4:	d0f9      	beq.n	80102da <__sflush_r+0x1a>
 80102e6:	2300      	movs	r3, #0
 80102e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80102ec:	682f      	ldr	r7, [r5, #0]
 80102ee:	6a21      	ldr	r1, [r4, #32]
 80102f0:	602b      	str	r3, [r5, #0]
 80102f2:	d032      	beq.n	801035a <__sflush_r+0x9a>
 80102f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80102f6:	89a3      	ldrh	r3, [r4, #12]
 80102f8:	075a      	lsls	r2, r3, #29
 80102fa:	d505      	bpl.n	8010308 <__sflush_r+0x48>
 80102fc:	6863      	ldr	r3, [r4, #4]
 80102fe:	1ac0      	subs	r0, r0, r3
 8010300:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010302:	b10b      	cbz	r3, 8010308 <__sflush_r+0x48>
 8010304:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010306:	1ac0      	subs	r0, r0, r3
 8010308:	2300      	movs	r3, #0
 801030a:	4602      	mov	r2, r0
 801030c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801030e:	6a21      	ldr	r1, [r4, #32]
 8010310:	4628      	mov	r0, r5
 8010312:	47b0      	blx	r6
 8010314:	1c43      	adds	r3, r0, #1
 8010316:	89a3      	ldrh	r3, [r4, #12]
 8010318:	d106      	bne.n	8010328 <__sflush_r+0x68>
 801031a:	6829      	ldr	r1, [r5, #0]
 801031c:	291d      	cmp	r1, #29
 801031e:	d82b      	bhi.n	8010378 <__sflush_r+0xb8>
 8010320:	4a29      	ldr	r2, [pc, #164]	; (80103c8 <__sflush_r+0x108>)
 8010322:	410a      	asrs	r2, r1
 8010324:	07d6      	lsls	r6, r2, #31
 8010326:	d427      	bmi.n	8010378 <__sflush_r+0xb8>
 8010328:	2200      	movs	r2, #0
 801032a:	6062      	str	r2, [r4, #4]
 801032c:	04d9      	lsls	r1, r3, #19
 801032e:	6922      	ldr	r2, [r4, #16]
 8010330:	6022      	str	r2, [r4, #0]
 8010332:	d504      	bpl.n	801033e <__sflush_r+0x7e>
 8010334:	1c42      	adds	r2, r0, #1
 8010336:	d101      	bne.n	801033c <__sflush_r+0x7c>
 8010338:	682b      	ldr	r3, [r5, #0]
 801033a:	b903      	cbnz	r3, 801033e <__sflush_r+0x7e>
 801033c:	6560      	str	r0, [r4, #84]	; 0x54
 801033e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010340:	602f      	str	r7, [r5, #0]
 8010342:	2900      	cmp	r1, #0
 8010344:	d0c9      	beq.n	80102da <__sflush_r+0x1a>
 8010346:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801034a:	4299      	cmp	r1, r3
 801034c:	d002      	beq.n	8010354 <__sflush_r+0x94>
 801034e:	4628      	mov	r0, r5
 8010350:	f7ff f992 	bl	800f678 <_free_r>
 8010354:	2000      	movs	r0, #0
 8010356:	6360      	str	r0, [r4, #52]	; 0x34
 8010358:	e7c0      	b.n	80102dc <__sflush_r+0x1c>
 801035a:	2301      	movs	r3, #1
 801035c:	4628      	mov	r0, r5
 801035e:	47b0      	blx	r6
 8010360:	1c41      	adds	r1, r0, #1
 8010362:	d1c8      	bne.n	80102f6 <__sflush_r+0x36>
 8010364:	682b      	ldr	r3, [r5, #0]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d0c5      	beq.n	80102f6 <__sflush_r+0x36>
 801036a:	2b1d      	cmp	r3, #29
 801036c:	d001      	beq.n	8010372 <__sflush_r+0xb2>
 801036e:	2b16      	cmp	r3, #22
 8010370:	d101      	bne.n	8010376 <__sflush_r+0xb6>
 8010372:	602f      	str	r7, [r5, #0]
 8010374:	e7b1      	b.n	80102da <__sflush_r+0x1a>
 8010376:	89a3      	ldrh	r3, [r4, #12]
 8010378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801037c:	81a3      	strh	r3, [r4, #12]
 801037e:	e7ad      	b.n	80102dc <__sflush_r+0x1c>
 8010380:	690f      	ldr	r7, [r1, #16]
 8010382:	2f00      	cmp	r7, #0
 8010384:	d0a9      	beq.n	80102da <__sflush_r+0x1a>
 8010386:	0793      	lsls	r3, r2, #30
 8010388:	680e      	ldr	r6, [r1, #0]
 801038a:	bf08      	it	eq
 801038c:	694b      	ldreq	r3, [r1, #20]
 801038e:	600f      	str	r7, [r1, #0]
 8010390:	bf18      	it	ne
 8010392:	2300      	movne	r3, #0
 8010394:	eba6 0807 	sub.w	r8, r6, r7
 8010398:	608b      	str	r3, [r1, #8]
 801039a:	f1b8 0f00 	cmp.w	r8, #0
 801039e:	dd9c      	ble.n	80102da <__sflush_r+0x1a>
 80103a0:	6a21      	ldr	r1, [r4, #32]
 80103a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80103a4:	4643      	mov	r3, r8
 80103a6:	463a      	mov	r2, r7
 80103a8:	4628      	mov	r0, r5
 80103aa:	47b0      	blx	r6
 80103ac:	2800      	cmp	r0, #0
 80103ae:	dc06      	bgt.n	80103be <__sflush_r+0xfe>
 80103b0:	89a3      	ldrh	r3, [r4, #12]
 80103b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80103b6:	81a3      	strh	r3, [r4, #12]
 80103b8:	f04f 30ff 	mov.w	r0, #4294967295
 80103bc:	e78e      	b.n	80102dc <__sflush_r+0x1c>
 80103be:	4407      	add	r7, r0
 80103c0:	eba8 0800 	sub.w	r8, r8, r0
 80103c4:	e7e9      	b.n	801039a <__sflush_r+0xda>
 80103c6:	bf00      	nop
 80103c8:	dfbffffe 	.word	0xdfbffffe

080103cc <_fflush_r>:
 80103cc:	b538      	push	{r3, r4, r5, lr}
 80103ce:	690b      	ldr	r3, [r1, #16]
 80103d0:	4605      	mov	r5, r0
 80103d2:	460c      	mov	r4, r1
 80103d4:	b913      	cbnz	r3, 80103dc <_fflush_r+0x10>
 80103d6:	2500      	movs	r5, #0
 80103d8:	4628      	mov	r0, r5
 80103da:	bd38      	pop	{r3, r4, r5, pc}
 80103dc:	b118      	cbz	r0, 80103e6 <_fflush_r+0x1a>
 80103de:	6a03      	ldr	r3, [r0, #32]
 80103e0:	b90b      	cbnz	r3, 80103e6 <_fflush_r+0x1a>
 80103e2:	f7fe fecf 	bl	800f184 <__sinit>
 80103e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d0f3      	beq.n	80103d6 <_fflush_r+0xa>
 80103ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80103f0:	07d0      	lsls	r0, r2, #31
 80103f2:	d404      	bmi.n	80103fe <_fflush_r+0x32>
 80103f4:	0599      	lsls	r1, r3, #22
 80103f6:	d402      	bmi.n	80103fe <_fflush_r+0x32>
 80103f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80103fa:	f7ff f90e 	bl	800f61a <__retarget_lock_acquire_recursive>
 80103fe:	4628      	mov	r0, r5
 8010400:	4621      	mov	r1, r4
 8010402:	f7ff ff5d 	bl	80102c0 <__sflush_r>
 8010406:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010408:	07da      	lsls	r2, r3, #31
 801040a:	4605      	mov	r5, r0
 801040c:	d4e4      	bmi.n	80103d8 <_fflush_r+0xc>
 801040e:	89a3      	ldrh	r3, [r4, #12]
 8010410:	059b      	lsls	r3, r3, #22
 8010412:	d4e1      	bmi.n	80103d8 <_fflush_r+0xc>
 8010414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010416:	f7ff f901 	bl	800f61c <__retarget_lock_release_recursive>
 801041a:	e7dd      	b.n	80103d8 <_fflush_r+0xc>

0801041c <fiprintf>:
 801041c:	b40e      	push	{r1, r2, r3}
 801041e:	b503      	push	{r0, r1, lr}
 8010420:	4601      	mov	r1, r0
 8010422:	ab03      	add	r3, sp, #12
 8010424:	4805      	ldr	r0, [pc, #20]	; (801043c <fiprintf+0x20>)
 8010426:	f853 2b04 	ldr.w	r2, [r3], #4
 801042a:	6800      	ldr	r0, [r0, #0]
 801042c:	9301      	str	r3, [sp, #4]
 801042e:	f7ff f999 	bl	800f764 <_vfiprintf_r>
 8010432:	b002      	add	sp, #8
 8010434:	f85d eb04 	ldr.w	lr, [sp], #4
 8010438:	b003      	add	sp, #12
 801043a:	4770      	bx	lr
 801043c:	20002cd8 	.word	0x20002cd8

08010440 <__swhatbuf_r>:
 8010440:	b570      	push	{r4, r5, r6, lr}
 8010442:	460c      	mov	r4, r1
 8010444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010448:	2900      	cmp	r1, #0
 801044a:	b096      	sub	sp, #88	; 0x58
 801044c:	4615      	mov	r5, r2
 801044e:	461e      	mov	r6, r3
 8010450:	da0d      	bge.n	801046e <__swhatbuf_r+0x2e>
 8010452:	89a3      	ldrh	r3, [r4, #12]
 8010454:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010458:	f04f 0100 	mov.w	r1, #0
 801045c:	bf0c      	ite	eq
 801045e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010462:	2340      	movne	r3, #64	; 0x40
 8010464:	2000      	movs	r0, #0
 8010466:	6031      	str	r1, [r6, #0]
 8010468:	602b      	str	r3, [r5, #0]
 801046a:	b016      	add	sp, #88	; 0x58
 801046c:	bd70      	pop	{r4, r5, r6, pc}
 801046e:	466a      	mov	r2, sp
 8010470:	f000 f9fa 	bl	8010868 <_fstat_r>
 8010474:	2800      	cmp	r0, #0
 8010476:	dbec      	blt.n	8010452 <__swhatbuf_r+0x12>
 8010478:	9901      	ldr	r1, [sp, #4]
 801047a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801047e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010482:	4259      	negs	r1, r3
 8010484:	4159      	adcs	r1, r3
 8010486:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801048a:	e7eb      	b.n	8010464 <__swhatbuf_r+0x24>

0801048c <__smakebuf_r>:
 801048c:	898b      	ldrh	r3, [r1, #12]
 801048e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010490:	079d      	lsls	r5, r3, #30
 8010492:	4606      	mov	r6, r0
 8010494:	460c      	mov	r4, r1
 8010496:	d507      	bpl.n	80104a8 <__smakebuf_r+0x1c>
 8010498:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801049c:	6023      	str	r3, [r4, #0]
 801049e:	6123      	str	r3, [r4, #16]
 80104a0:	2301      	movs	r3, #1
 80104a2:	6163      	str	r3, [r4, #20]
 80104a4:	b002      	add	sp, #8
 80104a6:	bd70      	pop	{r4, r5, r6, pc}
 80104a8:	ab01      	add	r3, sp, #4
 80104aa:	466a      	mov	r2, sp
 80104ac:	f7ff ffc8 	bl	8010440 <__swhatbuf_r>
 80104b0:	9900      	ldr	r1, [sp, #0]
 80104b2:	4605      	mov	r5, r0
 80104b4:	4630      	mov	r0, r6
 80104b6:	f7fe fce1 	bl	800ee7c <_malloc_r>
 80104ba:	b948      	cbnz	r0, 80104d0 <__smakebuf_r+0x44>
 80104bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80104c0:	059a      	lsls	r2, r3, #22
 80104c2:	d4ef      	bmi.n	80104a4 <__smakebuf_r+0x18>
 80104c4:	f023 0303 	bic.w	r3, r3, #3
 80104c8:	f043 0302 	orr.w	r3, r3, #2
 80104cc:	81a3      	strh	r3, [r4, #12]
 80104ce:	e7e3      	b.n	8010498 <__smakebuf_r+0xc>
 80104d0:	89a3      	ldrh	r3, [r4, #12]
 80104d2:	6020      	str	r0, [r4, #0]
 80104d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104d8:	81a3      	strh	r3, [r4, #12]
 80104da:	9b00      	ldr	r3, [sp, #0]
 80104dc:	6163      	str	r3, [r4, #20]
 80104de:	9b01      	ldr	r3, [sp, #4]
 80104e0:	6120      	str	r0, [r4, #16]
 80104e2:	b15b      	cbz	r3, 80104fc <__smakebuf_r+0x70>
 80104e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80104e8:	4630      	mov	r0, r6
 80104ea:	f000 f9cf 	bl	801088c <_isatty_r>
 80104ee:	b128      	cbz	r0, 80104fc <__smakebuf_r+0x70>
 80104f0:	89a3      	ldrh	r3, [r4, #12]
 80104f2:	f023 0303 	bic.w	r3, r3, #3
 80104f6:	f043 0301 	orr.w	r3, r3, #1
 80104fa:	81a3      	strh	r3, [r4, #12]
 80104fc:	89a3      	ldrh	r3, [r4, #12]
 80104fe:	431d      	orrs	r5, r3
 8010500:	81a5      	strh	r5, [r4, #12]
 8010502:	e7cf      	b.n	80104a4 <__smakebuf_r+0x18>

08010504 <_putc_r>:
 8010504:	b570      	push	{r4, r5, r6, lr}
 8010506:	460d      	mov	r5, r1
 8010508:	4614      	mov	r4, r2
 801050a:	4606      	mov	r6, r0
 801050c:	b118      	cbz	r0, 8010516 <_putc_r+0x12>
 801050e:	6a03      	ldr	r3, [r0, #32]
 8010510:	b90b      	cbnz	r3, 8010516 <_putc_r+0x12>
 8010512:	f7fe fe37 	bl	800f184 <__sinit>
 8010516:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010518:	07d8      	lsls	r0, r3, #31
 801051a:	d405      	bmi.n	8010528 <_putc_r+0x24>
 801051c:	89a3      	ldrh	r3, [r4, #12]
 801051e:	0599      	lsls	r1, r3, #22
 8010520:	d402      	bmi.n	8010528 <_putc_r+0x24>
 8010522:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010524:	f7ff f879 	bl	800f61a <__retarget_lock_acquire_recursive>
 8010528:	68a3      	ldr	r3, [r4, #8]
 801052a:	3b01      	subs	r3, #1
 801052c:	2b00      	cmp	r3, #0
 801052e:	60a3      	str	r3, [r4, #8]
 8010530:	da05      	bge.n	801053e <_putc_r+0x3a>
 8010532:	69a2      	ldr	r2, [r4, #24]
 8010534:	4293      	cmp	r3, r2
 8010536:	db12      	blt.n	801055e <_putc_r+0x5a>
 8010538:	b2eb      	uxtb	r3, r5
 801053a:	2b0a      	cmp	r3, #10
 801053c:	d00f      	beq.n	801055e <_putc_r+0x5a>
 801053e:	6823      	ldr	r3, [r4, #0]
 8010540:	1c5a      	adds	r2, r3, #1
 8010542:	6022      	str	r2, [r4, #0]
 8010544:	701d      	strb	r5, [r3, #0]
 8010546:	b2ed      	uxtb	r5, r5
 8010548:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801054a:	07da      	lsls	r2, r3, #31
 801054c:	d405      	bmi.n	801055a <_putc_r+0x56>
 801054e:	89a3      	ldrh	r3, [r4, #12]
 8010550:	059b      	lsls	r3, r3, #22
 8010552:	d402      	bmi.n	801055a <_putc_r+0x56>
 8010554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010556:	f7ff f861 	bl	800f61c <__retarget_lock_release_recursive>
 801055a:	4628      	mov	r0, r5
 801055c:	bd70      	pop	{r4, r5, r6, pc}
 801055e:	4629      	mov	r1, r5
 8010560:	4622      	mov	r2, r4
 8010562:	4630      	mov	r0, r6
 8010564:	f7fe ff0f 	bl	800f386 <__swbuf_r>
 8010568:	4605      	mov	r5, r0
 801056a:	e7ed      	b.n	8010548 <_putc_r+0x44>

0801056c <lflush>:
 801056c:	898b      	ldrh	r3, [r1, #12]
 801056e:	f003 0309 	and.w	r3, r3, #9
 8010572:	2b09      	cmp	r3, #9
 8010574:	d103      	bne.n	801057e <lflush+0x12>
 8010576:	4b03      	ldr	r3, [pc, #12]	; (8010584 <lflush+0x18>)
 8010578:	6818      	ldr	r0, [r3, #0]
 801057a:	f7ff bf27 	b.w	80103cc <_fflush_r>
 801057e:	2000      	movs	r0, #0
 8010580:	4770      	bx	lr
 8010582:	bf00      	nop
 8010584:	20002cd8 	.word	0x20002cd8

08010588 <__srefill_r>:
 8010588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801058a:	460c      	mov	r4, r1
 801058c:	4605      	mov	r5, r0
 801058e:	b118      	cbz	r0, 8010598 <__srefill_r+0x10>
 8010590:	6a03      	ldr	r3, [r0, #32]
 8010592:	b90b      	cbnz	r3, 8010598 <__srefill_r+0x10>
 8010594:	f7fe fdf6 	bl	800f184 <__sinit>
 8010598:	2300      	movs	r3, #0
 801059a:	6063      	str	r3, [r4, #4]
 801059c:	89a3      	ldrh	r3, [r4, #12]
 801059e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80105a2:	069e      	lsls	r6, r3, #26
 80105a4:	d502      	bpl.n	80105ac <__srefill_r+0x24>
 80105a6:	f04f 30ff 	mov.w	r0, #4294967295
 80105aa:	e05c      	b.n	8010666 <__srefill_r+0xde>
 80105ac:	0758      	lsls	r0, r3, #29
 80105ae:	d448      	bmi.n	8010642 <__srefill_r+0xba>
 80105b0:	06d9      	lsls	r1, r3, #27
 80105b2:	d405      	bmi.n	80105c0 <__srefill_r+0x38>
 80105b4:	2309      	movs	r3, #9
 80105b6:	602b      	str	r3, [r5, #0]
 80105b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80105bc:	81a3      	strh	r3, [r4, #12]
 80105be:	e7f2      	b.n	80105a6 <__srefill_r+0x1e>
 80105c0:	071a      	lsls	r2, r3, #28
 80105c2:	d50b      	bpl.n	80105dc <__srefill_r+0x54>
 80105c4:	4621      	mov	r1, r4
 80105c6:	4628      	mov	r0, r5
 80105c8:	f7ff ff00 	bl	80103cc <_fflush_r>
 80105cc:	2800      	cmp	r0, #0
 80105ce:	d1ea      	bne.n	80105a6 <__srefill_r+0x1e>
 80105d0:	89a3      	ldrh	r3, [r4, #12]
 80105d2:	60a0      	str	r0, [r4, #8]
 80105d4:	f023 0308 	bic.w	r3, r3, #8
 80105d8:	81a3      	strh	r3, [r4, #12]
 80105da:	61a0      	str	r0, [r4, #24]
 80105dc:	89a3      	ldrh	r3, [r4, #12]
 80105de:	f043 0304 	orr.w	r3, r3, #4
 80105e2:	81a3      	strh	r3, [r4, #12]
 80105e4:	6923      	ldr	r3, [r4, #16]
 80105e6:	b91b      	cbnz	r3, 80105f0 <__srefill_r+0x68>
 80105e8:	4621      	mov	r1, r4
 80105ea:	4628      	mov	r0, r5
 80105ec:	f7ff ff4e 	bl	801048c <__smakebuf_r>
 80105f0:	89a6      	ldrh	r6, [r4, #12]
 80105f2:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80105f6:	07b3      	lsls	r3, r6, #30
 80105f8:	d00f      	beq.n	801061a <__srefill_r+0x92>
 80105fa:	2301      	movs	r3, #1
 80105fc:	4a1b      	ldr	r2, [pc, #108]	; (801066c <__srefill_r+0xe4>)
 80105fe:	491c      	ldr	r1, [pc, #112]	; (8010670 <__srefill_r+0xe8>)
 8010600:	481c      	ldr	r0, [pc, #112]	; (8010674 <__srefill_r+0xec>)
 8010602:	81a3      	strh	r3, [r4, #12]
 8010604:	f006 0609 	and.w	r6, r6, #9
 8010608:	f7fe fdd4 	bl	800f1b4 <_fwalk_sglue>
 801060c:	2e09      	cmp	r6, #9
 801060e:	81a7      	strh	r7, [r4, #12]
 8010610:	d103      	bne.n	801061a <__srefill_r+0x92>
 8010612:	4621      	mov	r1, r4
 8010614:	4628      	mov	r0, r5
 8010616:	f7ff fe53 	bl	80102c0 <__sflush_r>
 801061a:	6922      	ldr	r2, [r4, #16]
 801061c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801061e:	6963      	ldr	r3, [r4, #20]
 8010620:	6a21      	ldr	r1, [r4, #32]
 8010622:	6022      	str	r2, [r4, #0]
 8010624:	4628      	mov	r0, r5
 8010626:	47b0      	blx	r6
 8010628:	2800      	cmp	r0, #0
 801062a:	6060      	str	r0, [r4, #4]
 801062c:	dc1c      	bgt.n	8010668 <__srefill_r+0xe0>
 801062e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010632:	bf17      	itett	ne
 8010634:	2200      	movne	r2, #0
 8010636:	f043 0320 	orreq.w	r3, r3, #32
 801063a:	6062      	strne	r2, [r4, #4]
 801063c:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8010640:	e7bc      	b.n	80105bc <__srefill_r+0x34>
 8010642:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010644:	2900      	cmp	r1, #0
 8010646:	d0cd      	beq.n	80105e4 <__srefill_r+0x5c>
 8010648:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801064c:	4299      	cmp	r1, r3
 801064e:	d002      	beq.n	8010656 <__srefill_r+0xce>
 8010650:	4628      	mov	r0, r5
 8010652:	f7ff f811 	bl	800f678 <_free_r>
 8010656:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010658:	6063      	str	r3, [r4, #4]
 801065a:	2000      	movs	r0, #0
 801065c:	6360      	str	r0, [r4, #52]	; 0x34
 801065e:	2b00      	cmp	r3, #0
 8010660:	d0c0      	beq.n	80105e4 <__srefill_r+0x5c>
 8010662:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010664:	6023      	str	r3, [r4, #0]
 8010666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010668:	2000      	movs	r0, #0
 801066a:	e7fc      	b.n	8010666 <__srefill_r+0xde>
 801066c:	20002c80 	.word	0x20002c80
 8010670:	0801056d 	.word	0x0801056d
 8010674:	20002c8c 	.word	0x20002c8c

08010678 <__sccl>:
 8010678:	b570      	push	{r4, r5, r6, lr}
 801067a:	780b      	ldrb	r3, [r1, #0]
 801067c:	4604      	mov	r4, r0
 801067e:	2b5e      	cmp	r3, #94	; 0x5e
 8010680:	bf0b      	itete	eq
 8010682:	784b      	ldrbeq	r3, [r1, #1]
 8010684:	1c4a      	addne	r2, r1, #1
 8010686:	1c8a      	addeq	r2, r1, #2
 8010688:	2100      	movne	r1, #0
 801068a:	bf08      	it	eq
 801068c:	2101      	moveq	r1, #1
 801068e:	3801      	subs	r0, #1
 8010690:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8010694:	f800 1f01 	strb.w	r1, [r0, #1]!
 8010698:	42a8      	cmp	r0, r5
 801069a:	d1fb      	bne.n	8010694 <__sccl+0x1c>
 801069c:	b90b      	cbnz	r3, 80106a2 <__sccl+0x2a>
 801069e:	1e50      	subs	r0, r2, #1
 80106a0:	bd70      	pop	{r4, r5, r6, pc}
 80106a2:	f081 0101 	eor.w	r1, r1, #1
 80106a6:	54e1      	strb	r1, [r4, r3]
 80106a8:	4610      	mov	r0, r2
 80106aa:	4602      	mov	r2, r0
 80106ac:	f812 5b01 	ldrb.w	r5, [r2], #1
 80106b0:	2d2d      	cmp	r5, #45	; 0x2d
 80106b2:	d005      	beq.n	80106c0 <__sccl+0x48>
 80106b4:	2d5d      	cmp	r5, #93	; 0x5d
 80106b6:	d016      	beq.n	80106e6 <__sccl+0x6e>
 80106b8:	2d00      	cmp	r5, #0
 80106ba:	d0f1      	beq.n	80106a0 <__sccl+0x28>
 80106bc:	462b      	mov	r3, r5
 80106be:	e7f2      	b.n	80106a6 <__sccl+0x2e>
 80106c0:	7846      	ldrb	r6, [r0, #1]
 80106c2:	2e5d      	cmp	r6, #93	; 0x5d
 80106c4:	d0fa      	beq.n	80106bc <__sccl+0x44>
 80106c6:	42b3      	cmp	r3, r6
 80106c8:	dcf8      	bgt.n	80106bc <__sccl+0x44>
 80106ca:	3002      	adds	r0, #2
 80106cc:	461a      	mov	r2, r3
 80106ce:	3201      	adds	r2, #1
 80106d0:	4296      	cmp	r6, r2
 80106d2:	54a1      	strb	r1, [r4, r2]
 80106d4:	dcfb      	bgt.n	80106ce <__sccl+0x56>
 80106d6:	1af2      	subs	r2, r6, r3
 80106d8:	3a01      	subs	r2, #1
 80106da:	1c5d      	adds	r5, r3, #1
 80106dc:	42b3      	cmp	r3, r6
 80106de:	bfa8      	it	ge
 80106e0:	2200      	movge	r2, #0
 80106e2:	18ab      	adds	r3, r5, r2
 80106e4:	e7e1      	b.n	80106aa <__sccl+0x32>
 80106e6:	4610      	mov	r0, r2
 80106e8:	e7da      	b.n	80106a0 <__sccl+0x28>

080106ea <__submore>:
 80106ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106ee:	460c      	mov	r4, r1
 80106f0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80106f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80106f6:	4299      	cmp	r1, r3
 80106f8:	d11d      	bne.n	8010736 <__submore+0x4c>
 80106fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80106fe:	f7fe fbbd 	bl	800ee7c <_malloc_r>
 8010702:	b918      	cbnz	r0, 801070c <__submore+0x22>
 8010704:	f04f 30ff 	mov.w	r0, #4294967295
 8010708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801070c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010710:	63a3      	str	r3, [r4, #56]	; 0x38
 8010712:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8010716:	6360      	str	r0, [r4, #52]	; 0x34
 8010718:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801071c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010720:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8010724:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010728:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801072c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8010730:	6020      	str	r0, [r4, #0]
 8010732:	2000      	movs	r0, #0
 8010734:	e7e8      	b.n	8010708 <__submore+0x1e>
 8010736:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8010738:	0077      	lsls	r7, r6, #1
 801073a:	463a      	mov	r2, r7
 801073c:	f000 f8bd 	bl	80108ba <_realloc_r>
 8010740:	4605      	mov	r5, r0
 8010742:	2800      	cmp	r0, #0
 8010744:	d0de      	beq.n	8010704 <__submore+0x1a>
 8010746:	eb00 0806 	add.w	r8, r0, r6
 801074a:	4601      	mov	r1, r0
 801074c:	4632      	mov	r2, r6
 801074e:	4640      	mov	r0, r8
 8010750:	f7fe ff65 	bl	800f61e <memcpy>
 8010754:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8010758:	f8c4 8000 	str.w	r8, [r4]
 801075c:	e7e9      	b.n	8010732 <__submore+0x48>

0801075e <_ungetc_r>:
 801075e:	b570      	push	{r4, r5, r6, lr}
 8010760:	4614      	mov	r4, r2
 8010762:	1c4a      	adds	r2, r1, #1
 8010764:	4606      	mov	r6, r0
 8010766:	460d      	mov	r5, r1
 8010768:	d103      	bne.n	8010772 <_ungetc_r+0x14>
 801076a:	f04f 35ff 	mov.w	r5, #4294967295
 801076e:	4628      	mov	r0, r5
 8010770:	bd70      	pop	{r4, r5, r6, pc}
 8010772:	b118      	cbz	r0, 801077c <_ungetc_r+0x1e>
 8010774:	6a03      	ldr	r3, [r0, #32]
 8010776:	b90b      	cbnz	r3, 801077c <_ungetc_r+0x1e>
 8010778:	f7fe fd04 	bl	800f184 <__sinit>
 801077c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801077e:	07db      	lsls	r3, r3, #31
 8010780:	d405      	bmi.n	801078e <_ungetc_r+0x30>
 8010782:	89a3      	ldrh	r3, [r4, #12]
 8010784:	0598      	lsls	r0, r3, #22
 8010786:	d402      	bmi.n	801078e <_ungetc_r+0x30>
 8010788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801078a:	f7fe ff46 	bl	800f61a <__retarget_lock_acquire_recursive>
 801078e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010792:	f023 0320 	bic.w	r3, r3, #32
 8010796:	0759      	lsls	r1, r3, #29
 8010798:	81a3      	strh	r3, [r4, #12]
 801079a:	b29a      	uxth	r2, r3
 801079c:	d423      	bmi.n	80107e6 <_ungetc_r+0x88>
 801079e:	06d3      	lsls	r3, r2, #27
 80107a0:	d409      	bmi.n	80107b6 <_ungetc_r+0x58>
 80107a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80107a4:	07dd      	lsls	r5, r3, #31
 80107a6:	d4e0      	bmi.n	801076a <_ungetc_r+0xc>
 80107a8:	f412 7f00 	tst.w	r2, #512	; 0x200
 80107ac:	d1dd      	bne.n	801076a <_ungetc_r+0xc>
 80107ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80107b0:	f7fe ff34 	bl	800f61c <__retarget_lock_release_recursive>
 80107b4:	e7d9      	b.n	801076a <_ungetc_r+0xc>
 80107b6:	0710      	lsls	r0, r2, #28
 80107b8:	d511      	bpl.n	80107de <_ungetc_r+0x80>
 80107ba:	4621      	mov	r1, r4
 80107bc:	4630      	mov	r0, r6
 80107be:	f7ff fe05 	bl	80103cc <_fflush_r>
 80107c2:	b130      	cbz	r0, 80107d2 <_ungetc_r+0x74>
 80107c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80107c6:	07d9      	lsls	r1, r3, #31
 80107c8:	d4cf      	bmi.n	801076a <_ungetc_r+0xc>
 80107ca:	89a3      	ldrh	r3, [r4, #12]
 80107cc:	f413 7f00 	tst.w	r3, #512	; 0x200
 80107d0:	e7ec      	b.n	80107ac <_ungetc_r+0x4e>
 80107d2:	89a3      	ldrh	r3, [r4, #12]
 80107d4:	60a0      	str	r0, [r4, #8]
 80107d6:	f023 0308 	bic.w	r3, r3, #8
 80107da:	81a3      	strh	r3, [r4, #12]
 80107dc:	61a0      	str	r0, [r4, #24]
 80107de:	89a3      	ldrh	r3, [r4, #12]
 80107e0:	f043 0304 	orr.w	r3, r3, #4
 80107e4:	81a3      	strh	r3, [r4, #12]
 80107e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80107e8:	6862      	ldr	r2, [r4, #4]
 80107ea:	b2ed      	uxtb	r5, r5
 80107ec:	b1d3      	cbz	r3, 8010824 <_ungetc_r+0xc6>
 80107ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80107f0:	4293      	cmp	r3, r2
 80107f2:	dc05      	bgt.n	8010800 <_ungetc_r+0xa2>
 80107f4:	4621      	mov	r1, r4
 80107f6:	4630      	mov	r0, r6
 80107f8:	f7ff ff77 	bl	80106ea <__submore>
 80107fc:	2800      	cmp	r0, #0
 80107fe:	d1e1      	bne.n	80107c4 <_ungetc_r+0x66>
 8010800:	6823      	ldr	r3, [r4, #0]
 8010802:	1e5a      	subs	r2, r3, #1
 8010804:	6022      	str	r2, [r4, #0]
 8010806:	f803 5c01 	strb.w	r5, [r3, #-1]
 801080a:	6863      	ldr	r3, [r4, #4]
 801080c:	3301      	adds	r3, #1
 801080e:	6063      	str	r3, [r4, #4]
 8010810:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010812:	07da      	lsls	r2, r3, #31
 8010814:	d4ab      	bmi.n	801076e <_ungetc_r+0x10>
 8010816:	89a3      	ldrh	r3, [r4, #12]
 8010818:	059b      	lsls	r3, r3, #22
 801081a:	d4a8      	bmi.n	801076e <_ungetc_r+0x10>
 801081c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801081e:	f7fe fefd 	bl	800f61c <__retarget_lock_release_recursive>
 8010822:	e7a4      	b.n	801076e <_ungetc_r+0x10>
 8010824:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8010826:	6920      	ldr	r0, [r4, #16]
 8010828:	6823      	ldr	r3, [r4, #0]
 801082a:	f001 0101 	and.w	r1, r1, #1
 801082e:	b160      	cbz	r0, 801084a <_ungetc_r+0xec>
 8010830:	4298      	cmp	r0, r3
 8010832:	d20a      	bcs.n	801084a <_ungetc_r+0xec>
 8010834:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8010838:	42a8      	cmp	r0, r5
 801083a:	d106      	bne.n	801084a <_ungetc_r+0xec>
 801083c:	3b01      	subs	r3, #1
 801083e:	3201      	adds	r2, #1
 8010840:	6023      	str	r3, [r4, #0]
 8010842:	6062      	str	r2, [r4, #4]
 8010844:	2900      	cmp	r1, #0
 8010846:	d192      	bne.n	801076e <_ungetc_r+0x10>
 8010848:	e7e5      	b.n	8010816 <_ungetc_r+0xb8>
 801084a:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801084e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010852:	6363      	str	r3, [r4, #52]	; 0x34
 8010854:	2303      	movs	r3, #3
 8010856:	63a3      	str	r3, [r4, #56]	; 0x38
 8010858:	4623      	mov	r3, r4
 801085a:	f803 5f46 	strb.w	r5, [r3, #70]!
 801085e:	6023      	str	r3, [r4, #0]
 8010860:	2301      	movs	r3, #1
 8010862:	6063      	str	r3, [r4, #4]
 8010864:	e7ee      	b.n	8010844 <_ungetc_r+0xe6>
	...

08010868 <_fstat_r>:
 8010868:	b538      	push	{r3, r4, r5, lr}
 801086a:	4d07      	ldr	r5, [pc, #28]	; (8010888 <_fstat_r+0x20>)
 801086c:	2300      	movs	r3, #0
 801086e:	4604      	mov	r4, r0
 8010870:	4608      	mov	r0, r1
 8010872:	4611      	mov	r1, r2
 8010874:	602b      	str	r3, [r5, #0]
 8010876:	f7f1 ffba 	bl	80027ee <_fstat>
 801087a:	1c43      	adds	r3, r0, #1
 801087c:	d102      	bne.n	8010884 <_fstat_r+0x1c>
 801087e:	682b      	ldr	r3, [r5, #0]
 8010880:	b103      	cbz	r3, 8010884 <_fstat_r+0x1c>
 8010882:	6023      	str	r3, [r4, #0]
 8010884:	bd38      	pop	{r3, r4, r5, pc}
 8010886:	bf00      	nop
 8010888:	200044ec 	.word	0x200044ec

0801088c <_isatty_r>:
 801088c:	b538      	push	{r3, r4, r5, lr}
 801088e:	4d06      	ldr	r5, [pc, #24]	; (80108a8 <_isatty_r+0x1c>)
 8010890:	2300      	movs	r3, #0
 8010892:	4604      	mov	r4, r0
 8010894:	4608      	mov	r0, r1
 8010896:	602b      	str	r3, [r5, #0]
 8010898:	f7f1 ffb9 	bl	800280e <_isatty>
 801089c:	1c43      	adds	r3, r0, #1
 801089e:	d102      	bne.n	80108a6 <_isatty_r+0x1a>
 80108a0:	682b      	ldr	r3, [r5, #0]
 80108a2:	b103      	cbz	r3, 80108a6 <_isatty_r+0x1a>
 80108a4:	6023      	str	r3, [r4, #0]
 80108a6:	bd38      	pop	{r3, r4, r5, pc}
 80108a8:	200044ec 	.word	0x200044ec

080108ac <abort>:
 80108ac:	b508      	push	{r3, lr}
 80108ae:	2006      	movs	r0, #6
 80108b0:	f000 f952 	bl	8010b58 <raise>
 80108b4:	2001      	movs	r0, #1
 80108b6:	f7f1 ff4b 	bl	8002750 <_exit>

080108ba <_realloc_r>:
 80108ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108be:	4680      	mov	r8, r0
 80108c0:	4614      	mov	r4, r2
 80108c2:	460e      	mov	r6, r1
 80108c4:	b921      	cbnz	r1, 80108d0 <_realloc_r+0x16>
 80108c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80108ca:	4611      	mov	r1, r2
 80108cc:	f7fe bad6 	b.w	800ee7c <_malloc_r>
 80108d0:	b92a      	cbnz	r2, 80108de <_realloc_r+0x24>
 80108d2:	f7fe fed1 	bl	800f678 <_free_r>
 80108d6:	4625      	mov	r5, r4
 80108d8:	4628      	mov	r0, r5
 80108da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108de:	f000 f957 	bl	8010b90 <_malloc_usable_size_r>
 80108e2:	4284      	cmp	r4, r0
 80108e4:	4607      	mov	r7, r0
 80108e6:	d802      	bhi.n	80108ee <_realloc_r+0x34>
 80108e8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80108ec:	d812      	bhi.n	8010914 <_realloc_r+0x5a>
 80108ee:	4621      	mov	r1, r4
 80108f0:	4640      	mov	r0, r8
 80108f2:	f7fe fac3 	bl	800ee7c <_malloc_r>
 80108f6:	4605      	mov	r5, r0
 80108f8:	2800      	cmp	r0, #0
 80108fa:	d0ed      	beq.n	80108d8 <_realloc_r+0x1e>
 80108fc:	42bc      	cmp	r4, r7
 80108fe:	4622      	mov	r2, r4
 8010900:	4631      	mov	r1, r6
 8010902:	bf28      	it	cs
 8010904:	463a      	movcs	r2, r7
 8010906:	f7fe fe8a 	bl	800f61e <memcpy>
 801090a:	4631      	mov	r1, r6
 801090c:	4640      	mov	r0, r8
 801090e:	f7fe feb3 	bl	800f678 <_free_r>
 8010912:	e7e1      	b.n	80108d8 <_realloc_r+0x1e>
 8010914:	4635      	mov	r5, r6
 8010916:	e7df      	b.n	80108d8 <_realloc_r+0x1e>

08010918 <_strtol_l.constprop.0>:
 8010918:	2b01      	cmp	r3, #1
 801091a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801091e:	d001      	beq.n	8010924 <_strtol_l.constprop.0+0xc>
 8010920:	2b24      	cmp	r3, #36	; 0x24
 8010922:	d906      	bls.n	8010932 <_strtol_l.constprop.0+0x1a>
 8010924:	f7fe fe4e 	bl	800f5c4 <__errno>
 8010928:	2316      	movs	r3, #22
 801092a:	6003      	str	r3, [r0, #0]
 801092c:	2000      	movs	r0, #0
 801092e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010932:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010a18 <_strtol_l.constprop.0+0x100>
 8010936:	460d      	mov	r5, r1
 8010938:	462e      	mov	r6, r5
 801093a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801093e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8010942:	f017 0708 	ands.w	r7, r7, #8
 8010946:	d1f7      	bne.n	8010938 <_strtol_l.constprop.0+0x20>
 8010948:	2c2d      	cmp	r4, #45	; 0x2d
 801094a:	d132      	bne.n	80109b2 <_strtol_l.constprop.0+0x9a>
 801094c:	782c      	ldrb	r4, [r5, #0]
 801094e:	2701      	movs	r7, #1
 8010950:	1cb5      	adds	r5, r6, #2
 8010952:	2b00      	cmp	r3, #0
 8010954:	d05b      	beq.n	8010a0e <_strtol_l.constprop.0+0xf6>
 8010956:	2b10      	cmp	r3, #16
 8010958:	d109      	bne.n	801096e <_strtol_l.constprop.0+0x56>
 801095a:	2c30      	cmp	r4, #48	; 0x30
 801095c:	d107      	bne.n	801096e <_strtol_l.constprop.0+0x56>
 801095e:	782c      	ldrb	r4, [r5, #0]
 8010960:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010964:	2c58      	cmp	r4, #88	; 0x58
 8010966:	d14d      	bne.n	8010a04 <_strtol_l.constprop.0+0xec>
 8010968:	786c      	ldrb	r4, [r5, #1]
 801096a:	2310      	movs	r3, #16
 801096c:	3502      	adds	r5, #2
 801096e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010972:	f108 38ff 	add.w	r8, r8, #4294967295
 8010976:	f04f 0e00 	mov.w	lr, #0
 801097a:	fbb8 f9f3 	udiv	r9, r8, r3
 801097e:	4676      	mov	r6, lr
 8010980:	fb03 8a19 	mls	sl, r3, r9, r8
 8010984:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8010988:	f1bc 0f09 	cmp.w	ip, #9
 801098c:	d816      	bhi.n	80109bc <_strtol_l.constprop.0+0xa4>
 801098e:	4664      	mov	r4, ip
 8010990:	42a3      	cmp	r3, r4
 8010992:	dd24      	ble.n	80109de <_strtol_l.constprop.0+0xc6>
 8010994:	f1be 3fff 	cmp.w	lr, #4294967295
 8010998:	d008      	beq.n	80109ac <_strtol_l.constprop.0+0x94>
 801099a:	45b1      	cmp	r9, r6
 801099c:	d31c      	bcc.n	80109d8 <_strtol_l.constprop.0+0xc0>
 801099e:	d101      	bne.n	80109a4 <_strtol_l.constprop.0+0x8c>
 80109a0:	45a2      	cmp	sl, r4
 80109a2:	db19      	blt.n	80109d8 <_strtol_l.constprop.0+0xc0>
 80109a4:	fb06 4603 	mla	r6, r6, r3, r4
 80109a8:	f04f 0e01 	mov.w	lr, #1
 80109ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80109b0:	e7e8      	b.n	8010984 <_strtol_l.constprop.0+0x6c>
 80109b2:	2c2b      	cmp	r4, #43	; 0x2b
 80109b4:	bf04      	itt	eq
 80109b6:	782c      	ldrbeq	r4, [r5, #0]
 80109b8:	1cb5      	addeq	r5, r6, #2
 80109ba:	e7ca      	b.n	8010952 <_strtol_l.constprop.0+0x3a>
 80109bc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80109c0:	f1bc 0f19 	cmp.w	ip, #25
 80109c4:	d801      	bhi.n	80109ca <_strtol_l.constprop.0+0xb2>
 80109c6:	3c37      	subs	r4, #55	; 0x37
 80109c8:	e7e2      	b.n	8010990 <_strtol_l.constprop.0+0x78>
 80109ca:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80109ce:	f1bc 0f19 	cmp.w	ip, #25
 80109d2:	d804      	bhi.n	80109de <_strtol_l.constprop.0+0xc6>
 80109d4:	3c57      	subs	r4, #87	; 0x57
 80109d6:	e7db      	b.n	8010990 <_strtol_l.constprop.0+0x78>
 80109d8:	f04f 3eff 	mov.w	lr, #4294967295
 80109dc:	e7e6      	b.n	80109ac <_strtol_l.constprop.0+0x94>
 80109de:	f1be 3fff 	cmp.w	lr, #4294967295
 80109e2:	d105      	bne.n	80109f0 <_strtol_l.constprop.0+0xd8>
 80109e4:	2322      	movs	r3, #34	; 0x22
 80109e6:	6003      	str	r3, [r0, #0]
 80109e8:	4646      	mov	r6, r8
 80109ea:	b942      	cbnz	r2, 80109fe <_strtol_l.constprop.0+0xe6>
 80109ec:	4630      	mov	r0, r6
 80109ee:	e79e      	b.n	801092e <_strtol_l.constprop.0+0x16>
 80109f0:	b107      	cbz	r7, 80109f4 <_strtol_l.constprop.0+0xdc>
 80109f2:	4276      	negs	r6, r6
 80109f4:	2a00      	cmp	r2, #0
 80109f6:	d0f9      	beq.n	80109ec <_strtol_l.constprop.0+0xd4>
 80109f8:	f1be 0f00 	cmp.w	lr, #0
 80109fc:	d000      	beq.n	8010a00 <_strtol_l.constprop.0+0xe8>
 80109fe:	1e69      	subs	r1, r5, #1
 8010a00:	6011      	str	r1, [r2, #0]
 8010a02:	e7f3      	b.n	80109ec <_strtol_l.constprop.0+0xd4>
 8010a04:	2430      	movs	r4, #48	; 0x30
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d1b1      	bne.n	801096e <_strtol_l.constprop.0+0x56>
 8010a0a:	2308      	movs	r3, #8
 8010a0c:	e7af      	b.n	801096e <_strtol_l.constprop.0+0x56>
 8010a0e:	2c30      	cmp	r4, #48	; 0x30
 8010a10:	d0a5      	beq.n	801095e <_strtol_l.constprop.0+0x46>
 8010a12:	230a      	movs	r3, #10
 8010a14:	e7ab      	b.n	801096e <_strtol_l.constprop.0+0x56>
 8010a16:	bf00      	nop
 8010a18:	08012cfe 	.word	0x08012cfe

08010a1c <_strtol_r>:
 8010a1c:	f7ff bf7c 	b.w	8010918 <_strtol_l.constprop.0>

08010a20 <_strtoul_l.constprop.0>:
 8010a20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010a24:	4f36      	ldr	r7, [pc, #216]	; (8010b00 <_strtoul_l.constprop.0+0xe0>)
 8010a26:	4686      	mov	lr, r0
 8010a28:	460d      	mov	r5, r1
 8010a2a:	4628      	mov	r0, r5
 8010a2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010a30:	5d3e      	ldrb	r6, [r7, r4]
 8010a32:	f016 0608 	ands.w	r6, r6, #8
 8010a36:	d1f8      	bne.n	8010a2a <_strtoul_l.constprop.0+0xa>
 8010a38:	2c2d      	cmp	r4, #45	; 0x2d
 8010a3a:	d130      	bne.n	8010a9e <_strtoul_l.constprop.0+0x7e>
 8010a3c:	782c      	ldrb	r4, [r5, #0]
 8010a3e:	2601      	movs	r6, #1
 8010a40:	1c85      	adds	r5, r0, #2
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d057      	beq.n	8010af6 <_strtoul_l.constprop.0+0xd6>
 8010a46:	2b10      	cmp	r3, #16
 8010a48:	d109      	bne.n	8010a5e <_strtoul_l.constprop.0+0x3e>
 8010a4a:	2c30      	cmp	r4, #48	; 0x30
 8010a4c:	d107      	bne.n	8010a5e <_strtoul_l.constprop.0+0x3e>
 8010a4e:	7828      	ldrb	r0, [r5, #0]
 8010a50:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8010a54:	2858      	cmp	r0, #88	; 0x58
 8010a56:	d149      	bne.n	8010aec <_strtoul_l.constprop.0+0xcc>
 8010a58:	786c      	ldrb	r4, [r5, #1]
 8010a5a:	2310      	movs	r3, #16
 8010a5c:	3502      	adds	r5, #2
 8010a5e:	f04f 38ff 	mov.w	r8, #4294967295
 8010a62:	2700      	movs	r7, #0
 8010a64:	fbb8 f8f3 	udiv	r8, r8, r3
 8010a68:	fb03 f908 	mul.w	r9, r3, r8
 8010a6c:	ea6f 0909 	mvn.w	r9, r9
 8010a70:	4638      	mov	r0, r7
 8010a72:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8010a76:	f1bc 0f09 	cmp.w	ip, #9
 8010a7a:	d815      	bhi.n	8010aa8 <_strtoul_l.constprop.0+0x88>
 8010a7c:	4664      	mov	r4, ip
 8010a7e:	42a3      	cmp	r3, r4
 8010a80:	dd23      	ble.n	8010aca <_strtoul_l.constprop.0+0xaa>
 8010a82:	f1b7 3fff 	cmp.w	r7, #4294967295
 8010a86:	d007      	beq.n	8010a98 <_strtoul_l.constprop.0+0x78>
 8010a88:	4580      	cmp	r8, r0
 8010a8a:	d31b      	bcc.n	8010ac4 <_strtoul_l.constprop.0+0xa4>
 8010a8c:	d101      	bne.n	8010a92 <_strtoul_l.constprop.0+0x72>
 8010a8e:	45a1      	cmp	r9, r4
 8010a90:	db18      	blt.n	8010ac4 <_strtoul_l.constprop.0+0xa4>
 8010a92:	fb00 4003 	mla	r0, r0, r3, r4
 8010a96:	2701      	movs	r7, #1
 8010a98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010a9c:	e7e9      	b.n	8010a72 <_strtoul_l.constprop.0+0x52>
 8010a9e:	2c2b      	cmp	r4, #43	; 0x2b
 8010aa0:	bf04      	itt	eq
 8010aa2:	782c      	ldrbeq	r4, [r5, #0]
 8010aa4:	1c85      	addeq	r5, r0, #2
 8010aa6:	e7cc      	b.n	8010a42 <_strtoul_l.constprop.0+0x22>
 8010aa8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010aac:	f1bc 0f19 	cmp.w	ip, #25
 8010ab0:	d801      	bhi.n	8010ab6 <_strtoul_l.constprop.0+0x96>
 8010ab2:	3c37      	subs	r4, #55	; 0x37
 8010ab4:	e7e3      	b.n	8010a7e <_strtoul_l.constprop.0+0x5e>
 8010ab6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010aba:	f1bc 0f19 	cmp.w	ip, #25
 8010abe:	d804      	bhi.n	8010aca <_strtoul_l.constprop.0+0xaa>
 8010ac0:	3c57      	subs	r4, #87	; 0x57
 8010ac2:	e7dc      	b.n	8010a7e <_strtoul_l.constprop.0+0x5e>
 8010ac4:	f04f 37ff 	mov.w	r7, #4294967295
 8010ac8:	e7e6      	b.n	8010a98 <_strtoul_l.constprop.0+0x78>
 8010aca:	1c7b      	adds	r3, r7, #1
 8010acc:	d106      	bne.n	8010adc <_strtoul_l.constprop.0+0xbc>
 8010ace:	2322      	movs	r3, #34	; 0x22
 8010ad0:	f8ce 3000 	str.w	r3, [lr]
 8010ad4:	4638      	mov	r0, r7
 8010ad6:	b932      	cbnz	r2, 8010ae6 <_strtoul_l.constprop.0+0xc6>
 8010ad8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010adc:	b106      	cbz	r6, 8010ae0 <_strtoul_l.constprop.0+0xc0>
 8010ade:	4240      	negs	r0, r0
 8010ae0:	2a00      	cmp	r2, #0
 8010ae2:	d0f9      	beq.n	8010ad8 <_strtoul_l.constprop.0+0xb8>
 8010ae4:	b107      	cbz	r7, 8010ae8 <_strtoul_l.constprop.0+0xc8>
 8010ae6:	1e69      	subs	r1, r5, #1
 8010ae8:	6011      	str	r1, [r2, #0]
 8010aea:	e7f5      	b.n	8010ad8 <_strtoul_l.constprop.0+0xb8>
 8010aec:	2430      	movs	r4, #48	; 0x30
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d1b5      	bne.n	8010a5e <_strtoul_l.constprop.0+0x3e>
 8010af2:	2308      	movs	r3, #8
 8010af4:	e7b3      	b.n	8010a5e <_strtoul_l.constprop.0+0x3e>
 8010af6:	2c30      	cmp	r4, #48	; 0x30
 8010af8:	d0a9      	beq.n	8010a4e <_strtoul_l.constprop.0+0x2e>
 8010afa:	230a      	movs	r3, #10
 8010afc:	e7af      	b.n	8010a5e <_strtoul_l.constprop.0+0x3e>
 8010afe:	bf00      	nop
 8010b00:	08012cfe 	.word	0x08012cfe

08010b04 <_strtoul_r>:
 8010b04:	f7ff bf8c 	b.w	8010a20 <_strtoul_l.constprop.0>

08010b08 <_raise_r>:
 8010b08:	291f      	cmp	r1, #31
 8010b0a:	b538      	push	{r3, r4, r5, lr}
 8010b0c:	4604      	mov	r4, r0
 8010b0e:	460d      	mov	r5, r1
 8010b10:	d904      	bls.n	8010b1c <_raise_r+0x14>
 8010b12:	2316      	movs	r3, #22
 8010b14:	6003      	str	r3, [r0, #0]
 8010b16:	f04f 30ff 	mov.w	r0, #4294967295
 8010b1a:	bd38      	pop	{r3, r4, r5, pc}
 8010b1c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010b1e:	b112      	cbz	r2, 8010b26 <_raise_r+0x1e>
 8010b20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010b24:	b94b      	cbnz	r3, 8010b3a <_raise_r+0x32>
 8010b26:	4620      	mov	r0, r4
 8010b28:	f000 f830 	bl	8010b8c <_getpid_r>
 8010b2c:	462a      	mov	r2, r5
 8010b2e:	4601      	mov	r1, r0
 8010b30:	4620      	mov	r0, r4
 8010b32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b36:	f000 b817 	b.w	8010b68 <_kill_r>
 8010b3a:	2b01      	cmp	r3, #1
 8010b3c:	d00a      	beq.n	8010b54 <_raise_r+0x4c>
 8010b3e:	1c59      	adds	r1, r3, #1
 8010b40:	d103      	bne.n	8010b4a <_raise_r+0x42>
 8010b42:	2316      	movs	r3, #22
 8010b44:	6003      	str	r3, [r0, #0]
 8010b46:	2001      	movs	r0, #1
 8010b48:	e7e7      	b.n	8010b1a <_raise_r+0x12>
 8010b4a:	2400      	movs	r4, #0
 8010b4c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010b50:	4628      	mov	r0, r5
 8010b52:	4798      	blx	r3
 8010b54:	2000      	movs	r0, #0
 8010b56:	e7e0      	b.n	8010b1a <_raise_r+0x12>

08010b58 <raise>:
 8010b58:	4b02      	ldr	r3, [pc, #8]	; (8010b64 <raise+0xc>)
 8010b5a:	4601      	mov	r1, r0
 8010b5c:	6818      	ldr	r0, [r3, #0]
 8010b5e:	f7ff bfd3 	b.w	8010b08 <_raise_r>
 8010b62:	bf00      	nop
 8010b64:	20002cd8 	.word	0x20002cd8

08010b68 <_kill_r>:
 8010b68:	b538      	push	{r3, r4, r5, lr}
 8010b6a:	4d07      	ldr	r5, [pc, #28]	; (8010b88 <_kill_r+0x20>)
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	4604      	mov	r4, r0
 8010b70:	4608      	mov	r0, r1
 8010b72:	4611      	mov	r1, r2
 8010b74:	602b      	str	r3, [r5, #0]
 8010b76:	f7f1 fddb 	bl	8002730 <_kill>
 8010b7a:	1c43      	adds	r3, r0, #1
 8010b7c:	d102      	bne.n	8010b84 <_kill_r+0x1c>
 8010b7e:	682b      	ldr	r3, [r5, #0]
 8010b80:	b103      	cbz	r3, 8010b84 <_kill_r+0x1c>
 8010b82:	6023      	str	r3, [r4, #0]
 8010b84:	bd38      	pop	{r3, r4, r5, pc}
 8010b86:	bf00      	nop
 8010b88:	200044ec 	.word	0x200044ec

08010b8c <_getpid_r>:
 8010b8c:	f7f1 bdc8 	b.w	8002720 <_getpid>

08010b90 <_malloc_usable_size_r>:
 8010b90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b94:	1f18      	subs	r0, r3, #4
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	bfbc      	itt	lt
 8010b9a:	580b      	ldrlt	r3, [r1, r0]
 8010b9c:	18c0      	addlt	r0, r0, r3
 8010b9e:	4770      	bx	lr

08010ba0 <_gettimeofday>:
 8010ba0:	4b02      	ldr	r3, [pc, #8]	; (8010bac <_gettimeofday+0xc>)
 8010ba2:	2258      	movs	r2, #88	; 0x58
 8010ba4:	601a      	str	r2, [r3, #0]
 8010ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8010baa:	4770      	bx	lr
 8010bac:	200044ec 	.word	0x200044ec

08010bb0 <_init>:
 8010bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bb2:	bf00      	nop
 8010bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010bb6:	bc08      	pop	{r3}
 8010bb8:	469e      	mov	lr, r3
 8010bba:	4770      	bx	lr

08010bbc <_fini>:
 8010bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bbe:	bf00      	nop
 8010bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010bc2:	bc08      	pop	{r3}
 8010bc4:	469e      	mov	lr, r3
 8010bc6:	4770      	bx	lr
